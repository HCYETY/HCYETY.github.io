<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【前端监控系统开发实录】之使用 swagger 配置接口文档</title>
      <link href="/2022/08/30/qian-duan-jian-kong-xi-tong-kai-fa-shi-lu-zhi-shi-yong-swagger-pei-zhi-jie-kou-wen-dang/"/>
      <url>/2022/08/30/qian-duan-jian-kong-xi-tong-kai-fa-shi-lu-zhi-shi-yong-swagger-pei-zhi-jie-kou-wen-dang/</url>
      
        <content type="html"><![CDATA[<h1 id="swagger-安装"><a href="#swagger-安装" class="headerlink" title="swagger 安装"></a>swagger 安装</h1><p>后端项目的技术栈是 nodejs + koa ，因此使用<code>yarn add koa2-swagger-ui swagger-jsdoc --save</code>安装依赖。</p><h1 id="swagger-配置"><a href="#swagger-配置" class="headerlink" title="swagger 配置"></a>swagger 配置</h1><ol><li>根目录下新建<code>config</code>目录，在该目录下新建<code>swagger.ts</code>文件：<pre class="line-numbers language-none"><code class="language-none">const Router &#x3D; require(&#39;koa-router&#39;);const path &#x3D; require(&#39;path&#39;);const swaggerJSDoc &#x3D; require(&#39;swagger-jsdoc&#39;);const swaggerRouter &#x3D; new Router(&#123;    prefix: &#39;&#x2F;swagger&#39; &#x2F;&#x2F; 路由前缀&#125;)const swaggerDefinition &#x3D; &#123;    info: &#123;        title: &#39;monitor-system-node API 接口文档&#39;,        version: &#39;1.0.0&#39;,        description: &#39;详细的接口文档&#39;    &#125;&#125;const options &#x3D; &#123;    swaggerDefinition,    apis: [path.join(__dirname, &#39;..&#x2F;routes&#x2F;doc&#x2F;*.ts&#39;)] &#x2F;&#x2F; 写有注解的router的存放地址&#125;const swaggerSpec &#x3D; swaggerJSDoc(options);&#x2F;&#x2F; 通过路由获取生成的注解文件swaggerRouter.get(&#39;&#x2F;swagger.json&#39;, async function (ctx: &#123; set: (arg0: string, arg1: string) &#x3D;&gt; void; body: any; &#125;) &#123;    ctx.set(&#39;Content-Type&#39;, &#39;application&#x2F;json&#39;)    ctx.body &#x3D; swaggerSpec&#125;)export default swaggerRouter;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在入口文件<code>app.ts</code>中引入：<pre class="line-numbers language-none"><code class="language-none">import &#123;koaSwagger&#125; from &quot;koa2-swagger-ui&quot;;import swaggerRouter from &#39;.&#x2F;config&#x2F;swagger&#39;;app.use(swaggerRouter.routes()).use(swaggerRouter.allowedMethods())const swaggerOption &#x3D; &#123;    routePrefix: &#39;&#x2F;swagger&#39;, &#x2F;&#x2F; host at &#x2F;swagger instead of default &#x2F;docs    swaggerOptions: &#123;        url: &#39;&#x2F;swagger&#x2F;swagger.json&#39; &#x2F;&#x2F; example path to json 其实就是之后swagger-jsdoc生成的文档地址    &#125;&#125;app.use(koaSwagger(swaggerOption))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>启动服务，访问地址<code>http://localhost:8080/swagger</code>（域名改成你自己的），可以看到如下页面，说明配置成功：<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bb6c24c8adde483eb56cd9c927df9056~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li></ol><h1 id="编写接口文档"><a href="#编写接口文档" class="headerlink" title="编写接口文档"></a>编写接口文档</h1><p>安装完 swagger 之后，我们可以通过 <a href="https://www.jianshu.com/p/5365ef83252a">OpenAPI 规范摘要</a> 了解它的基本语法。</p><p><strong>注意</strong>：</p><blockquote><ol><li>这里面有个坑，如果想达到这样的效果：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0db76d53b9fb4c72837f8430b9035384~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>图中红色框的代码其实是不用写的：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4648279a1f564dfd997eacdb21dc094a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>否则它会：<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1751c6ba1808418ca8ca3fdb92e83c3a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li><li>如果在<code>responses</code>时有多个响应状态码，比如 <strong>200</strong> 、<strong>500</strong> 等等，需要给状态码加上引号，才能正确显示：<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/76e7f80e522041caaa1555bb0dfe2100~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li></ol></blockquote><p><strong>整体代码</strong>：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 登录接口&#x2F;** * @swagger * &#x2F;user&#x2F;login: *   post: *     description: 用户登入 *     tags: [用户登入模块] *     produces: *       - application&#x2F;json *     parameters: *       - name: account *         description: 账号 *         in: formData *         required: true *         type: string *       - name: email *         description: 邮箱账号 *         in: formData *         required: true *         type: string *       - name: password *         description: 密码 *         in: formData *         required: true *         type: string *       - name: captcha *         description: 验证码 *         in: formData *         required: true *         type: integer *       - name: runtime_captcha *         description: 发送验证码的时间戳 *         in: formData *         required: false *         type: integer *       - name: session *         description: sessionID *         in: formData *         required: false *         type: string *     responses: *       &#39;200&#39;: *          description: 登录成功的响应 *          schema: *              type: object *              required: *                - code *                - msg *                - data *              properties: *                 code: *                     type: integer *                     format: int64 *                     example: 200 *                 msg: *                    type: string *                    example: 登录成功 *                 data: *                    type: object *                    properties: *                        status: *                             type: boolean *                             example: true *       &#39;500&#39;: *         description: 数据写入失败 *         schema: *              type: object *              required: *                - code *                - msg *                - data *              properties: *                 code: *                     type: integer *                     format: int64 *                     example: 500 *                 msg: *                    type: string *                    example: 数据写入失败 *                 data: *                    type: object *                    properties: *                        status: *                             type: boolean *                             example: false *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>页面效果是这样的：<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec8ea22f25fa497f81d0fab74340108b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c4477fb76834c69a62521458dd6b0c6~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ul><li><p>如果想达到这样的效果：<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/86f620c7acef45c99a8facc4d973299c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ul><li>其实只要按同样的步骤编写接口，确保<code>tags</code>是一致的即可：<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d772206e4ec4c05a31bbfaca799a64b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3cd7b31b8fea4315ad211e2fa02359b9~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li></ul></li><li><p>我们可以测试下，让两个<code>tags</code>不一致：<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1ff6e770cd7945f7bbb9b2c5dc9e7bd7~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ul><li>不难发现：<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b123536f0ede4b248c29f595fee4c496~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li></ul></li></ul><h1 id="提高编写速度"><a href="#提高编写速度" class="headerlink" title="提高编写速度"></a>提高编写速度</h1><h2 id="自定义模板"><a href="#自定义模板" class="headerlink" title="自定义模板"></a>自定义模板</h2><p>笔者使用的编辑器 WebStorm ，打开方式为：</p><ol><li>依次点击：<code>File - Settings - Editor - Live Templates</code></li><li>可以看到右上角有个 + ，点击可以看到<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ed1a78720204ab9a1d284e49875c3a2~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li></ol><ul><li>选项1：新建模板，该模板会保存在已选择的模板组中</li><li>选项2：新建模板组，该模板组会和其他模板组同级，如 user 就是笔者新建的模板组，然后再在新建的 user 模板组中创建新模板：<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff62cf5e0a234076b598abbc715f627b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5a00f490e15345f9aa12f16d2b6c8be8~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li></ul><ol start="3"><li>在组件支持的语言文件中输入组件名称，就会看到快捷代码提示，按下 Tab 键就能生成模板内容了：<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3cd0fa764e4441ed96299393cd60de7e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li></ol><h1 id="部署至服务器"><a href="#部署至服务器" class="headerlink" title="部署至服务器"></a>部署至服务器</h1><p>当我们编写好 API 文档后，我们还需要将其部署到服务器上，以便其他人查阅，否则每次查看接口需要先将后端服务跑起来的话，那无疑是不合理的行为，所以我们还要部署至服务器上。</p><ol><li>根据这两个官网的说明做好相关配置：</li></ol><ul><li><a href="https://github.com/scttcper/koa2-swagger-ui">koa2-swagger-ui</a></li><li><a href="https://github.com/Surnet/swagger-jsdoc">swagger-jsdoc</a></li></ul><ol start="2"><li><p>刷新后我们会发现页面报了跨域的错，于是笔者采用 nginx 反向代理的方式处理跨域：</p> <pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 笔者的 nginx 安装路径为 &#x2F;usr&#x2F;local&#x2F;nginx ，因此：&#x2F;&#x2F; 使用 Xshell 连接到服务器后执行 vim &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf ，编辑文件&#x2F;&#x2F; 全局配置，在 nginx.conf 文件中的 http 节点加入跨域信息http &#123;    # 跨域配置    add_header &#39;Access-Control-Allow-Origin&#39; &#39;$http_origin&#39; ;    add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39; ;    add_header &#39;Access-Control-Allow-Methods&#39; &#39;PUT,POST,GET,DELETE,OPTIONS&#39; ;    add_header &#39;Access-Control-Allow-Headers&#39; &#39;Content-Type,Content-Length,Authorization,Accept,X-Requested-With&#39; ;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置完成后要重启 nginx ，让改动生效：<code>/usr/local/nginx/sbin/nginx -s reload</code>（路径改为你自己的 nginx 安装路径）。</p></li><li><p>解决跨域后，刷新页面，笔者又看到了新的报错：<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ad522ed38c81473fb2bd12bdb3554c8e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【前端监控系统开发实录】之时序数据库的探索</title>
      <link href="/2022/08/30/qian-duan-jian-kong-xi-tong-kai-fa-shi-lu-zhi-shi-xu-shu-ju-ku-de-tan-suo/"/>
      <url>/2022/08/30/qian-duan-jian-kong-xi-tong-kai-fa-shi-lu-zhi-shi-xu-shu-ju-ku-de-tan-suo/</url>
      
        <content type="html"><![CDATA[<h1 id="window11-安装-influxdb"><a href="#window11-安装-influxdb" class="headerlink" title="window11 安装 influxdb"></a>window11 安装 influxdb</h1><ol><li>通过 <a href="https://docs.influxdata.com/influxdb/v2.3/install/?t=Windows">官网</a> 下载最新版本的 InfluxDB 。</li></ol><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1dd27853ce548ccadf31b99f17a924a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ol start="2"><li>下载压缩包到本地后，解压在 D 盘下：</li></ol><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/51e46bb9315a4d7682cc645fc0763ae0~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>然后<code>win + R</code>输入 cmd 后，在面板上进入 InfluxDB 的安装目录（或者直接在上图蓝色高亮的地方输入 cmd 并回车），启动 influxd.exe ：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/256b0654897f4c4eb137abd03d3c2d0b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ol start="3"><li>influxdb 启动后可以看到上图所示，接着打开浏览器，输入地址：<code>http://localhost:8086</code> 即可打开 influxdb 的配置页面（第一次登录时界面不是这样的，之后登录才是）。<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7a9ac15f112a4be79d3df2fe811a4fb0~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li></ol><h1 id="编写后端服务"><a href="#编写后端服务" class="headerlink" title="编写后端服务"></a>编写后端服务</h1><p>influxdb 安装完成后，我们就可以使用时序数据库开发了。不过在开始编码之前，我们还需要理清其中逻辑及打算使用的技术栈：</p><ul><li>用 nodejs + koa 写服务</li><li>influxdb 存储监控数据，mysql 辅助存储额外的业务数据（如用户登录等）</li><li>用 influxdb 自带的 web 管理界面辅助查表</li><li>查表时使用 influxdb 的语法查询（influxdb 可能不能使用 typeorm）</li></ul><p>理清这些后，我们终于可以开始愉快地开发后端了。</p><h2 id="influxdb-概念类比"><a href="#influxdb-概念类比" class="headerlink" title="influxdb 概念类比"></a>influxdb 概念类比</h2><ul><li><code>Buckets</code>：数据表<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1aaff1e418484592ac7ced696a30de91~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li><li><code>_measurement</code>：表中的行</li><li><code>_field</code>：每一行的键</li><li><code>_value</code>：每一行的值<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2466c10ec9954d4bb08936f6acb56cf1~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li><li><code>_stop</code>：数据查询时间</li><li><code>_time</code>：数据写入时间<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ddc88a0a656142d192f1a1d136545bdf~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li></ul><h2 id="开发相关"><a href="#开发相关" class="headerlink" title="开发相关"></a>开发相关</h2><blockquote><p>我们使用 influxdb 的 flex 语法操作数据表，相关 API 的使用参考官网即可：<a href="https://docs.inflxdata.com/influxdb/v2.1/api-guide/client-libraries/nodejs/">使用 Node.js JavaScript 客户端库</a></p></blockquote><p>需要提醒的是：</p><ol><li>写入数据时，我们会用到<code>new Point()</code>，这其实就是创建表中行数据的意思，然后使用<code>.floatField</code>方法创建键值对。如果需要新建 <strong>整数型</strong> 、<strong>浮点型</strong>、<strong>布尔型</strong> 等数据，可以进入<code>Point</code>对象查看源代码（按住 <strong>ctrl 键</strong> ，鼠标点击即可跳转）：<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/74c7a8e0d5404048b8b4162ebd2932a6~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li><li>查询表数据我们是使用<code>const queryApi = new InfluxDB(&#123;YOUR_URL, YOUR_API_TOKEN&#125;).getQueryApi(YOUR_ORG)</code>的方式实例化一个<code>InfluxDB</code>客户端，然后调用该实例上的方法查表，如<code>queryApi.queryRows(fluxQuery, fluxObserver)</code>。但我们不仅要查表，还要将查找后的结果响应给前端（这里后端用的是 Node.js + Koa ），但问题是怎么响应，一开始我是这样做的：<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const clientDB &#x3D; new InfluxDB(&#123;url: **your_url**, token: **your_token**&#125;);const queryApi &#x3D; clientDB.getQueryApi(**your_org**);const query &#x3D; &#96;from(bucket: &quot;$&#123;**your_bucket**&#125;&quot;) |&gt; range(start: -1h)&#96;;let res: any &#x3D; null;let isSuccess: boolean &#x3D; false;queryApi.queryRows(query, &#123;    next(row: any, tableMeta: &#123; toObject: (arg0: any) &#x3D;&gt; any &#125;) &#123;        const o &#x3D; tableMeta.toObject(row)        res &#x3D; o;        console.log(&#39;1&#39;, isSuccess); &#x2F;&#x2F; false        isSuccess &#x3D; true;        console.log(&#39;2&#39;, isSuccess); &#x2F;&#x2F; true    &#125;,    error() &#123;        isSuccess &#x3D; false;    &#125;,    complete() &#123;&#125;&#125;)console.log(&#39;3&#39;, isSuccess); &#x2F;&#x2F; falseif (isSuccess) &#123;    &#x2F;&#x2F; 这里为了方便，直接这样写了，正常情况是会对响应数据进行封装的。    ctx.body &#x3D; &#123;        code: 200,        msg: &#39;查询成功&#39;,        data: &#123;            status: true,            response: res        &#125;    &#125;; &#125; else &#123;    ctx.body &#x3D; &#123;        code: 0,        msg: &#39;查无此数据&#39;,        data: &#123;            status: false,        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>但发现行不通，不仅<code>isSuccess</code>修改不成功，而且调用顺序不正确：3false-1false–2true，于是我以为是数据异步了，但再次修改后发现调用顺序虽然正确了，但数据依然没响应。在经过无数文章的翻阅后，我终于找到了解决方法，直接上代码：<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const clientDB &#x3D; new InfluxDB(&#123;url: **your_url**, token: **your_token**&#125;);const queryApi &#x3D; clientDB.getQueryApi(**your_org**);const query &#x3D; &#96;from(bucket: &quot;$&#123;**your_bucket**&#125;&quot;) |&gt; range(start: -1h)&#96;;return ctx.body &#x3D; await new Promise((resolve, reject) &#x3D;&gt; &#123;    let res: any &#x3D; null;    let arr: any[] &#x3D; [];    queryApi.queryRows(query, &#123;        next(row: any, tableMeta: &#123; toObject: (arg0: any) &#x3D;&gt; any &#125;) &#123;            const o &#x3D; tableMeta.toObject(row)            arr.push(o);            if (arr.length &gt; 0) &#123;                res &#x3D; &#123;                    code: 200,                    msg: &#39;数据查询成功&#39;,                    data: &#123;                        status: true,                        response: arr                    &#125;                &#125;            &#125;        &#125;,        error() &#123;            res &#x3D; &#123;                code: 500,                msg: &#39;数据查询失败&#39;,                data: &#123;                    status: false,                &#125;            &#125;            reject(res);        &#125;,        complete() &#123;            if (arr.length &#x3D;&#x3D;&#x3D; 0) &#123;                res &#x3D; &#123;                    code: 0,                    msg: &#39;查无此数据&#39;,                    data: &#123;                        status: false,                    &#125;                &#125;            &#125;            resolve(res);        &#125;    &#125;)&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>将<code>queryApi.queryRows</code>使用 promise 包裹起来后，终于有返回结果了。</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5529580736543498e9130b2ee328f03~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> InfluxDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【前端监控系统开发实录】之 SDK 发布至 npm</title>
      <link href="/2022/08/30/qian-duan-jian-kong-xi-tong-kai-fa-shi-lu-zhi-sdk-fa-bu-zhi-npm/"/>
      <url>/2022/08/30/qian-duan-jian-kong-xi-tong-kai-fa-shi-lu-zhi-sdk-fa-bu-zhi-npm/</url>
      
        <content type="html"><![CDATA[<h1 id="配置-npm-包"><a href="#配置-npm-包" class="headerlink" title="配置 npm 包"></a>配置 npm 包</h1><p>将想要发布到 npm 上的项目开发完毕。</p><blockquote><p>默认读者已经经过<code>npm init</code>等一系列操作开发完毕，SDK 的开发过程具体看笔者的其他文章。</p></blockquote><p>这里具体讲解<code>package.json</code>的配置：</p><ul><li><code>name</code>：包名</li><li><code>version</code>：包的版本号，每次发包这个版本号都要改</li><li><code>description</code>：包的描述</li><li><code>main</code>：包默认执行的js文件（包的入口）</li><li><code>author</code>：作者</li><li><code>license</code>：包遵循的开源协议</li><li><code>keywords</code>：关键字，供 npm 上模糊搜索到包</li><li><code>dependencies</code>（生产依赖）：记录在开发和项目上线之后都需要用到的包</li><li><code>devDependencies</code>（开发依赖）：记录只在项目开发阶段会用到的包</li><li><code>scripts</code>：定义一些脚本命令，可以起一个别名，方便运行</li><li><code>repository</code>：关联 github 仓库地址</li><li><code>private</code>：是否私有，一般都是false</li></ul><p><strong>步骤</strong>：</p><ol><li><p><code>keywords</code>的值一个字符串数组，每个字符串必须为 <strong>双引号</strong> 。</p></li><li><p><strong>添加 LICENSE</strong>：这里使用MIT协议类型</p><pre class="line-numbers language-none"><code class="language-none">MIT LicenseCopyright (c) 2022 ursheepPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and&#x2F;or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li><code>Copyright (c) 2022 foursheep</code> 这一行，2022 是年份，自行修改为当前年份；foursheep 是作者姓名，改成你自己的。</li><li><code>package.json</code>里修改<code>license</code>字段值为<code>MIT</code>。</li></ul><ol start="3"><li><strong>配置 npm 上传白名单</strong></li></ol><p>配置 npm 上传的文件白名单，可以指定哪些文件上传哪些不上传，比如我这里不想直接发布 src 里的 index.ts 源码，而是发布<code>dist</code>目录下的<code>monitor.js</code>（index.ts压缩后的文件），按以下配置：</p><ul><li>在<code>package.json</code>里，修改<code>main</code>字段的路径指向<code>dist/monitor.js</code>：</li><li>添加<code>files</code>字段来配置要上传 npm 的文件白名单目录：  <pre class="line-numbers language-none"><code class="language-none">&quot;files&quot;: [  &quot;dist&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>这样<code>dist</code>文件夹会上传 npm ，而 src 文件夹就不会上传。</li></ul><p>想保存 src 源码就上传项目到 git 远程仓库就行，这样 git 仓库保存了完整项目，而 npm 只包含部分项目文件。</p><blockquote><p>注意：在打包前<code>main</code>需指向项目的入口文件（如果指向 dist 会导致打包失败），打包后再修改为<code>dist/</code>。</p></blockquote><p>但有些文件是必定会上传的，无法控制，例如<code>package.json</code>、<code>LICENSE</code>、<code>README.md</code>等等。<br>当然了，也可以配置 npm 上传黑名单，在根目录下添加<code>.npmignore</code>文件，写入黑名单文件即可。</p><ol start="4"><li><strong>关联github地址</strong></li></ol><p>如果想把 npm 包和项目 github 地址关联起来，首先项目需要先上传到 github 上，然后<code>package.json</code>添加<code>repository</code>字段：</p><pre class="line-numbers language-none"><code class="language-none">&quot;repository&quot;: &#123;  &quot;type&quot;: &quot;git&quot;,  &quot;url&quot;: &quot;git@github.com:HCYETY&#x2F;monitor-system.git&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>url 后的地址格式，就是用<code>SSH</code>的方式克隆 github 仓库的那个地址。填写该配置后，在 npm 官网的该 npm 包页面右边会显示可以跳转到 github 的链接。</p><p><strong>总结</strong>：整体配置如下：</p><pre class="line-numbers language-none"><code class="language-none">&#123;  &quot;name&quot;: &quot;monitor-system-sdk&quot;,  &quot;version&quot;: &quot;1.0.0&quot;,  &quot;description&quot;: &quot;前端监控 SDK&quot;,  &quot;author&quot;: &quot;foursheep&quot;,  &quot;main&quot;: &quot;dist&#x2F;monitor.js&quot;,  &quot;scripts&quot;: &#123;    &quot;build&quot;: &quot;webpack&quot;,    &quot;dev&quot;: &quot;webpack-dev-server&quot;,    &quot;test&quot;: &quot;echo &quot;Error: no test specified&quot; &amp;&amp; exit 1&quot;  &#125;,  &quot;keywords&quot;: [&quot;前端监控系统&quot;, &quot;原生 sdk&quot;],  &quot;private&quot;: false,  &quot;license&quot;: &quot;MIT&quot;,  &quot;files&quot;: [    &quot;dist&quot;  ],  &quot;repository&quot;: &#123;    &quot;type&quot;: &quot;git&quot;,    &quot;url&quot;: &quot;git@github.com:HCYETY&#x2F;monitor-system.git&quot;  &#125;,&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="规范的包结构"><a href="#规范的包结构" class="headerlink" title="规范的包结构"></a>规范的包结构</h1><p>一个规范的包结构，需要符合以下 3 点要求：</p><ul><li>包必须以单独的目录而存在；</li><li>包的顶级目录下要必须包含package.json 这个包管理配置文件（npm init -y）；</li><li><code>package.json</code>中必须包含<code> name</code>、<code> version</code>、<code>main</code>这三个属性，分别代表包的名字、版本号、包的入口。</li></ul><p>注意：以上 3 点要求是一个规范的包结构必须遵守的格式，关于更多的约束，可以参考这个网址：<a href="https://yarnpkg.com/zh-Hans/docs/package-json">https://yarnpkg.com/zh-Hans/docs/package-json</a></p><h1 id="发布流程"><a href="#发布流程" class="headerlink" title="发布流程"></a>发布流程</h1><ol><li>发布前打包项目，确保<code>dist</code>是最新的；</li><li>检查<code>package.json</code>各配置项信息；</li><li>终端执行<code>npm login</code>登录 npm 账号（需先在官网上注册）；</li><li>执行<code>npm publish</code>发包；</li><li>如果要更新自己的 npm 包及 README.md ，先后执行<code>npm version patch</code>和<code>npm publish</code>；</li><li>在 <a href="https://www.npmjs.com/">npmjs官网</a> 上搜索发布的包名，看是否发布成功。</li></ol><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><ol><li>在终端登录 npm 账号失败：<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa984011179a439b843cafeb1635a584~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li></ol><p><strong>原因</strong>：设置了国内镜像，需要修改为官网的地址。</p><p><strong>修改方法</strong>：<code>npm config set registry https://registry.npmjs.org</code>（官网地址）</p><p><strong>注意</strong>：修改的地址协议是 <strong>https</strong> ，而不是 <strong>http</strong> 。</p><blockquote><p>等 npm 包发布成功后再更改回来就行：<code>npm config set registry https://registry.npm.taobao.org</code>（国内镜像）</p></blockquote><ol start="2"><li>登录 npm 账号需要获取<code>one-time password</code>：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3fc5a4f9f8424c528d0770d9995189b7~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li></ol><p><strong>原因</strong>：2022 年后 npmjs 平台强制开发者们要开启 2FA 验证。</p><p><strong>解决方法</strong>：</p><ul><li><a href="https://www.cnblogs.com/corleone113/p/12116334.html">https://www.cnblogs.com/corleone113/p/12116334.html</a></li><li><a href="https://docs.npmjs.com/configuring-two-factor-authentication">官方解释</a></li></ul><p><strong>注意</strong>：</p><ul><li><ol><li>解法中提到的“身份验证器”可以直接在手机浏览器上搜索，找到一个灰色的图标下载即可（如下图所示）：<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5a509f16f9df450494ced5d6ad6598c2~tplv-k3u1fbpfcp-watermark.image" alt="dfff1269b3c220d9d6aabe49f676e91.jpg"></li></ol></li><li><ol start="2"><li>在“身份验证器”软件中添加账号成功后，会看到 <strong>6位数</strong> 的验证码，这个验证码就是<code>one-time password</code>，在终端输入后即可登录成功。</li></ol></li></ul><p><strong>效果</strong>：如下图所示就代表登录 npm 成功了<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/72e3e1446a87450b97246c00360ef4d5~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h1 id="更多文章"><a href="#更多文章" class="headerlink" title="更多文章"></a>更多文章</h1><ul><li><a href="https://juejin.cn/post/7052307032971411463">从零开始发布自己的NPM包</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【前端监控系统开发实录】之原生 SDK 开发（三）</title>
      <link href="/2022/08/30/qian-duan-jian-kong-xi-tong-kai-fa-shi-lu-zhi-yuan-sheng-sdk-kai-fa-san/"/>
      <url>/2022/08/30/qian-duan-jian-kong-xi-tong-kai-fa-shi-lu-zhi-yuan-sheng-sdk-kai-fa-san/</url>
      
        <content type="html"><![CDATA[<p>在之前的文章我们已经理清 SDK 的开发流程：</p><ol><li><a href="https://juejin.cn/post/7133968180967374885">明确采集数据</a></li><li><a href="https://juejin.cn/post/7134286771306627108">封装采集方法</a></li><li>$\color{green}{数据上报后端}$</li><li>$\color{green}{接入项目测试}$</li></ol><p>那么本文就来看看怎么处理最后两点。</p><h1 id="数据上报后端"><a href="#数据上报后端" class="headerlink" title="数据上报后端"></a>数据上报后端</h1><h2 id="开放后端接口"><a href="#开放后端接口" class="headerlink" title="开放后端接口"></a>开放后端接口</h2><p>后端的技术栈为 nodejs + koa + influxdb + mysql ，因此在入口文件 <code>app.ts</code> 中开放如下接口（这里以 前端异常 为例）：<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/958eee822b3c4a9883ee88791e885184~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ul><li>上报异常数据的接口为 <code>/report/xxx</code> ，method 为 <code>POST</code> ；</li><li>请求异常数据的接口为 <code>/api/xxx</code> ，method 为 <code>GET</code> 。</li></ul><h2 id="调用接口上报数据"><a href="#调用接口上报数据" class="headerlink" title="调用接口上报数据"></a>调用接口上报数据</h2><p><a href="https://juejin.cn/post/7134286771306627108">上一篇文章</a> 我们已经封装好了捕获异常的方法，但还缺少了数据的上报功能，下面以 js 异常为例展示如何上报数据。</p><p>这是捕获 js 异常的函数：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">window.addEventListener(&#39;error&#39;, (event) &#x3D;&gt; &#123;    handleJs(event);&#125;, true)const handleJs &#x3D; function (event: any): void &#123;    event.preventDefault();    &#x2F;&#x2F; 用户最后一个交互事件    const lastEvent: Event &#x3D; getLastEvent();    let log &#x3D; null;    &#x2F;&#x2F; 判断报错种类    const type &#x3D; getErrorKey(event);    if (type &#x3D;&#x3D;&#x3D; mechanismType.JS) &#123;        log &#x3D; &#123;            message: event.message,            type: event.type,            errorType: &#96;$&#123;mechanismType.JS&#125;: $&#123;(event.error &amp;&amp; event.error.name) || &#39;UnKnowun&#39;&#125;&#96;,            fileName: event.filename,            position: &#96;$&#123;event.lineno&#125;:$&#123;event.colno&#125;&#96;,            &#x2F;&#x2F; stack: getLines(event.error.stack), &#x2F;&#x2F;错误堆栈            selector: lastEvent ? getSelector((lastEvent as any).path) : &#39;&#39;,        &#125;        console.log(&#39;jsError log数据&#39;, log)                &#x2F;&#x2F; 在这里调用上报的函数        lazyReport(&#39;&#x2F;js&#39;, log);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>lazyReport</strong> 方法详解：</p><ul><li>第一个参数：<code>string</code>，表示后端的接口路径。</li><li>第二个参数：<code>object</code>，表示要上传的数据。</li></ul><blockquote><p>Q：不是说 上报异常数据的接口为 <code>/report/xxx</code> 吗，那例子中的 js 异常数据上报接口为什么是 <code>/js</code> ，而不是 <code>/report/js</code> ？</p><p>A：由于在 SDK 中需要调用后端接口的只有异常数据的上报功能，因此这里做了封装，<code>/report</code> 写在了后端地址里，后面会讲到。</p></blockquote><p><strong>lazyReport</strong> 方法封装：</p><p>先全局定义：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F; --------- 服务端地址 ----------------if (reportUrl) &#123;    window[&#39;_monitor_report_url_&#39;] &#x3D; reportUrl;&#125;&#x2F;&#x2F; -------- 合并上报的间隔 ------------if (delay) &#123;    window[&#39;_monitor_delay_&#39;] &#x3D; delay;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 lazyReport 中使用：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">export function lazyReport(interfaceUrl: string, param: object): void &#123;    const delay: number &#x3D; window[&#39;_monitor_delay_&#39;];    let data &#x3D; JSON.stringify(param);    if (delay &#x3D;&#x3D;&#x3D; 0) &#123;        return report(interfaceUrl, data);    &#125;&#125;export function report(interfaceUrl: string, data: object): void &#123;  const url &#x3D; window[&#39;_monitor_report_url_&#39;];  &#x2F;&#x2F; ------- navigator&#x2F;img方式上报，不会有跨域问题 -------  &#x2F;&#x2F; 支持sendBeacon的浏览器  if (navigator.sendBeacon) &#123;     &#x2F;&#x2F; url: &#39;https:&#x2F;&#x2F;localhost:8080&#x2F;report&#39;    &#x2F;&#x2F; interfaceUrl: &#39;&#x2F;js&#39;    navigator.sendBeacon(url + interfaceUrl, JSON.stringify(data));  &#125; else &#123; &#x2F;&#x2F; 不支持sendBeacon的浏览器      let oImage &#x3D; new Image();      oImage.src &#x3D; &#96;$&#123;url&#125;$&#123;interfaceUrl&#125;?logs&#x3D;$&#123;data&#125;&#96;;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用 <code>Navigator.sendBeacon()</code> 发送请求，原因如下：</p><ul><li>当浏览器中发生终止页面的情况时，并不能保证进程内的HTTP请求会成功，也就是说如果我们关闭页面后还有异常数据没来得及上报，那么它将不能成功上报。</li><li>SDK 中不需要复杂的服务请求，只要确保监控到的异常数据能成功上报即可，不需要进行太多定制。</li></ul><blockquote><p>需要注意的是，使用 <code>Navigator.sendBeacon()</code> 的话，我们需要在后端进行适当的处理，才能获取到传过去数据，这在下面会讲到。</p></blockquote><h2 id="后端中间件逻辑"><a href="#后端中间件逻辑" class="headerlink" title="后端中间件逻辑"></a>后端中间件逻辑</h2><p>为了提高表数据的查询性能，后端使用了时序数据库 <code>influxdb</code> 来达到效果：<br><a href="https://juejin.cn/post/7132867601574658062">【前端监控系统开发实录】之时序数据库的探索 | 青训营笔记</a></p><p>需要注意的是：</p><ol><li>注册中间件(一般在 app.js 里面)的时候在 <code>koa-bodyparser</code> 前加上一个中间件，让 <code>bodyparser</code> 不要处理这个路由请求，自己来处理这条特别的请求：<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">app.use(async function(ctx,next) &#123;    &#x2F;&#x2F;判断请求的路由路径    if (&#x2F;^.*&#x2F;beacon&#x2F;.+$&#x2F;.test(ctx.path)) &#123;        ctx.disableBodyParser &#x3D; true;    &#125;    await next();&#125;)&#x2F;&#x2F; 处理 post 请求的参数app.use(bodyParser());&#x2F;&#x2F; js 相关router.post(&#39;&#x2F;report&#x2F;js&#39;, addJs);......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>调用 <code>/report/js</code> 接口后会进入 <code>addJs</code> 处理层，在里面引入 <code>co-body</code> 插件：<code>npm install co-body --save</code><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const coBody &#x3D; require(&#39;co-body&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>用 json 的方式格式化这个请求数据<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const params &#x3D; await coBody.json(ctx.req);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h1 id="接入项目测试"><a href="#接入项目测试" class="headerlink" title="接入项目测试"></a>接入项目测试</h1><p>我们的项目结构是这样子的：<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b3aa25ade6824510ace466a38d74d75e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>可以知道，在 SDK 的 example 目录下是我们自己搭建的 vue 项目，用于测试异常是否能正确捕获，以及是否接入成功。</p><p>那么测试项目是怎么接入 SDK 的呢？请看：</p><blockquote><p>根据实际开发步骤，这时候其实还没发布 npm 包，因此先采用本地引入 SDK 的方式测试是否能成功接入。</p></blockquote><ol><li><p>SDK 的入口文件暴露如下配置：</p><pre class="line-numbers language-none"><code class="language-none">import &#123; loadConfig &#125; from &#39;.&#x2F;common&#x2F;loadConfig&#39;;import &#123; errorCatch &#125; from &#39;.&#x2F;common&#x2F;errorTrack&#39;;import &#123; initOptions &#125; from &quot;.&#x2F;type&quot;;function init(options: initOptions) &#123;    &#x2F;&#x2F; ------- 加载配置 ----------    &#x2F;&#x2F; 1.拿到配置信息    &#x2F;&#x2F; 2.注入监控代码    loadConfig(options);&#125;export &#123; init, errorCatch, &#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>loadConfig</code> 函数的具体内容可以在 <a href="https://github.com/HCYETY/monitor-system/blob/master/monitor-sdk/src/common/loadConfig.ts">GitHub</a> 上阅读，这里就不展示了。</p></li><li><p>vue 项目的 <code>package.json</code> 写入配置，然后安装依赖（建议删除 node_modules 后再安装）：</p><pre class="line-numbers language-none"><code class="language-none">&quot;dependencies&quot;: &#123;    &quot;monitor-sdk&quot;: &quot;file:..&#x2F;..&quot;,&#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里的路径跟项目的文件结构有关，可以查看上文的结构图。</p></li><li><p>vue 项目的入口文件除了容器的挂载等，还要加入如下配置：</p><pre class="line-numbers language-none"><code class="language-none">import &#123; init, errorCatch, &#125; from &quot;monitor-sdk&quot;;init(&#123;    &#x2F;&#x2F; appId,  &#x2F;&#x2F; 系统id    cookie: &#39;foursheep&#39;, &#x2F;&#x2F; 用户id    &#x2F;&#x2F; userId: window.localStorage.getItem(&#39;session_id&#39;) || &#39;foursheep&#39;, &#x2F;&#x2F; 用户id    reportUrl: &#39;http:&#x2F;&#x2F;localhost:8080&#x2F;report&#39;, &#x2F;&#x2F; 后端 url    &#x2F;&#x2F; autoTracker, &#x2F;&#x2F; 自动埋点    delay: 0, &#x2F;&#x2F; 延迟和合并上报的功能    hashPage: true, &#x2F;&#x2F; 是否是 hash 路由    errorReport: true, &#x2F;&#x2F; 是否开启错误监控    performanceReport: true &#x2F;&#x2F; 是否开启性能监控&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从 monitor-sdk 中能导入的 API 就是第一步在 SDK 的入口文件中暴露出来的函数。</p></li></ol><p>当使用暴露出的这些函数后，就会执行 vue 项目的 node_modules 下的 monitor-sdk ，也就是我们封装的监控函数。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【前端监控系统开发实录】之原生 SDK 开发（二）</title>
      <link href="/2022/08/30/qian-duan-jian-kong-xi-tong-kai-fa-shi-lu-zhi-yuan-sheng-sdk-kai-fa-er/"/>
      <url>/2022/08/30/qian-duan-jian-kong-xi-tong-kai-fa-shi-lu-zhi-yuan-sheng-sdk-kai-fa-er/</url>
      
        <content type="html"><![CDATA[<p>在之前的文章我们已经理清 SDK 的开发流程：</p><ol><li><a href="https://juejin.cn/post/7133968180967374885">明确采集数据</a></li><li>$\color{green}{封装采集方法}$</li><li><a href="https://juejin.cn/post/7134672002052259877">数据上报后端</a></li><li><a href="https://juejin.cn/post/7134672002052259877">接入项目测试</a></li></ol><p>那么本文就来看看怎么封装采集方法。</p><h1 id="异常监控"><a href="#异常监控" class="headerlink" title="异常监控"></a>异常监控</h1><p>要想监控异常，首先我们要有异常可以监控，因此这里搭建了一个 vue 项目，在页面中做了一些按钮，每个按钮代表一种异常，我们要达到的效果：<strong>每点击一个按钮，SDK 要捕获到对应的错误，在控制台打印出捕获到的信息</strong>。</p><p>sdk 中 example 文件夹下 vue 项目的一个页面：</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div class&#x3D;&quot;left&quot;&gt;    &lt;h1&gt;异常数据&lt;&#x2F;h1&gt;    &lt;h2&gt;前端异常&lt;&#x2F;h2&gt;    &lt;button class&#x3D;&quot;hello&quot; @click&#x3D;&quot;bugJs&quot;&gt;JS 代码执行异常&lt;&#x2F;button&gt;    &lt;button class&#x3D;&quot;world&quot; @click&#x3D;&quot;bugPromise&quot;&gt;Promise 异常&lt;&#x2F;button&gt;    &lt;button class&#x3D;&quot;hi&quot; @click&#x3D;&quot;bugAsset&quot;&gt;静态资源加载异常&lt;&#x2F;button&gt;    &lt;button class&#x3D;&quot;foursheep&quot; @click&#x3D;&quot;bugConsole&quot;&gt;console.error 异常&lt;&#x2F;button&gt;    &lt;button class&#x3D;&quot;good&quot; @click&#x3D;&quot;bugCors&quot;&gt;跨域异常&lt;&#x2F;button&gt;    &lt;img src&#x3D;&quot;http:&#x2F;&#x2F;localhost:8888&#x2F;nottrue.jpg&quot; &#x2F;&gt;    &lt;br &#x2F;&gt;    &lt;h2&gt;接口异常&lt;&#x2F;h2&gt;    &lt;button @click&#x3D;&quot;bugNoRespond&quot;&gt;未响应&#x2F;超时响应异常&lt;&#x2F;button&gt;    &lt;button @click&#x3D;&quot;bugInterface4&quot;&gt;4xx 请求异常&lt;&#x2F;button&gt;    &lt;button @click&#x3D;&quot;bugInterface5&quot;&gt;5xx 服务器异常&lt;&#x2F;button&gt;    &lt;button @click&#x3D;&quot;bugPowerless&quot;&gt;权限不足&lt;&#x2F;button&gt;    &lt;h1&gt;白屏异常&lt;&#x2F;h1&gt;    &lt;button @click&#x3D;&quot;bugWhiteScreen&quot;&gt;白屏异常&lt;&#x2F;button&gt;  &lt;&#x2F;div&gt;  &lt;div class&#x3D;&quot;right&quot;&gt;    &lt;h1&gt;行为数据&lt;&#x2F;h1&gt;    &lt;button&gt;用户设备类型，浏览器版本，webview引擎类型&lt;&#x2F;button&gt;    &lt;button&gt;获取页面性能指标&lt;&#x2F;button&gt;    &lt;button&gt;点击事件&lt;&#x2F;button&gt;    &lt;button&gt;      &lt;RouterLink to&#x3D;&quot;&#x2F;&quot;&gt;路由跳转&lt;&#x2F;RouterLink&gt;    &lt;&#x2F;button&gt;    &lt;button @click&#x3D;&quot;getPv&quot;&gt;PV、UV&lt;&#x2F;button&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;    import &#123; axiosIntance &#125; from &quot;@&#x2F;utils&#x2F;axios&quot;;    import axios from &quot;axios&quot;;    import &#123; login &#125; from &quot;@&#x2F;api&#x2F;modules&#x2F;user&quot;;    const bugJs &#x3D; () &#x3D;&gt; &#123;      window.someVar.error &#x3D; &quot;error&quot;;    &#125;;    const bugPromise &#x3D; () &#x3D;&gt; &#123;      new Promise(function (_, reject) &#123;        window.someVar.error &#x3D; &quot;error&quot;;      &#125;);    &#125;;    const bugAsset &#x3D; function () &#123;      console.log(&quot;bugAsset&quot;);    &#125;;    const bugConsole &#x3D; function () &#123;      console.error(new Error(&quot;错误捕获555&quot;));    &#125;;    const bugCors &#x3D; function () &#123;      login(&#123;        url: &quot;&#x2F;test&quot;,        method: &quot;post&quot;,        data: &#39;你好foursheep&#39;,      &#125;)    &#125;;    const bugNoRespond &#x3D; function () &#123;      &#x2F;&#x2F; timeout      axiosIntance          .get(&quot;&#x2F;api&quot;, &#123;            timeout: 10,          &#125;)          .then((res) &#x3D;&gt; &#123;            console.log(&quot;请求成功&quot;, res);          &#125;)          .catch((e) &#x3D;&gt; &#123;            console.log(&quot;请求失败&quot;, e);          &#125;);    &#125;;    const bugInterface4 &#x3D; function () &#123;      &#x2F;&#x2F; 404      axios          .get(&quot;&#x2F;api&quot;)          .then((res) &#x3D;&gt; &#123;            console.log(&quot;请求成功&quot;, res);          &#125;)          .catch((e) &#x3D;&gt; &#123;            console.log(&quot;请求失败&quot;, e);          &#125;);    &#125;;    const getPv &#x3D; () &#x3D;&gt; &#123;      console.log(&quot;getPv&quot;);    &#125;;    const bugInterface5 &#x3D; function () &#123;      fetch(&quot;&#x2F;asdasdasdasd&quot;, &#123;        method: &quot;post&quot;,        body: &quot;kongming&quot;,      &#125;);    &#125;;    const bugPowerless &#x3D; function () &#123;      console.log(&quot;powerless&quot;);    &#125;;    const bugWhiteScreen &#x3D; function () &#123;      console.log(&quot;页面 load 时已监控&quot;);    &#125;;&lt;&#x2F;script&gt;&lt;style&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>页面呈现效果是这样的：<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fbc08afdbb1c45519ea21d06851450ea~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>到这里，我们已经简单制造好了各种异常，下面看看怎么捕获。</p><p><strong>封装的 ts 类型</strong>：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F; 错误类型export enum mechanismType &#123;    JS &#x3D; &#39;jsError&#39;,    RS &#x3D; &#39;resourceError&#39;,    UJ &#x3D; &#39;unhandledrejectionError&#39;,    HP &#x3D; &#39;httpError&#39;,    CS &#x3D; &#39;corsError&#39;,    VUE &#x3D; &#39;vueError&#39;,&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>封装的公共函数</strong>：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">import &#123; mechanismType &#125; from &quot;..&#x2F;type&quot;;import &#123; AxiosError &#125; from &quot;axios&quot;;&#x2F;&#x2F; 判断是 JS异常、静态资源异常、还是跨域异常export function getErrorKey (event: ErrorEvent | Event) &#123;    const target &#x3D; event.target;    const isElementTarget: boolean &#x3D; target instanceof HTMLScriptElement || target instanceof HTMLLinkElement || target instanceof HTMLImageElement;    if (isElementTarget) &#123;        return mechanismType.RS;    &#125;    if (event instanceof AxiosError) &#123;        return mechanismType.CS;    &#125;    return mechanismType.JS;&#125;;&#x2F;&#x2F; 获取用户最后一个交互事件export function getLastEvent() &#123;    let lastEvent: Event;    [        &#39;click&#39;,        &#39;mousedown&#39;,        &#39;mouseover&#39;,        &#39;keydown&#39;,        &#39;touchstart&#39;,    ].forEach(eventType &#x3D;&gt; &#123;        window.addEventListener(eventType, (event) &#x3D;&gt; &#123;            lastEvent &#x3D; event;        &#125;, &#123;            capture: true,            passive: true &#x2F;&#x2F; 默认不阻止默认事件        &#125;);    &#125;)    return lastEvent;&#125;&#x2F;&#x2F; 获取选择器export function getSelector(pathsOrTarget: any) &#123;    const handleSelector &#x3D; function (pathArr: any) &#123;        return pathArr.reverse().filter((element: any) &#x3D;&gt; &#123;            &#x2F;&#x2F; 去除 document 和 window            return element !&#x3D;&#x3D; document &amp;&amp; element !&#x3D;&#x3D; window;        &#125;).map((element: any) &#x3D;&gt; &#123;            const &#123;id, className, tagName&#125; &#x3D; element;            if (id) &#123;                return &#96;$&#123;tagName.toLowerCase()&#125;#$&#123;id&#125;&#96;;            &#125; else if (className &amp;&amp; typeof className &#x3D;&#x3D;&#x3D; &#39;string&#39;) &#123;                return &#96;$&#123;tagName.toLowerCase()&#125;.$&#123;className&#125;&#96;;            &#125; else &#123;                return tagName.toLowerCase();            &#125;        &#125;).join(&#39; &#39;);    &#125;    if (Array.isArray(pathsOrTarget)) &#123;        return handleSelector(pathsOrTarget);    &#125; else &#123;        let pathArr &#x3D; [];        while (pathsOrTarget) &#123;            pathArr.push(pathsOrTarget);            pathsOrTarget &#x3D; pathsOrTarget.parentNode;        &#125;        return handleSelector(pathArr);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JS-代码执行异常"><a href="#JS-代码执行异常" class="headerlink" title="JS 代码执行异常"></a>JS 代码执行异常</h2><p>捕获 JS 运行异常有两种方法：</p><ol><li><p><code>window.onerror</code>。这是一个全局变量，默认值为 <code>null</code> 。<strong>当有 js 运行触发错误时，window 会触发 error 事件</strong>，并执行 <code>window.onerror()</code> ，借助这个特性，我们可以捕获全局的 <code>JS运行异常</code>，并且通过对 <code>window.onerror</code> 进行重写以获取异常信息；</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">window.onerror &#x3D; (msg, url, row, col, error) &#x3D;&gt; &#123;    &#x2F;&#x2F; 1. 获取报错信息    &#x2F;&#x2F; 2. 上报报错信息    return true; &#x2F;&#x2F; 返回 true，阻止了默认事件执行，也就是原本将要在控制台打印的错误信息&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>window.addEventListener(&#39;error&#39;)</code>。这个方法也可以捕获到 <code>JS运行异常</code>，但它与<code>window.onerror</code> 的区别在于：</p></li></ol><ul><li>它除了可以监听 <code>JS运行异常</code> 之外，还可以同时捕获到 <code>静态资源加载异常</code>；</li><li>它会比 <code>window.onerror</code> <strong>先触发</strong>；</li><li><code>onerror</code> 可以接受多个参数。而 <code>addEventListener(&#39;error&#39;)</code> 只有一个保存所有错误信息的参数。</li></ul><p>综上所述，笔者决定采用 <code>window.addEventListener(&#39;error&#39;)</code> 捕获 js 异常：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">window.addEventListener(&#39;error&#39;, (event) &#x3D;&gt; &#123;    handleJs(event);&#125;, true)const handleJs &#x3D; function (event: any): void &#123;    event.preventDefault();    &#x2F;&#x2F; 用户最后一个交互事件    const lastEvent: Event &#x3D; getLastEvent();    let log &#x3D; null;    &#x2F;&#x2F; 判断报错种类    const type &#x3D; getErrorKey(event);    if (type &#x3D;&#x3D;&#x3D; mechanismType.JS) &#123;        log &#x3D; &#123;            message: event.message,            type: event.type,            errorType: &#96;$&#123;mechanismType.JS&#125;: $&#123;(event.error &amp;&amp; event.error.name) || &#39;UnKnowun&#39;&#125;&#96;,            fileName: event.filename,            position: &#96;$&#123;event.lineno&#125;:$&#123;event.colno&#125;&#96;,            &#x2F;&#x2F; stack: getLines(event.error.stack), &#x2F;&#x2F;错误堆栈            selector: lastEvent ? getSelector((lastEvent as any).path) : &#39;&#39;,        &#125;        console.log(&#39;jsError log数据&#39;, log)    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Promise-异常"><a href="#Promise-异常" class="headerlink" title="Promise 异常"></a>Promise 异常</h2><p>当抛出 <code>Promise异常</code> 时，会触发 <code>unhandledrejection</code> 事件，所以我们只需要去监听它就可以进行 <code>Promise 异常</code> 的捕获了：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">window.addEventListener(&#39;unhandledrejection&#39;, (event) &#x3D;&gt; &#123;    handlePromise(event);&#125;, true)const handlePromise &#x3D; function (event: any): void &#123;    &#x2F;&#x2F; 用户最后一个交互事件    const lastEvent: Event &#x3D; getLastEvent();    let message: string &#x3D; &#39;&#39;;    let filename: string &#x3D; &#39;&#39;;    let line: number &#x3D; 0;    let column: number &#x3D; 0;    let stack: string &#x3D; &#39;&#39;;    let reason &#x3D; event.reason;    if (typeof reason &#x3D;&#x3D;&#x3D; &#39;string&#39;) &#123;        message &#x3D; reason;    &#125; else if (typeof reason &#x3D;&#x3D;&#x3D; &#39;object&#39;) &#123;        if (reason.stack) &#123;            let matchResult &#x3D; reason.stack.match(&#x2F;at\s+(.+):(\d+):(\d+)&#x2F;);            filename &#x3D; matchResult[1];            line &#x3D; matchResult[2];            column &#x3D; matchResult[3];        &#125;        message &#x3D; reason.message;    &#125;    const log &#x3D; &#123;        message, &#x2F;&#x2F; 报错信息        type: event.type,        errorType: mechanismType.UJ,        fileName: filename,        position: &#96;$&#123;line&#125;:$&#123;column&#125;&#96;,        selector: lastEvent ? getSelector((lastEvent as any).path) : &#39;&#39;,    &#125;    console.log(&#39;promise log数据&#39;, log)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过值得注意的一点是：<strong>相比与上面所述的直接获取报错的行号、列号等信息</strong>，<code>Promise异常</code> 我们只能捕获到一个 <code>报错原因</code> 而已，代码的具体位置我们需要通过 sourceMap 映射源码中的位置才能获得，这里暂未处理。</p><h2 id="静态资源加载异常"><a href="#静态资源加载异常" class="headerlink" title="静态资源加载异常"></a>静态资源加载异常</h2><p>静态资源加载异常也可以通过 <code>window.addEventListener(&#39;error&#39;)</code> 捕获，我们只需要在捕获 js 异常的 <code>handleJs</code> 函数体里加上：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">if (type &#x3D;&#x3D;&#x3D; mechanismType.RS) &#123;    const target &#x3D; event.target;    log &#x3D; &#123;        type: event.type,        url: target.src,        message: &#96;GET $&#123;target.src&#125; net::ERR_CONNECTION_REFUSED&#96;, &#x2F;&#x2F; TODO        html: target.outerHTML,        errorType: mechanismType.RS,        tagName: target.tagName,        selector: getSelector(event.path),    &#125;    console.log(&#39;resourceError log数据&#39;, log)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="console-error-异常"><a href="#console-error-异常" class="headerlink" title="console.error 异常"></a>console.error 异常</h2><p>这部分报错我们也是需要捕获的，但却不能向上文那样使用 <code>window.onerror</code> 或 <code>window.addEventListener(&#39;error&#39;)</code> 直接捕获得到。我们需要重新封装 <code>window.console.error</code> 以捕获异常信息：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let consoleError &#x3D; window.console.error;window.console.error &#x3D; function (error) &#123;    if (error !&#x3D; &#39;参数有缺失&#39;) &#123;        const message: string &#x3D; error.message;        const stack &#x3D; error.stack;        const url: string &#x3D; window.location.href;        let row: number &#x3D; 0, column: number &#x3D; 0;        if (stack) &#123;            let mres &#x3D; stack.match(&#x2F;(.*?)&#x2F;g) || [];            let firstLine &#x3D; (mres[0] || &quot;&quot;).replace(&quot;(&quot;, &quot;&quot;).replace(&quot;)&quot;, &quot;&quot;); &#x2F;&#x2F; 获取到堆栈信息的第一条            &#x2F;&#x2F; 根据:分隔获取行列            let info &#x3D; firstLine.split(&#39;:&#39;)            row &#x3D; info[info.length - 2] &#x2F;&#x2F; 行            column &#x3D; info[info.length - 1] &#x2F;&#x2F; 列        &#125;        setTimeout(function () &#123;            &#x2F;&#x2F; 上报的错误内容            let opt &#x3D; &#123;                url,                row,                column,                message,                stack            &#125;            console.log(&#39;error捕获&#39;, opt);        &#125;, 0);    &#125;    return consoleError.apply(console, arguments as any);&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="跨域异常"><a href="#跨域异常" class="headerlink" title="跨域异常"></a>跨域异常</h2><p><code>window.addEventListener(&#39;error&#39;)</code>捕获不到跨域错误，反而是被<code>window.addEventListener(&#39;unhandledrejection&#39;)</code>捕获，这个坑现在暂未解决，后续处理：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ded00868612c41be83be5021be382494~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>暂时使用<code>window.addEventListener(&#39;unhandledrejection&#39;)</code>捕获跨域错误：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">window.addEventListener(&#39;unhandledrejection&#39;, (event) &#x3D;&gt; &#123;    handlePromise(event);&#125;, true)const handlePromise &#x3D; function (event: any): void &#123;    &#x2F;&#x2F; 使用 isCors 判断捕获到的是跨域错误还是 promise 错误    const isCors &#x3D; event.reason instanceof AxiosError;    if (!isCors) &#123;        &#x2F;&#x2F; promise 异常信息，上文已贴    &#125; else &#123;        const error &#x3D; event.reason;        let &#123; url, method, params, data &#125; &#x3D; error.config;        let corsErrorData &#x3D; &#123;            errorType: mechanismType.CS,            type: error.name,            message: error.message,            url,            method,            status: error.response.status,            response: error.response || &quot;&quot;,            request: error.request || &quot;&quot;,            params: &#123; query: params, body: data &#125;,        &#125;        console.log(&#39;CORSError log数据&#39;, corsErrorData)    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="异常捕获总结"><a href="#异常捕获总结" class="headerlink" title="异常捕获总结"></a>异常捕获总结</h2><ol><li>使用<code>window.addEventListener(&#39;error&#39;)</code>捕获 JS 运行时错误和资源加载错误，但要区分两者以进行不同操作；<blockquote><p>区分 JS 运行错误或资源加载错误：</p><ol><li><code>event.target &amp;&amp; (event.target.src || event.target.href)</code> 为 <strong>true</strong>；</li><li><code>event.target instanceof HTMLScriptElement || event.target instanceof HTMLLinkElement || event.target instanceof HTMLImageElement</code> 为 <strong>true</strong></li></ol><p>满足以上两者之一代表 <strong>资源加载错误</strong> ，否则为 <strong>JS 运行错误</strong>。</p></blockquote></li><li>使用<code>window.addEventListener(&#39;unhandledrejection&#39;)</code>捕获未处理的 promise reject 错误</li><li>重写<code>console.error</code>捕获 console.error 错误</li></ol><h1 id="行为监控"><a href="#行为监控" class="headerlink" title="行为监控"></a>行为监控</h1><h2 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h2><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>触发一次<code>history.pushState</code>页面就会跳转两次：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d175e4b759bd45229c1b567a4e8a7c03~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h1 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h1><p>更新中…</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【前端监控系统开发实录】之原生 SDK 开发（一）</title>
      <link href="/2022/08/30/qian-duan-jian-kong-xi-tong-kai-fa-shi-lu-zhi-yuan-sheng-sdk-kai-fa-yi/"/>
      <url>/2022/08/30/qian-duan-jian-kong-xi-tong-kai-fa-shi-lu-zhi-yuan-sheng-sdk-kai-fa-yi/</url>
      
        <content type="html"><![CDATA[<p>在之前的文章我们已经理清 SDK 的开发流程：</p><ol><li>$\color{green}{明确采集数据}$</li><li><a href="https://juejin.cn/post/7134286771306627108/">封装采集方法</a></li><li><a href="https://juejin.cn/post/7134672002052259877">数据上报后端</a></li><li><a href="https://juejin.cn/post/7134672002052259877">接入项目测试</a></li></ol><p>那么本文就来看看有哪些数据需要采集。</p><h1 id="明确采集数据"><a href="#明确采集数据" class="headerlink" title="明确采集数据"></a>明确采集数据</h1><p>产品使用过程中产生的数据可以分为三大类：<strong>异常数据</strong> 、 <strong>行为数据</strong> 和 <strong>性能数据</strong> 。</p><h2 id="异常数据"><a href="#异常数据" class="headerlink" title="异常数据"></a>异常数据</h2><p>顾名思义，<strong>异常数据</strong> 是指各种报错，也可以分为两大类：<strong>前端异常</strong> 和 <strong>接口异常</strong> 。</p><h3 id="前端异常"><a href="#前端异常" class="headerlink" title="前端异常"></a>前端异常</h3><ul><li>JS 代码执行异常<ul><li>类型错误</li><li>引用错误</li></ul></li><li>Promise 异常<ul><li><code>Promise</code> 被 <code>reject</code> 且没有被 <code>catch</code> 处理</li></ul></li><li>静态资源加载异常<ul><li><code>img</code> 图片失效</li><li><code>CDN</code> 资源失效</li><li>第三方 js 地址有误</li></ul></li><li>console.error 异常</li><li>跨域异常</li></ul><p>前端的异常采集大概就这 5 种吧，基本囊括了前端 90% 以上的异常情况。</p><h3 id="接口异常"><a href="#接口异常" class="headerlink" title="接口异常"></a>接口异常</h3><p>接口异常属于后端的异常，但是接口异常会直接导致前端页面错误，因此这类异常我们也需要监控到位。</p><p>接口异常可以根据响应结果分类：</p><ul><li>未响应/超时响应异常</li><li>4xx 请求异常</li><li>5xx 服务器异常</li><li>权限不足</li></ul><p><strong>4xx</strong>：请求异常，一般是前端传递的参数问题，或者接口验证参数的问题。<br><strong>5xx</strong>：服务器内部处理的异常。<br><strong>权限不足</strong>：现在某些管理系统的权限设计比较复杂，有时候突然莫名其妙的接口调不通，影响用户的下一步操作，这也需要记录和追踪。</p><h2 id="行为数据"><a href="#行为数据" class="headerlink" title="行为数据"></a>行为数据</h2><p>而 <strong>行为数据</strong> 就比较广泛了，用户任何有意义的操作我们都可以定义为 行为数据 。比如点击某个按钮，停留了多久，新功能的点击率，什么时候使用等等。</p><p>通过监控行为数据，我们可以做：</p><ul><li>PV、UV量，日同比、周同比等，能清晰的明白流量变化；</li><li>用户热点页面、高访问量TOP10；</li><li>设备、浏览器语言、浏览器、活跃时间段等的用户特征；</li><li>用户的行为追踪：某个用户，进入了网站后的一系列操作或者跳转行为；</li><li>用户自定义埋点上报用户行为：想做一些自定义事件的监听，比如播放某个视频的行为动作；</li><li>多语种站点，每个语种的用户量；</li><li>……</li></ul><h2 id="性能数据"><a href="#性能数据" class="headerlink" title="性能数据"></a>性能数据</h2><p>指一个页面从加载到渲染的各个指标，比如白屏时间、首屏渲染时间等数据，通过监控这些关键性的用户体验指标，我们可以知道页面的性能，从而辅助开发者有针对性地进行优化。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字节青训营项目：前端监控系统</title>
      <link href="/2022/08/30/zi-jie-qing-xun-ying-xiang-mu-qian-duan-jian-kong-xi-tong/"/>
      <url>/2022/08/30/zi-jie-qing-xun-ying-xiang-mu-qian-duan-jian-kong-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="选择项目"><a href="#选择项目" class="headerlink" title="选择项目"></a>选择项目</h1><p>在青训营会议中，字节大佬范文杰给我们提供了三个项目：前端监控系统、Low-code 平台、仿掘金官网，自己选择一个项目进行开发，当然也可以自定义项目。对于没有很好的 idea 的我来说，第一个项目———前端监控系统 是最好的选择。</p><p><strong>为什么选择这个项目？</strong></p><ul><li><strong>成长更大</strong>。前端监控系统是三个项目中我唯二没有接触过的，低代码平台我虽然也没接触过，但“没吃过猪肉，也见过猪跑”，以往看文章时我多多少少有见过一些低代码的文章，大致能了解到这是一个什么样的项目。但前端监控系统对我来说，是一个充满未知的项目，如果能攻克这个项目，就能极大地<strong>满足我的求知欲</strong>，我可以从中学到更多的知识。</li><li><strong>难度更大</strong>。显而易见的，前端监控系统相比较 Low-code 平台而言，难度更大，恰恰我是一个喜欢有挑战的人，战胜有难度的 thing ，让我收获的成就感，是令我十分着迷的。</li><li><strong>听起来更厉害</strong>。外貌协会的我对于第一印象比较看重，所以颜值要 up （doge）。</li></ul><h1 id="了解项目"><a href="#了解项目" class="headerlink" title="了解项目"></a>了解项目</h1><p>对于这个神秘感十足的项目，我的首要任务就是尽可能了解这个项目的全貌，以便我有目的性地进行开发。</p><h2 id="什么是前端监控系统"><a href="#什么是前端监控系统" class="headerlink" title="什么是前端监控系统"></a>什么是前端监控系统</h2><p>提到监控系统，可能大家首先想到的是后端监控，比如检测服务器性能、数据库性能、API 的访问流量、以及各种服务的运行情况等等，都与后端息息相关。</p><p>然而前端也有需要监控的地方，假如有这样一个场景：用户反馈某页面某按钮点了没有反应。那负责这块代码的前端程序员就会去检查里面的业务逻辑，一行一行代码 debug ，最后解决了用户的反馈。但如果之后有另一个用户反馈这个按钮又出问题了，那么不就又得去 debug 了吗。毫无疑问，这样的做法是低效率的，不同的用户在特定的场景下可能会触发不同的 bug ，我们无法判断，更捕捉不到报错信息。<br>那么如果在用户触发异常的那一刻，系统能自动获取到异常的数据并保存起来，然后在后台的某个地方能看到这些数据，我们就可以立刻找到错误原因，更加有针对性地处理 bug ，于是渐渐有了今天的前端监控。</p><p>当然了，今天的前端监控并不仅仅是监控异常数据，任何有利于产品分析的数据都可以加入监控。所以我认为前端监控，就是指<strong>采集用户使用系统过程中产生的关键数据，存储到数据库，后续可以查找和分析</strong>，这样的整套实现就被称为前端监控系统。</p><h2 id="怎么做前端监控系统"><a href="#怎么做前端监控系统" class="headerlink" title="怎么做前端监控系统"></a>怎么做前端监控系统</h2><blockquote><p>事先说明：这不是一个企业级项目，在有限的时间内，以我们团队有限的知识储备，无法将这个项目做到像著名的监控项目那么完善，因此我们的定位是在达到青训营要求的前提下，尽可能完善及扩展更多功能。</p></blockquote><p>开发流程：</p><ol><li>明确要采集的数据</li><li>封装采集方法</li><li>发布 npm 包</li><li>接入测试项目</li><li>视图展示</li></ol><p>但笔者在实践过程中发现，其实并不一定要完全遵守这个流程，比如在封装采集方法时，可以暂时跳过 npm 包的发布，先接入测试项目，以便判断封装的采集方法是否正确，代码是否健壮等，等所有采集方法确定正确后，再发布 npm 包，这时可以保证项目能够准确运行。</p><p>同时，在开发前还有一件基础工作需要确定，那就是业务逻辑，只有明确了业务逻辑，才能开始搭项目、编码。但其实上面这个开发流程是不准确的，也就是说笔者的开发思路有误，下面我会更正这个项目的开发流程，具体业务逻辑会在下文讲解。</p><h1 id="更正开发流程"><a href="#更正开发流程" class="headerlink" title="更正开发流程"></a>更正开发流程</h1><ol><li>搭建项目框架</li><li>前端监控原生 SDK 开发</li></ol><ul><li>明确要采集的数据</li><li>封装采集方法</li><li>数据上报后端</li><li>接入项目测试</li></ul><ol start="3"><li>将 SDK 发布到 npm</li></ol><ul><li>测试项目通过 npm 接入 SDK</li></ul><ol start="4"><li>后端开发</li><li>web 视图展示</li></ol><p>接下来笔者会把篇幅留给具体的开发流程。</p><h2 id="搭建项目框架"><a href="#搭建项目框架" class="headerlink" title="搭建项目框架"></a>搭建项目框架</h2><p>在这里我们首先需要捋清这个项目的业务逻辑，我们要明白这个项目<strong>要做什么事</strong>，<strong>要达到什么目的</strong>：我们要<strong>监控项目</strong>，<strong>采集数据</strong>，<strong>将数据上报给服务器</strong>，<strong>将数据展示在网页上</strong>。</p><p>笔者想到这里，自以为懂了，可以开始 coding 了，却没有深入思考：<strong>监控项目是指在 React 或 Vue 等框架上封装监控函数吗？</strong> 答案是否定的，框架那么多，怎么可能在一个框架上写监控呢，自然是自己用 js/ts 写原生 SDK 实现监控了。想到这里，我茅塞顿开：既然如此，视图展示和原生 SDK 应该是同级目录，另外加上后端服务，也就是说我要在一个文件夹下管理 3 个项目：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a7f8ecbf3ff482bb12b1b7b0839b471~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ul><li>monitor-sdk：使用 webpack + ts 开发</li><li>monitor-web：团队使用 vue3 + vite + ts 开发，后续我个人可能会用 react + webpack + ts 重写</li><li>monitor-node：使用 nodejs + koa + influxdb + mysql 开发</li></ul><p>有了思路，其他就好办了，项目的初始化文章网上有的是，根据自己需求搭建就行了，如果需要的话后面会出详细搭建教程。</p><h2 id="前端监控原生-SDK-开发"><a href="#前端监控原生-SDK-开发" class="headerlink" title="前端监控原生 SDK 开发"></a>前端监控原生 SDK 开发</h2><ol><li><a href="https://juejin.cn/post/7133968180967374885">【前端监控系统开发实录】之原生 SDK 开发（一） | 青训营笔记</a></li><li><a href="https://juejin.cn/post/7134286771306627108">【前端监控系统开发实录】之原生 SDK 开发（二） | 青训营笔记</a></li><li><a href="https://juejin.cn/post/7134672002052259877">【前端监控系统开发实录】之原生 SDK 开发（三） | 青训营笔记</a></li></ol><h2 id="将-SDK-发布到-npm"><a href="#将-SDK-发布到-npm" class="headerlink" title="将 SDK 发布到 npm"></a>将 SDK 发布到 npm</h2><p><a href="https://juejin.cn/post/7131018811586641951/">【前端监控系统开发实录】之 SDK 发布至 npm | 青训营笔记</a></p><h2 id="后端开发"><a href="#后端开发" class="headerlink" title="后端开发"></a>后端开发</h2><ol><li><a href="https://juejin.cn/post/7132867601574658062">【前端监控系统开发实录】之时序数据库的探索 | 青训营笔记</a></li><li><a href="https://juejin.cn/post/7133237688417255437">【前端监控系统开发实录】之使用 swagger 配置接口文档 | 青训营笔记</a></li></ol><h2 id="web-视图展示"><a href="#web-视图展示" class="headerlink" title="web 视图展示"></a>web 视图展示</h2><p>开发中…</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ts </tag>
            
            <tag> NodeJs </tag>
            
            <tag> Koa </tag>
            
            <tag> MySQL </tag>
            
            <tag> InfluxDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/28/react-yuan-ma/"/>
      <url>/2022/06/28/react-yuan-ma/</url>
      
        <content type="html"><![CDATA[<p>作为框架的使用者，会首先关注 React 的 API ，但 React 团队作为框架的开发者，他们首先面对的是 React 的设计理念。所以，要学懂 React 的源码，我们需要将自己的角色，从框架的使用者转变为框架的开发者，从理念出发，自顶向下的学习。</p><h1 id="调试源码"><a href="#调试源码" class="headerlink" title="调试源码"></a>调试源码</h1><h1 id="理念篇"><a href="#理念篇" class="headerlink" title="理念篇"></a>理念篇</h1><h2 id="设计理念"><a href="#设计理念" class="headerlink" title="设计理念"></a>设计理念</h2><blockquote><p>React 是用 JavaScript 构建快速响应的大型 Web 应用程序的首选方式。</p></blockquote><p><strong>什么因素制约了快速响应</strong>：可能是由于我们正在进行大量的计算，或者是因为当前网络状况不佳，我们正在等待一个请求的返回。换句话说，就是 <strong>计算能力</strong> 和 <strong>网络延迟</strong> 这两个原因导致我们的应用不能快速响应。究其原因，就是 CPU 的瓶颈和 IO 的瓶颈。</p><p><strong>解决 CPU 瓶颈</strong>：<br>主流浏览器的刷新频率为 <strong>60Hz</strong>，也就是说，每16.6ms会刷新一次。在这16.6ms中，浏览器会依次执行 <strong>JS脚本执行</strong> - <strong>样式布局</strong> - <strong>样式绘制</strong> ，如果 JS 脚本执行时间超过了16.6ms，那么这一帧就没有时间继续执行后面的步骤了，浏览器就会掉帧，表现形式有：浏览器的滚动不流畅、在输入框输入的字符不能及时响应在页面上。</p><p>demo:输入框输入字符并更新页面<br>我们通常会使用防抖和节流这两种方案，限制触发更新的频率，来减少掉帧的可能性，但这是治标不治本的。随着我们输入的字符越来越多，我们每一次更新所需要的时间都超过了16.6ms，那么即使使用节流和防抖，也会造成浏览器掉帧。</p><p>为了解决这一难题，React 将同步更新变为异步可中断更新。简单来说，React 和浏览器做了一个约定，浏览器从16.6ms中抽出一部分给 React，React 利用这一部分时间完成自己的工作，如果某一个工作需要的时间超过了浏览器给的时间，React 会中断自己的工作，将控制权交给浏览器，等待下一帧留给 React 的那部分时间到来再继续执行之前被中断的工作。这样，浏览器在每一帧都会有时间执行样式布局和样式绘制。</p><p><strong>解决 IO 瓶颈</strong>：比如一些需要等待数据请求结果才能做出进一步响应的场景下，用户如何才能感知到快速响应。</p><p>React 的答案是：</p><blockquote><p>将人机交互研究的结果整合到真实的 UI 中。例如，研究表明，对 UI 交互来说，延迟显示中间的加载状态，能让用户感觉更流畅。 </p></blockquote><p>这话翻译一下就是，异步加载时，在结果出来前会有一段空白期，本来在用户看来这段空白期会显示 loading 状态，但如果我们稍微推后一点时间再显示这个 loading 状态，从用户的感知来说，其实就跟同步更新没什么区别。这是基于人的主观感受来实现的。</p><h2 id="架构演进史"><a href="#架构演进史" class="headerlink" title="架构演进史"></a>架构演进史</h2><p><strong>老的 React （React15）架构</strong>：<br>这个架构整体分为两部分：Reconciler（协调器）【决定渲染什么组件】和 Renderer（渲染器）【将组件渲染到视图中】。</p><h2 id="Fiber-架构"><a href="#Fiber-架构" class="headerlink" title="Fiber 架构"></a>Fiber 架构</h2><p>Fiber （纤程）可以理解为协程的一种实现，在 js 中，协程已经有一种实现方式：Generator 。</p><p>那 React 为什么不使用 Generator ？</p><ul><li>首先，Generator 和 async/await 一样也是具有传染性的。</li><li>其次，Fiber 架构需要达成两个目的：①更新可以中断并继续；②更新可以拥有不同的优先级，高优先级的更新可以打断低优先级的更新。<br>然而，使用 Generator 只能达到第一个目的，却不能达到第二个目的。</li></ul><p><strong>工作原理</strong>：<br>看一段程序：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当我们首次调用<code>ReactDOM.render()</code>时，会创建整个应用的根节点<code>FiberRootNode</code>【由于我们可以多次调用<code>ReactDOM.render()</code>，将不同的应用挂载到不同的 DOM 节点下，所以每个应用都有它自己的根 Fiber 节点<code>RootFiber</code>（在一个页面中可以有多个<code>RootFiber</code>，但只能有一个<code>FiberRootNode</code>来管理这些<code>RootFiber</code>）】。</p><p>函数组件APP 会创建一个对应的 Fiber 节点，该节点的类型为<code>function Component</code>；APP 的子节点<code>p</code>会创建一个对应的 Fiber 节点，该节点的类型为<code>host Component</code>，也就是原生 DOM 节点对应的 Fiber 节点；p 节点的第一个子节点 kasong 会创建一个对应的文本 Fiber 节点；kasong的兄弟节点 num 也会创建一个文本 Fiber 节点。</p><p>那这些 Fiber 节点是如何连接的呢：<code>FiberRootNode.current =  RootFiber, RootFiber.child = App, App.child = p, p.child = kasong, kasong.sibling = num, num.return = p</code></p><h3 id="双缓存"><a href="#双缓存" class="headerlink" title="双缓存"></a>双缓存</h3><p><strong>定义</strong>：在内存中构建并直接替换的技术</p><h1 id="架构篇"><a href="#架构篇" class="headerlink" title="架构篇"></a>架构篇</h1><h2 id="render-阶段"><a href="#render-阶段" class="headerlink" title="render 阶段"></a>render 阶段</h2><p><code>render 阶段</code>的主要工作是 <strong>构建 Fiber 树</strong> 和 <strong>生成 effectList</strong> 。我们知道，react 入口的两种模式会进入<code>performSyncWorkOnRoot</code>或者<code>performConcurrentWorkOnRoot</code>，这取决于本次更新是同步更新还是异步更新。而这两个方法分别会调用<code>workLoopSync</code>或者<code>workLoopConcurrent</code>方法。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// performSyncWorkOnRoot会调用该方法</span><span class="token keyword">function</span> <span class="token function">workLoopSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>workInProgress <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// performConcurrentWorkOnRoot会调用该方法</span><span class="token keyword">function</span> <span class="token function">workLoopConcurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>workInProgress <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">shouldYield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当某一个 fiber 节点进入<code>beginWork</code>时，它最终的目的是创建当前<code>fiber</code>节点的第一个<code>子fiber</code>节点。</p><p><strong>beginWork</strong>的工作流程：</p><ul><li>判断当前<code>fiber</code>节点的类型，以进入不同的<code>update</code>逻辑；</li><li>在<code>update</code>的逻辑中，会判断当前<code>workInProgressFiber</code>是否存在对应的<code>current fiber</code>，以决定是否标记<code>effect Tag</code>；</li><li>接着进入<code>reconcile</code>逻辑</li></ul><h2 id="commit-阶段"><a href="#commit-阶段" class="headerlink" title="commit 阶段"></a>commit 阶段</h2><h1 id="实现篇"><a href="#实现篇" class="headerlink" title="实现篇"></a>实现篇</h1><h2 id="Diff-算法"><a href="#Diff-算法" class="headerlink" title="Diff 算法"></a>Diff 算法</h2><p>diff 操作本身是有性能损耗的，React文档中提到，即使在最前沿的算法中，将前后两棵树完全比对的算法的复杂程度为 O(n³)，其中n是树中元素的数量。</p><p>为了降低算法复杂度，React 的 diff 设置了三个限制条件，以确保复杂度能降为<code>O(n)</code>：</p><ul><li>只对同级元素进行 diff 。如果一个<code>DOM 节点</code>在前后两次更新中跨越了层级，那么 React 不会复用该节点。</li><li>只复用同类型的 DOM 节点。如果元素由<code>div</code>变为<code>p</code>，React 会销毁<code>div</code>及其子孙节点，并新建<code>p</code>及其子孙节点。</li><li>通过元素的<code>key</code>属性判断是否可以复用。</li></ul><p>diff 口诀：</p><ul><li>diff 口诀有三条：</li><li>第一条，看元素，类型相同可复用，类型不同不复用</li><li>第二条，看 key ，key 同类型同，这才能复用</li><li>第三条，看同级，diff 更新不跨级</li><li>那么先看第一条</li><li>有 key 先看 key ，key 同看类型</li><li>类型相同可复用，类型不同要删除</li><li>key 不同，不强求，不能复用就算了</li><li>没有 key ，看成 key = null ，接着就看第二条</li><li>类型相同可复用，类型不同不复用</li></ul><blockquote><p>React 源码：<a href="https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactChildFiber.new.js#L1280">Diff 的入口函数 reconcileChildFibers</a></p></blockquote><p>我们从 Diff 的入口函数<code>reconcileChildFibers</code>看看该算法的实现过程，该函数会根据<code>newChild</code>（即JSX对象）类型调用不同的处理函数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">reconcileChildFibers</span><span class="token punctuation">(</span>  <span class="token parameter">returnFiber<span class="token operator">:</span> Fiber<span class="token punctuation">,</span>  currentFirstChild<span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  newChild<span class="token operator">:</span> any<span class="token punctuation">,</span>  lanes<span class="token operator">:</span> Lanes</span><span class="token punctuation">)</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> isUnkeyedTopLevelFragment<span class="token operator">:</span> boolean <span class="token operator">=</span>    <span class="token keyword">typeof</span> newChild <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span>    newChild <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>    newChild<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">REACT_FRAGMENT_TYPE</span> <span class="token operator">&amp;&amp;</span>    newChild<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isUnkeyedTopLevelFragment<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    newChild <span class="token operator">=</span> newChild<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 判断 newChild 的类型</span>  <span class="token keyword">const</span> isObject <span class="token operator">=</span> <span class="token keyword">typeof</span> newChild <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> newChild <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// newChild是object类型，可能是 REACT_ELEMENT_TYPE 或 REACT_PORTAL_TYPE 或 REACT_LAZY_TYPE</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>newChild<span class="token punctuation">.</span>$$<span class="token keyword">typeof</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> <span class="token constant">REACT_ELEMENT_TYPE</span><span class="token operator">:</span>        <span class="token comment">// 调用 reconcileSingleElement 处理</span>      <span class="token keyword">case</span> <span class="token constant">REACT_PORTAL_TYPE</span><span class="token operator">:</span>        <span class="token comment">// xxx</span>      <span class="token keyword">case</span> <span class="token constant">REACT_LAZY_TYPE</span><span class="token operator">:</span>        <span class="token comment">// xxx</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> newChild <span class="token operator">===</span> <span class="token string">'string'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> newChild <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 调用 reconcileSingleTextNode 处理</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>newChild<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 调用 reconcileChildrenArray 处理</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 一些其他情况调用处理函数</span>  <span class="token comment">// ...省略</span>  <span class="token comment">// 以上都没有命中，删除节点</span>  <span class="token keyword">return</span> <span class="token function">deleteRemainingChildren</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> currentFirstChild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于单个节点，我们以类型object为例，会进入reconcileSingleElement</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">reconcileSingleElement</span><span class="token punctuation">(</span>    <span class="token parameter">returnFiber<span class="token operator">:</span> Fiber<span class="token punctuation">,</span>    currentFirstChild<span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    element<span class="token operator">:</span> ReactElement</span><span class="token punctuation">)</span><span class="token operator">:</span> Fiber <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> key <span class="token operator">=</span> element<span class="token punctuation">.</span>key<span class="token punctuation">;</span>    <span class="token keyword">let</span> child <span class="token operator">=</span> currentFirstChild<span class="token punctuation">;</span>    <span class="token comment">// 首先判断是否存在对应DOM节点</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>child <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 上一次更新存在DOM节点，接下来判断是否可复用</span>        <span class="token comment">// 首先比较key是否相同</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>key <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// key相同，接下来比较type是否相同</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// ...省略case</span>                <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>elementType <span class="token operator">===</span> element<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// type相同则表示可以复用</span>                        <span class="token comment">// 返回复用的fiber</span>                        <span class="token keyword">return</span> existing<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">// type不同则跳出switch</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 代码执行到这里代表：key相同但是type不同</span>            <span class="token comment">// 将该fiber及其兄弟fiber标记为删除</span>            <span class="token function">deleteRemainingChildren</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// key不同，将该fiber标记为删除</span>            <span class="token function">deleteChild</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        child <span class="token operator">=</span> child<span class="token punctuation">.</span>sibling<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 创建新Fiber，并返回 ...省略</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="状态更新"><a href="#状态更新" class="headerlink" title="状态更新"></a>状态更新</h2><p>React 中一共有<code>6</code>种优先级，从 <a href="https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/scheduler/src/SchedulerPriorities.js">官网</a> 中可以看到：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> type PriorityLevel <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> NoPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> ImmediatePriority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> UserBlockingPriority <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> NormalPriority <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> LowPriority <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> IdlePriority <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="几个关键的节点"><a href="#几个关键的节点" class="headerlink" title="几个关键的节点"></a>几个关键的节点</h3><ol><li>render 阶段的开始</li></ol><p><code>render</code>阶段开始于<code>performSyncWorkOnRoot</code>或<code>performConcurrentWorkOnRoot</code>方法的调用。这取决于本次更新时同步更新还是异步更新。</p><ol start="2"><li>commit 阶段的开始</li></ol><p><code>commit</code>阶段开始于<code>commitRoot</code>方法的调用。其中<code>rootFiber</code>会作为传参。</p><h3 id="开始串联"><a href="#开始串联" class="headerlink" title="开始串联"></a>开始串联</h3><p>我们知道，<code>render阶段</code>完成后会进入<code>commit阶段</code>。那么状态更新时，从<code>触发状态更新</code>到<code>render阶段</code>会经过什么步骤呢？</p><blockquote><p>在 React 中，有如下方法可以触发状态更新：</p><ul><li><code>ReactDOM.render</code></li><li><code>this.setState</code></li><li><code>this.forceUpdate</code></li><li><code>useState</code></li><li><code>useReducer</code></li></ul></blockquote><p>Q：这些方法调用的场景各不相同，他们是如何接入同一套状态更新机制呢？<br>A：每次状态更新都会创建一个保存更新状态相关内容的对象，我们叫它<code>Update</code>。在<code>render阶段</code>的<code>beginWork</code>中会根据<code>Update</code>计算新的<code>state</code>。</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h2 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h2><h2 id="异步调度"><a href="#异步调度" class="headerlink" title="异步调度"></a>异步调度</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 监测数据的原理.md</title>
      <link href="/2022/06/17/vue-jian-ce-shu-ju-de-yuan-li-md/"/>
      <url>/2022/06/17/vue-jian-ce-shu-ju-de-yuan-li-md/</url>
      
        <content type="html"><![CDATA[<ol><li>Vue 会监视 data 中所有层次的数据</li><li>如何监测对象中的数据？<br>通过 <code>setter</code> 实现监视，且要在new Vue 时就传入要监视的数据。</li></ol><ul><li>对象中后追加的属性，Vue 默认不做响应式处理</li><li>如需给后添加的属性做响应式，请使用如下 API ：<ul><li><code>Vue.set(target, propertyName/index, value)</code></li><li><code>vm.$set(target, propertyName/index, value)</code></li></ul></li></ul><ol start="3"><li>如何监测数组中的数据？<br>通过包裹数组更新元素的方法实现，本质就是做了两件事：</li></ol><ul><li>调用原生对应的方法对数组进行更新</li><li>重新解析模板，进而更新页面。</li></ul><ol start="4"><li>在 Vue 修改数组中的某个元素一定要用如下方法：</li></ol><ul><li><code>使用这些 API : push()、pop()、shift()、unshift()、splice()、sort()、reverse()</code></li><li><code>Vue.set() 或 vm.$set()</code></li></ul><blockquote><p>注意：<code>Vue.set()</code> 和 <code>vm.$set()</code> 不能给</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>备战大厂前端面试之Vue篇</title>
      <link href="/2022/06/17/bei-zhan-da-han-qian-duan-mian-shi-zhi-vue-pian/"/>
      <url>/2022/06/17/bei-zhan-da-han-qian-duan-mian-shi-zhi-vue-pian/</url>
      
        <content type="html"><![CDATA[<p>前端面试题系列：</p><ul><li>【1】<a href="https://hcyety.github.io/2022/03/08/bei-zhan-da-han-qian-duan-shi-xi-zhi-html-pian/">备战前端实习面试之HTML篇</a>  </li><li>【2】备战前端实习面试之CSS篇  </li><li>【3】<a href="">备战前端实习面试之JavaScript篇</a>  </li><li>【4】<a href="">备战前端实习面试之React篇</a>  </li><li>【5】<a href="">备战前端实习面试之Node.js篇</a>  </li><li>【6】<a href="">备战前端实习面试之浏览器原理篇</a>  </li><li>【8】<a href="">备战前端实习面试之性能优化篇</a>  </li><li>【7】<a href="">备战前端实习面试之计算机网络篇</a>  </li><li>【9】<a href="">备战前端实习面试之手写代码篇</a>  </li><li>【9】<a href="">备战前端实习面试之代码输出结果篇</a></li></ul><h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="vue-中-key-有什么作用？"><a href="#vue-中-key-有什么作用？" class="headerlink" title="vue 中 key 有什么作用？"></a>vue 中 key 有什么作用？</h2><ol><li>虚拟 DOM 中 key 的作用：</li></ol><p>key 是 虚拟 DOM 对象的标识，当数据发生变化时，Vue 会根据新数据生成新的虚拟 DOM ，随后 Vue会进行新虚拟 DOM 与旧虚拟 DOM 的差异比较，比较规则如下：</p><ul><li>旧虚拟 DOM 中找到了与新虚拟 DOM 相同的 key<ul><li>若虚拟 DOM 中内容没变，直接使用之前的真实 DOM </li><li>若虚拟 DOM 中内容变了，则生成新的真实 DOM ，随后替换掉页面中之前的真实 DOM</li></ul></li><li>旧虚拟 DOM 中未找到与新虚拟 DOM 相同的 key<ul><li>创建新的真实 DOM ，随后渲染到页面</li></ul></li></ul><ol start="2"><li>用 index 作为 key 可能会引发的问题：</li></ol><ul><li>若对数据进行 <strong>逆序</strong>添加、<strong>逆序</strong>删除等破坏顺序的操作，会产生没有必要的真实 DOM 更新（界面效果没问题，但效率低）</li><li>如果结构中还包含输入类的 DOM ，会产生错误 DOM 更新（界面更新有问题）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 求职 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 八股文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>近期安排*一点感想</title>
      <link href="/2022/06/16/jiang-you-yi-tian-ni-hui-yu-jian-mei-hao-de-yi-qie/"/>
      <url>/2022/06/16/jiang-you-yi-tian-ni-hui-yu-jian-mei-hao-de-yi-qie/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备战大厂前端面试之JavaScript篇</title>
      <link href="/2022/06/01/bei-zhan-da-han-qian-duan-mian-shi-zhi-javascript-pian/"/>
      <url>/2022/06/01/bei-zhan-da-han-qian-duan-mian-shi-zhi-javascript-pian/</url>
      
        <content type="html"><![CDATA[<p>前端面试题系列：</p><ul><li>【1】<a href="https://hcyety.github.io/2022/03/08/bei-zhan-da-han-qian-duan-shi-xi-zhi-html-pian/">备战前端实习面试之HTML篇</a></li><li>【2】<a href="https://hcyety.github.io/2022/03/08/bei-zhan-da-han-qian-duan-shi-xi-zhi-css-pian/">备战前端实习面试之CSS篇</a></li><li>【3】备战前端实习面试之JavaScript篇</li><li>【4】<a href="">备战前端实习面试之React篇</a></li><li>【5】<a href="">备战前端实习面试之Node.js篇</a></li><li>【6】<a href="">备战前端实习面试之浏览器原理篇</a></li><li>【8】<a href="">备战前端实习面试之性能优化篇</a></li><li>【7】<a href="">备战前端实习面试之计算机网络篇</a></li><li>【9】<a href="">备战前端实习面试之手写代码篇</a></li><li>【9】<a href="">备战前端实习面试之代码输出结果篇</a></li></ul><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="箭头函数与普通函数的区别"><a href="#箭头函数与普通函数的区别" class="headerlink" title="箭头函数与普通函数的区别"></a>箭头函数与普通函数的区别</h2><ol><li>箭头函数比普通函数更加简洁</li></ol><ul><li>如果没有参数，就直接写一个空括号即可</li><li>如果只有一个参数，可以省去参数的括号；如果有多个参数，就用逗号分隔</li><li>如果函数体的返回值只有一句，可以省略大括号；如果函数体不需要返回值，且只有一句话，可以给这个语句前面加一个void关键字，最常见的就是调用一个函数：<code>let fn = () =&gt; void doesNotReturn();</code></li></ul><ol start="2"><li>箭头函数没有自己的 this<br>箭头函数不会创建自己的 this ，它只会在自己作用域的上一层继承 this 。所以箭头函数中的 this 的指向在它定义时就已经确定了，之后不会更改。</li><li>call()、apply()、bind()等方法不能改变箭头函数中this的指向<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token string">'Global'</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token function-variable function">fun1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">// 'Global'</span><span class="token function">fun1</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>id<span class="token operator">:</span> <span class="token string">'Obj'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 'Global'</span><span class="token function">fun1</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>id<span class="token operator">:</span> <span class="token string">'Obj'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 'Global'</span><span class="token function">fun1</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>id<span class="token operator">:</span> <span class="token string">'Obj'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 'Global'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>箭头函数不能作为构造函数使用</li><li>箭头函数没有自己的 arguments</li><li>箭头函数没有 prototype</li><li>箭头函数不能用作 Generator 函数，不能使用 yeild 关键字</li></ol><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h3><p>闭包就是在函数内部可以访问到其外部函数的参数和变量。之所以能访问到外部的参数和变量，是因为它是顺着作用域链向上查找的。</p><h3 id="闭包的应用"><a href="#闭包的应用" class="headerlink" title="闭包的应用"></a>闭包的应用</h3><h3 id="闭包的缺陷"><a href="#闭包的缺陷" class="headerlink" title="闭包的缺陷"></a>闭包的缺陷</h3><ol><li>常驻内存会增大内存使用量，且有可能造成内存泄露。</li><li>闭包会影响脚本性能，包括处理速度和内存消耗。</li></ol><h3 id="什么是内存泄露"><a href="#什么是内存泄露" class="headerlink" title="什么是内存泄露"></a>什么是内存泄露</h3><p><strong>概念</strong>：不再用到的内存，没有及时释放，就叫做内存泄漏（memory leak），会导致内存溢出。</p><blockquote><p>内存溢出：指程序申请内存时，没有足够的内存供申请者使用。例如，给一块存储int类型数据的存储空间，但却存储long类型的数据，那么结果就是内存不够用，此时就会报错，即所谓的内存溢出。</p></blockquote><p><strong>常见的内存泄露</strong>：</p><ol><li>意外的全局变量：①未定义的变量会在全局对象创建一个新变量；②通过 this 点方法在全局定义了一个新变量。</li><li>闭包引起的内存泄漏（闭包可以读取函数内部的变量，然后让这些变量始终保存在内存中。如果在使用结束后没有将局部变量清除，就可能导致内存泄露）。</li><li>没有清理 DOM 元素的引用（如在一个对象中定义了一个值为 DOM 的键值对）。</li><li>没有移除计时器或回调函数。</li><li>循环引用。</li></ol><h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><p><strong>基本思路</strong>：先确定哪个变量不会再使用，然后释放它占用的内存。这个过程是周期性的，即垃圾回收程序每隔一定时间（或者说在代码执行过程中某个预定的收集时间）就会自动运行。</p><p><strong>回收策略</strong>：</p><ol><li>引用计数：跟踪记录每个值被引用的次数，每次引用的时候加一，被释放的时候就减一，当一个值的引用次数变为零，就可以将其内存空间回收。</li></ol><ul><li>优点：①发现垃圾时立即回收；②能最大限度减少程序暂停，让空间不会有被占满的时候。</li><li>缺点：①无法回收循环引用的对象；②由于要对所有对象进行数值的监控和修改，资源消耗开销大。</li></ul><ol start="2"><li>标记清除：分为标记和清除两个阶段。当变量进入执行上下文时，这个变量会被加上 存在于上下文中 的标记，此为标记阶段；当变量离开上下文时，也会被加上离开上下文的标记，此为清除阶段。于是当垃圾回收时就会销毁那些带标记的值并回收他们的内存空间。</li></ol><ul><li>优点：①解决了对象循环引用的问题；②回收速度较快。</li><li>缺点：①空间碎片化，因为清除那些被标记为离开上下文状态的变量时，是不管删除的这个位置的；②不会立即回收垃圾对象，清除的时候程序是停止工作的。</li></ul><ol start="3"><li>标记整理：是标记清除的加强版。在标记和清除中间，添加了内存空间的整理，其实就是在执行清除阶段前，移动对象位置，使他们在地址上保持连续。</li></ol><ul><li>优点：相比较与标记清除回收策略，这个方法减少了碎片化的空间。</li><li>缺点：不会立即回收垃圾对象，清除的时候程序是停止工作的。</li></ul><ol start="4"><li>分代回收：又分为新生代对象回收和老生代对象回收。</li></ol><ul><li>新生代对象回收</li></ul><p><strong>概念</strong>：新生代就是指存活时间较短的对象，例如：一个局部作用域中，只要函数执行完毕之后变量就会回收。</p><p><strong>空间分布</strong>：新生代内存区分为两个等大小的空间，分别是 <strong>使用空间 From</strong> 和 <strong>空闲空间 To</strong> 。</p><p><strong>回收过程</strong>：</p><ul><li>首先会将所有活动对象存储于 From 空间，这个时候 To 空间是空闲状态。</li><li>当 From 空间使用到一定程度后就会对活动对象进行 <strong>标记整理</strong> 回收策略，将使用空间 From 变得连续。</li><li>然后将活动对象拷贝至 To 空间，就可以把 From 空间全部释放了，回收完成。</li><li>对 From 和 To 名称进行调换，继续重复之前的操作。</li></ul><p><strong>缺点</strong>：只能使用堆内存的一半。</p><ul><li>老生代对象回收</li></ul><p><strong>概念</strong>：老生代就是指存活时间较长的对象，例如：全局对象，闭包变量数据。</p><p><strong>什么情况下对象会出现在老生代空间中</strong>：</p><ul><li><strong>一轮GC之后还存活的新生代对象</strong> 就需要晋升。</li><li>在拷贝过程中，To 空间的使用率超过 <code>25%</code> ，就将这次的活动对象都移动至老生代空间。<blockquote><p>Q：为什么设置25%这个阈值？<br>A：当这次回收完成后，这个To空间会变为From空间，接下来的内存分配将在这个空间中进行。如果占比过高，会影响后续的内存分配。</p></blockquote></li></ul><p>在这个阶段中，会遍历堆中所有的对象，然后标记活的对象，在标记完成后，销毁所有没有被标记的对象。在标记大型对内存时，可能需要几百毫秒才能完成一次标记。这就会导致一些性能上的问题。为了解决这个问题，2011 年，V8 从 stop-the-world 标记切换到增量标志。在增量标记期间，GC 将标记工作分解为更小的模块，可以让 JS 应用逻辑在模块间隙执行一会，从而不至于让应用出现停顿情况。但在 2018 年，GC 技术又有了一个重大突破，这项技术名为并发标记。该技术可以让 GC 扫描和标记对象时，同时允许 JS 运行。<br>清除对象后会造成堆内存出现碎片的情况，当碎片超过一定限制后会启动压缩算法。在压缩过程中，将活的对象向一端移动，直到所有对象都移动完成然后清理掉不需要的内存。<br><a href="https://cloud.tencent.com/developer/article/1557608">Chrome 浏览器垃圾回收机制与内存泄漏分析</a></p><h2 id="函数作用域怎么模拟块级作用域"><a href="#函数作用域怎么模拟块级作用域" class="headerlink" title="函数作用域怎么模拟块级作用域"></a>函数作用域怎么模拟块级作用域</h2>]]></content>
      
      
      <categories>
          
          <category> 求职 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 八股文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目功能实现：评论框插入表情</title>
      <link href="/2022/05/20/xiang-mu-gong-neng-shi-xian-ping-lun-kuang-cha-ru-biao-qing/"/>
      <url>/2022/05/20/xiang-mu-gong-neng-shi-xian-ping-lun-kuang-cha-ru-biao-qing/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>一个 React 项目（用的函数组件）需要支持可以回复表情的评论，看到这个需求，相信读者们能想到好几种解决方案，比如使用成熟的富文本编辑器、使用第三方表情组件库、自己封装组件……</p><p>考虑到开发成本不能太高、评论组件可以复用、需求只是支持表情即可，因此笔者选择了第二种解决方案，也就是说，要去技术调研以选择合适的第三方库。</p><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>GitHub 上有很多开源的表情库，对比了一下，个人觉得 <a href="https://github.com/missive/emoji-mart">emoji-mart</a> 是最好的一个，原因：</p><ol><li><code>star</code> 数达到了 <strong>5.4 k</strong> ；</li><li>使用文档清晰易懂，支持中文；</li><li>作者持续维护，可以看到上一次的 <code>commit</code> 时间是 <strong>5天</strong> 前；</li><li>UI 设计高级，符合笔者审美。</li></ol><p>到这里，就确定了技术选型（出来吧 emoji-mart 就决定是你了hhh）</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="安装表情组件库"><a href="#安装表情组件库" class="headerlink" title="安装表情组件库"></a>安装表情组件库</h3><p>我们首先使用 <code>npm install --save emoji-mart @emoji-mart/data</code> 将库安装下来。</p><h3 id="生成容器组件"><a href="#生成容器组件" class="headerlink" title="生成容器组件"></a>生成容器组件</h3><p>然后把 demo 跑起来，这里新建了一个 <code>EmojiPicker.js</code> 文件，用于生成容器组件，其代码如下：</p><pre class="line-numbers language-none"><code class="language-none">import React, &#123; useEffect, useRef &#125; from &#39;react&#39;;import data from &#39;@emoji-mart&#x2F;data&#39;;import &#123; Picker &#125; from &#39;emoji-mart&#39;;function EmojiPicker(props) &#123;  const ref &#x3D; useRef();  useEffect(() &#x3D;&gt; &#123;    new Picker(&#123; ...props, data, ref &#125;);  &#125;, []);  return &lt;div ref&#x3D;&#123;ref&#125; &#x2F;&gt;;&#125;export default EmojiPicker;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>容器组件生成之后，就可以在其他地方使用，并调用它的 API 。在上面这段代码中，是不能在 <code>div</code> 中调用诸如 <code>onEmojiSelect</code> 之类的 API 的，因为此时容器组件还没生成，<code>div</code> 还仅仅只是 <code>div</code> 而已，这也是为什么要新建一个 <code>EmojiPicker.js</code> 的原因。</p><h3 id="调用容器组件"><a href="#调用容器组件" class="headerlink" title="调用容器组件"></a>调用容器组件</h3><p>在评论框处调用 <code>EmojiPicker</code> ，即可在页面中看到效果了。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;EmojiPicker  onEmojiSelect=&#123;emoji => searchEmoji(emoji)&#125;/>这里只展示与表情组件库有关联的输入框，其他相关组件的布局这里就不一一写出来了，请读者自由发挥&lt;Input.TextArea  id='textarea'  value=&#123;chatContent&#125; // 输入框文本值由 chatContent 决定，因此要维护 chatContent  onChange=&#123;e => onChatContentChange(e.target.value)&#125; // 文本值发生改变时的回调/><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里，我们离成功实现评论功能迈进了一小步，但还不够，可以看到上面代码有三个动态数据，分别是一个 <code>chatContent</code> 字段、<code>onChatContentChange</code> 函数和 <code>searchEmoji</code> 函数，我们继续往（写）下（bug）。</p><h3 id="封装函数"><a href="#封装函数" class="headerlink" title="封装函数"></a>封装函数</h3><ol><li>第一版</li></ol><p>在输入框进行键盘输入和表情插入，我们可以想到这样的逻辑：</p><ul><li>①键盘输入时直接调用输入框的 <code>onChange</code> API 更新文本值 <code>chatContent</code> 即可</li><li>②插入表情时调用组件库的 <code>onEmojiSelect</code>  API 获取到要插入的表情，拼接到 <code>chatContent</code> 后面</li></ul><p>于是有了下面的代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">[</span>chatContent<span class="token punctuation">,</span> setChatContent<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ①输入框文本值发生改变的回调函数</span><span class="token keyword">const</span> <span class="token function-variable function">onChatContentChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setChatContent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// ②选中表情的回调函数</span><span class="token keyword">const</span> <span class="token function-variable function">searchEmoji</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">emoji</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 考虑到在一开始就插入表情的情况</span>    <span class="token keyword">const</span> newChatContent <span class="token operator">=</span> chatContent<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> chatContent <span class="token operator">+</span> emoji<span class="token punctuation">.</span>native <span class="token operator">:</span> emoji<span class="token punctuation">.</span>native<span class="token punctuation">;</span>    <span class="token function">setChatContent</span><span class="token punctuation">(</span>newChatContent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然而这版的代码是有 bug 的，假如先输入“你好”，再插入表情，预计结果应该是“你好【表情】”，然而实际结果是“【表情】”，如图所示：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e9d1d19432ae4b3593b2138e5cc34924~tplv-k3u1fbpfcp-zoom-1.image" alt="输入“你好”"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c72ffd717f8a44849b463776950095a7~tplv-k3u1fbpfcp-zoom-1.image" alt="在“你好”后输入表情"></p><p>为什么会这样呢？这是因为 <code>chatContent.length</code> 为 <code>0</code> ，自然就被赋值为 <code>emoji.native</code> 了。那么，在 <a href="https://blog.csdn.net/weixin_43591980?type=blog">@飞哥</a> 的提点下，用 <code>tempTextAreaData</code> 全局字段存储输入框的文本值，这样就可以在页面更新的时候依然也能拿到最新的文本值，因此代码变成这样：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">+</span>   <span class="token keyword">let</span> tempTextAreaData <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>chatContent<span class="token punctuation">,</span> setChatContent<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ①输入框文本值发生改变的回调函数 </span><span class="token keyword">const</span> <span class="token function-variable function">onChatContentChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setChatContent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span>   tempTextAreaData <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// ②选中表情的回调函数</span><span class="token keyword">const</span> <span class="token function-variable function">searchEmoji</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">emoji<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 考虑到在一开始就插入表情的情况 </span><span class="token operator">-</span>   <span class="token keyword">const</span> newChatContent <span class="token operator">=</span> chatContent<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> chatContent <span class="token operator">+</span> emoji<span class="token punctuation">.</span>native <span class="token operator">:</span> emoji<span class="token punctuation">.</span>native<span class="token punctuation">;</span><span class="token operator">+</span>   <span class="token keyword">const</span> newChatContent <span class="token operator">=</span> tempTextAreaData<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> tempTextAreaData <span class="token operator">+</span> emoji<span class="token punctuation">.</span>native <span class="token operator">:</span> emoji<span class="token punctuation">.</span>native<span class="token punctuation">;</span><span class="token operator">+</span>   tempTextAreaData <span class="token operator">=</span> newChatContent<span class="token punctuation">;</span>    <span class="token function">setChatContent</span><span class="token punctuation">(</span>newChatContent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来看看效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e9d1d19432ae4b3593b2138e5cc34924~tplv-k3u1fbpfcp-zoom-1.image" alt="输入“你好”"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1fe5df90a1874f4abed6f85fa5cfd573~tplv-k3u1fbpfcp-zoom-1.image" alt="在“你好”后输入表情"></p><ol start="2"><li>第二版</li></ol><p>我们完成了第一版的代码，实现了在输入框文本值后面插入表情，但有一个缺陷：不能在文本中间插入表情，因此我们的代码逻辑需要进一步完善。</p><p>笔者的思考方向是这样的：当光标移动到文本中间时，获取这个光标的位置，截断光标之前和光标之后的字符，将表情拼接到两者之间。</p><p><code>onChatContentChange</code> 函数比较简单，第一版已经搞定了，现在我们完善 <code>searchEmoji</code> 函数：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 由于在光标中间拼接表情稍微复杂了一点，这里单独抽成 insertAtCursor 函数，tempTextAreaData 的更新也将在 insertAtCursor 中完成</span><span class="token keyword">const</span> <span class="token function-variable function">searchEmoji</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">emoji</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'textarea'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取输入框的节点对象</span>    <span class="token function">insertAtCursor</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> emoji<span class="token punctuation">.</span>native<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将表情插入到光标后面</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>insertAtCursor</code> 函数：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">insertAtCursor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">myField<span class="token punctuation">,</span> myValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>selection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//IE support</span>    myField<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> sel <span class="token operator">=</span> document<span class="token punctuation">.</span>selection<span class="token punctuation">.</span><span class="token function">createRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sel<span class="token punctuation">.</span>text <span class="token operator">=</span> myValue<span class="token punctuation">;</span>    sel<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>myField<span class="token punctuation">.</span>selectionStart <span class="token operator">||</span> myField<span class="token punctuation">.</span>selectionStart <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//MOZILLA/NETSCAPE support</span>    <span class="token keyword">const</span> startPos <span class="token operator">=</span> myField<span class="token punctuation">.</span>selectionStart<span class="token punctuation">;</span>    <span class="token keyword">const</span> endPos <span class="token operator">=</span> myField<span class="token punctuation">.</span>selectionEnd<span class="token punctuation">;</span>    <span class="token keyword">const</span> beforeValue <span class="token operator">=</span> myField<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> startPos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> afterValue <span class="token operator">=</span> myField<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>endPos<span class="token punctuation">,</span> myField<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    tempTextAreaData <span class="token operator">=</span> beforeValue <span class="token operator">+</span> myValue <span class="token operator">+</span> afterValue<span class="token punctuation">;</span>    <span class="token function">setChatContent</span><span class="token punctuation">(</span>tempTextAreaData<span class="token punctuation">)</span><span class="token punctuation">;</span>    myField<span class="token punctuation">.</span>selectionStart <span class="token operator">=</span> startPos <span class="token operator">+</span> myValue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    myField<span class="token punctuation">.</span>selectionEnd <span class="token operator">=</span> startPos <span class="token operator">+</span> myValue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    myField<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    tempTextAreaData <span class="token operator">+=</span> myValue<span class="token punctuation">;</span>    <span class="token function">setChatContent</span><span class="token punctuation">(</span>tempTextAreaData<span class="token punctuation">)</span><span class="token punctuation">;</span>    myField<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样一来，就可以在文本中插入表情了，效果如图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2ec089e800d94211a4be629711fdaa85~tplv-k3u1fbpfcp-zoom-1.image" alt="输入一段文字"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5da97051a84f4bf49b6c3bfee28c5eb0~tplv-k3u1fbpfcp-zoom-1.image" alt="文本中插入表情"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f94b4a3426d442487bd77bc3e297176~tplv-k3u1fbpfcp-zoom-1.image" alt="将选取替换成表情"></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>在第二版代码完成之后，这个项目需求就完成了，当然，这样的实现是基于这个评论功能只需要支持表情就好，对于图片的插入、上传等是不支持的，如果确实需要支持图片的话，其实可以考虑富文本编辑器，工具栏简洁一点，支持图片和表情，也就可以了。</p><p>关于富文本编辑器的技术选型，可以参考这篇文章：<a href="https://juejin.cn/post/7084046542994145294">前端开发常用的10款富文本编辑器</a>。</p><p>希望读者们能多多支持这个项目： <a href="https://gitee.com/caoshipeng/onepiece-web">onepiece-web</a>（star 一下不亏的 ^_^）<br>以上就是全部内容了，希望对大家有所帮助~  </p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面经汇总</title>
      <link href="/2022/04/29/qian-duan-mian-jing-hui-zong/"/>
      <url>/2022/04/29/qian-duan-mian-jing-hui-zong/</url>
      
        <content type="html"><![CDATA[<h1 id="陆一柒科技有限公司"><a href="#陆一柒科技有限公司" class="headerlink" title="陆一柒科技有限公司"></a>陆一柒科技有限公司</h1><p>2022.03.08 16:00~16:25 –&gt; 答案传送门</p><ol><li><p>自我介绍</p></li><li><p>详细介绍项目</p></li><li><p>项目的难点、挑战，怎么解决</p></li><li><p>html 常用的标签</p></li><li><p>css 有哪些选择器</p></li><li><p>js 的数据类型，怎么判断</p></li><li><p>instanceof 和 typeof 区别</p></li><li><p>为什么选择 react </p></li><li><p>数组和链表的作用，区别</p></li><li><p>翻转链表</p></li><li><p>了解哪些排序，介绍一种常用的</p></li></ol><hr><h1 id="数预智能"><a href="#数预智能" class="headerlink" title="数预智能"></a>数预智能</h1><p>2022.04.22 18:30~19:00 –&gt; 答案传送门</p><ol><li><p>语音聊天功能怎么实现</p></li><li><p>websocket 是怎么做的</p></li><li><p>项目难点</p></li><li><p>技术使用时卡点</p></li><li><p>闭包</p></li><li><p>promise 的好处</p></li><li><p>promise 解决了什么问题</p></li><li><p>js 数组方法</p></li><li><p>用 setTimeout 实现 setInterval</p></li><li><p>react hooks</p></li><li><p>url 输入到渲染</p></li></ol><hr><h1 id="货拉拉"><a href="#货拉拉" class="headerlink" title="货拉拉"></a>货拉拉</h1><p>2022.04.26 16:00 –&gt; 答案传送门</p><ol><li><p>介绍项目</p></li><li><p>登录密码有没有实现加密，怎么加密</p></li><li><p>项目难点以及怎么实现</p></li><li><p>说下 websocket</p></li><li><p>http 长连接和 websocket 连接有什么区别，为什么用 websocket</p></li><li><p>怎么用 http 实现：服务端知道客户端的连接状态</p></li><li><p>洋葱模型</p></li><li><p>express 和 koa 的区别</p></li><li><p>怎么实现跨域</p></li><li><p>setstate 是同步的还是异步的</p></li><li><p>setstate 的第一个参数是函数会怎么样</p></li><li><p>连续三个setstate，将count+1，最后count会变成几</p></li><li><p>介绍事件机制</p></li><li><p>说下 filber</p></li><li><p>React 有哪些生命周期</p></li><li><p>说下 shouldWillUpdate</p></li><li><p>虚拟 dom 是怎么对比的</p></li><li><p>如果有两个 dom 是一样的，但位置不一样，怎么处理</p></li><li><p>js 有哪些数据类型</p></li><li><p>引用数据类型和基本数据类型的区别</p></li><li><p>介绍堆这种数据结构</p></li><li><p>介绍完全二叉树</p></li><li><p>二叉树的深搜和广搜，怎么实现</p></li></ol><hr><h1 id="字节飞书文档"><a href="#字节飞书文档" class="headerlink" title="字节飞书文档"></a>字节飞书文档</h1><p>2022.04.27 16:00~16:50 –&gt; 答案传送门</p><ol><li><p>项目中如何运行 JS 代码</p></li><li><p>如果代码一直循环，代码怎么出结果</p></li><li><p>说下 websocket</p></li><li><p>聊天时支持传输图片吗</p></li><li><p>聊天数据是存到数据库的吗</p></li><li><p>算法题：二叉树路径和<br>给定一颗二叉树，返回所有路径的节点值相加后的结果，如：</p><pre class="line-numbers language-none"><code class="language-none">   1  &#x2F; \ 2   3&#x2F; \  &#x2F;4 5 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回结果 (1+2+4)+(1+2+5)+(1+3+6)=25</p></li><li><p>算法题：<a href="https://leetcode-cn.com/problems/valid-parentheses/">有效的括号</a></p></li><li><p>浏览器存储数据的方式</p></li><li><p>cookie 和 localStorage 的区别</p></li><li><p>cookie 的数据放到 localStorage ，有什么影响</p></li><li><p>防抖节流</p></li><li><p>React hooks</p></li><li><p>React 生命周期</p></li><li><p>垂直居中</p></li><li><p>http 状态码</p></li><li><p>304 代表什么</p></li><li><p>浏览器的缓存机制</p></li><li><p>怎么判断命中协商缓存</p></li><li><p>协商缓存返回什么标识</p></li><li><p>协商缓存的存储位置</p></li><li><p>memory 和 disk 的区别</p></li><li><p>什么是跨域</p></li><li><p>cors 怎么实现跨域</p></li><li><p>浏览器用 cors 去跨域，请求是一次还是两次</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 求职 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入探究“在浏览器输入URL到渲染页面”（中）性能优化</title>
      <link href="/2022/04/29/shen-ru-tan-jiu-zai-liu-lan-qi-shu-ru-url-dao-xuan-ran-ye-mian-zhong-xing-neng-you-hua/"/>
      <url>/2022/04/29/shen-ru-tan-jiu-zai-liu-lan-qi-shu-ru-url-dao-xuan-ran-ye-mian-zhong-xing-neng-you-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>关于这道经典的面试题，笔者准备写三篇文章来对知识点进行深度和广度的挖掘：</p><ul><li><a href="https://hcyety.github.io/2022/04/05/shen-ru-tan-jiu-zai-liu-lan-qi-shu-ru-url-dao-xuan-ran-ye-mian-shang-guo-cheng-pou-xi/">深入探究“在浏览器输入URL到渲染页面”（上）过程剖析</a></li><li>深入探究“在浏览器输入URL到渲染页面”（中）性能优化</li><li><a href="">深入探究“在浏览器输入URL到渲染页面”（下）模拟面试</a></li></ul><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>在 <a href="https://juejin.cn/post/7081987410954813447">上一篇文章</a> 中写到，用户在输入 url 并回车之后，浏览器经历了下面这些阶段：<br>重定向 → 拉取缓存 → DNS 查询 → 建立 TCP 连接 → 发起请求 → 接收响应 → 处理 html 元素 → 页面进行渲染。<br>因此性能优化也可以从这几个阶段入手：</p><ol><li>网络请求过程</li></ol><blockquote><p><strong>减少请求数量</strong>：</p></blockquote><ul><li>永久重定向</li><li>浏览器缓存</li><li>DNS 预解析</li><li>合并文件</li><li>使用雪碧图</li><li>避免使用空的 src 和 href</li><li>不使用CSS @import</li></ul><blockquote><p><strong>减小请求资源大小</strong>：</p></blockquote><ul><li>资源打包压缩<ul><li>  js 压缩</li><li>  html 压缩</li><li>  css 压缩</li><li>tree-shaking 剔除没用到的代码</li><li>服务端开启 gzip 压缩</li></ul></li><li>图片资源优化<ul><li>  不要在 html 里缩放图像</li><li>  使用雪碧图（css sprite）</li><li>  使用字体图标（iconfont）</li><li>  使用 webp</li></ul></li></ul><blockquote><p><strong>提升网络传输速率</strong>：</p></blockquote><ul><li>使用 HTTP2</li><li>  静态资源走 CDN 引入</li></ul><ol start="2"><li>浏览器渲染过程</li></ol><blockquote><p><strong>资源加载位置</strong>：</p></blockquote><ul><li>css 文件放在 <code>&lt;head&gt;</code></li><li>js 文件放在 <code>&lt;body&gt;</code> 底部</li></ul><blockquote><p><strong>资源加载时机</strong>：</p></blockquote><ul><li>使用预加载机制</li><li>异步 script 标签</li><li>模块按需加载</li><li>图片懒加载</li></ul><blockquote><p><strong>资源渲染过程</strong>：</p></blockquote><ul><li>减少重排与重绘</li><li>使用服务端渲染</li></ul><ol start="3"><li>其他</li></ol><ul><li>使用 <code>requestAnimationFrame</code> 替代 <code>setTimeout</code> 和 <code>setInterval</code></li><li>防抖和节流</li></ul><h2 id="一、网络请求过程"><a href="#一、网络请求过程" class="headerlink" title="一、网络请求过程"></a>一、网络请求过程</h2><p>我们常将网络性能优化措施归结为三大方面：<strong>减少请求数量</strong>、<strong>减小请求资源大小</strong>、<strong>提升网络传输速率</strong>。</p><blockquote><p>减少请求数量：</p></blockquote><h3 id="减少重定向"><a href="#减少重定向" class="headerlink" title="减少重定向"></a>减少重定向</h3><p><strong>原理</strong>：当页面发生了重定向，就会重新发送 url 请求，延迟整个 HTML 文档的传输。<br>如果一定要使用重定向，就使用 <code>301</code> 永久重定向。</p><p><strong>实例</strong>：</p><pre class="line-numbers language-none"><code class="language-none">HTTP&#x2F;1.1 301 Moved Permanently Location: http:&#x2F;&#x2F;example.com&#x2F;newuriContent-Type: text&#x2F;html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><blockquote><p>推荐阅读：<a href="https://cloud.tencent.com/developer/article/1762070">搞懂 HTTP 重定向 - 如何优雅地使用 301</a></p></blockquote></blockquote><h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><p><strong>原理</strong>：使用 <code>Cache-Control</code> 或 <code>Expires</code> 这类强缓存时，在缓存不过期的情况下，可以直接使用缓存的文件，而不向服务器请求资源。若强缓存失效，还可以使用 <code>Last-Modified</code> 或 <code>ETag</code> 这类协商缓存，向服务器发送请求，在资源不发生变化的情况下，可以直接从本地缓存加载资源；若资源发生变化，则服务器会将更新后的资源发送给浏览器。</p><h3 id="DNS-预解析"><a href="#DNS-预解析" class="headerlink" title="DNS 预解析"></a>DNS 预解析</h3><p><strong>使用</strong>：在 <code>html</code> 文件的 <code>&lt;head&gt;</code> 头部中加上 <code>&lt;link&gt;</code> 标签。<br><code>&lt;link&gt;</code> 标签中①设置属性 <code>rel</code> ，赋值为 <code>dns-prefetch</code> ；②设置属性 <code>href</code> ，赋值为 要解析的域名 （写域名和端口号就可以了）。</p><p><strong>实例</strong>：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>www.baidu.com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="合并文件"><a href="#合并文件" class="headerlink" title="合并文件"></a>合并文件</h3><p><strong>原理</strong>：将多个文件合并，这样在请求时就只发送一个 HTTP 请求来请求资源。</p><p>但这样也有它的坏处：①首屏渲染变慢；②缓存失效问题。  </p><p>因此对于文件合并，有两点改进：①公共库合并；②不同页面单独合并。</p><h3 id="使用雪碧图"><a href="#使用雪碧图" class="headerlink" title="使用雪碧图"></a>使用雪碧图</h3><p><strong>原理</strong>：将网站上用到的一些图片整合到一张单独的图片中，从而减少请求图片的次数。</p><p><strong>使用</strong>：</p><ul><li>合成雪碧图：</li></ul><p>配置 webpack ：<code>webpack-spritesmith</code> 插件提供了自动合成雪碧图的功能并且可以自动生成对应的样式文件。</p><pre class="line-numbers language-none"><code class="language-none">var path &#x3D; require(&#39;path&#39;);var SpritesmithPlugin &#x3D; require(&#39;webpack-spritesmith&#39;);module.exports &#x3D; &#123;  &#x2F;&#x2F; ...  plugins: [    new SpritesmithPlugin(&#123;      src: &#123;        cwd: path.resolve(__dirname, &#39;img&#39;), &#x2F;&#x2F; 图片的存放目录        glob: &#39;*.png&#39;, &#x2F;&#x2F; 要合并的图片      &#125;,      target: &#123;        image: path.resolve(__dirname, &#39;spriteImg&#x2F;sprite.png&#39;),        css: path.resolve(__dirname, &#39;spriteImg&#x2F;sprite.styl&#39;),      &#125;,      apiOptions: &#123;        cssImageRef: &#39;~sprite.png&#39;,      &#125;,    &#125;),  ],&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面配置就能将 <code>img</code> 目录下的所有 <code>png</code> 文件合成雪碧图，并且输出到对应目录，同时还可以生成对应的样式文件，样式文件的语法会根据你配置的样式文件的后缀动态生成。</p><p>如果不使用 webpack 插件的话，也可以使用在线生成雪碧图的网站：<a href="https://www.toptal.com/developers/css/sprite-generator">www.toptal.com/developers/</a></p><ul><li>使用雪碧图：<br>通过 <code>background-position</code> 属性来设置资源在雪碧图中的哪一个位置。</li></ul><h3 id="避免使用空的-src-和-href"><a href="#避免使用空的-src-和-href" class="headerlink" title="避免使用空的 src 和 href"></a>避免使用空的 src 和 href</h3><p><strong>原理</strong>：a 标签设置空的 href ，会重定向到当前的页面地址；form 设置空的 method ，会提交表单到当前的页面地址。</p><h3 id="不使用CSS-import"><a href="#不使用CSS-import" class="headerlink" title="不使用CSS @import"></a>不使用CSS @import</h3><p><strong>原理</strong>：使用 css @import 会导致 css 无法并行下载，因为使用 @import 引用的文件只有在引用它的那个文件被下载、解析之后，浏览器才会知道还有另外一个 css 需要下载，这时才去下载这个 css 文件，然后在下载后开始解析、构建 layout tree 等一系列操作。因此 css @import 引起的 css 解析延迟会加长页面留白期。</p><blockquote><p>减小请求资源的大小：</p></blockquote><h3 id="资源打包压缩"><a href="#资源打包压缩" class="headerlink" title="资源打包压缩"></a>资源打包压缩</h3><ul><li>压缩 JS 代码</li></ul><p>在 webpack 的 production 模式中，会自动压缩 js 代码。</p><pre class="line-numbers language-none"><code class="language-none">optimization: &#123;  minimizer: [    new UglifyJsPlugin(&#123;      cache: true,      parallel: true,      sourceMap: true &#x2F;&#x2F; set to true if you want JS source maps    &#125;),    ...Plugins  ];&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>压缩 HTML 代码<br>使用 html-webpack-plugin 中的 minify 进行压缩。</p><pre class="line-numbers language-none"><code class="language-none">new HtmlWebpackPlugin(&#123;  minify: &#123;    removeComments: true,    collapseWhitespace: true,    removeRedundantAttributes: true,    useShortDoctype: true,    removeEmptyAttributes: true,    removeStyleLinkTypeAttributes: true,    keepClosingSlash: true,    minifyJS: true,    minifyCSS: true,    minifyURLs: true  &#125;,  chunksSortMode: &quot;dependency&quot;&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>压缩 CSS 代码<br>使用 cssnano 压缩 css。在 postcss.config.js 中进行配置。</p><pre class="line-numbers language-none"><code class="language-none">const cssnano &#x3D; require(&quot;cssnano&quot;);module.exports &#x3D; &#123;  plugins: [cssnano]&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用 tree-shaking 剔除未使用过的代码</p></li></ul><p><strong>作用</strong>：**<code>tree shaking</code> 可以去除未引用代码，减少代码体积**。</p><p><strong>使用</strong>：在 <code>package.json</code> 中，添加字段：<strong>sideEffects: false</strong>，告诉 Webpack <strong>所有代码都没有副作用（都可以进行tree shaking）</strong>，然后再根据不同的环境进行不同的配置。</p><p><code>package.json</code>：</p><pre class="line-numbers language-none"><code class="language-none">&#123;  &quot;name&quot;: &quot;webpack-demo-1&quot;,  &quot;sideEffects&quot;: false,  &#x2F;&#x2F; ...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开发环境下的配置：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; webpack.config.jsmodule.exports &#x3D; &#123;  &#x2F;&#x2F; ...  mode: &#39;development&#39;,  optimization: &#123;    usedExports: true,  &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生产环境下的配置：<br>在生产环境下，<code>Webpack</code> 默认会添加 <code>Tree Shaking</code> 的配置，因此只需写一行 <strong>mode: ‘production’</strong> 即可。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; webpack.config.jsmodule.exports &#x3D; &#123;  &#x2F;&#x2F; ...  mode: &#39;production&#39;,&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：</p><ol><li><p>如果想要对一段代码做 <code>Tree Shaking</code> 处理，那么就要避免引入整个库到一个 JS 对象上，如果你这么做了，Webpack 就会认为你是需要这整个库的，这样就不会做 Tree Shaking 处理。</p></li><li><p><strong>Tree Shaking 只支持 ESM 的引入方式，不支持 Common JS 的引入方式。</strong></p><blockquote><p>ESM: export + import<br>Common JS: module.exports + require</p></blockquote></li></ol><ul><li>使用 gzip 压缩</li></ul><p><strong>流程</strong>：①浏览器发起请求时，在请求头中设置属性 <code>accept-encoding: gzip</code> 表明浏览器支持 gzip 。②服务器根据请求头信息判断浏览器是否支持 gzip ，支持的话就向浏览器传送压缩过的内容，并在响应头上带上 <code>content-encoding: gzip</code> ；不支持的话则直接向浏览器发送未经过压缩的内容。③浏览器接收到服务器响应后根据响应头判断内容是否被压缩，如果被压缩则解压缩后再显示内容。</p><p>详细原理可参考 <a href="https://blog.csdn.net/hguisu/article/details/7795435">gzip压缩算法</a>。</p><h3 id="图片资源优化"><a href="#图片资源优化" class="headerlink" title="图片资源优化"></a>图片资源优化</h3><ul><li><p>不要在 HTML 里缩放图像<br>不要使用 <code>&lt;img&gt;</code> 的 <code>width、height</code> 缩放图片，如果用到小图片，就使用相应大小的图片。如果需要 <code>&lt;img width=&quot;100&quot; height=&quot;100&quot; src=&quot;mycat.jpg&quot; alt=&quot;My Cat&quot; /&gt;</code> ，那么图片本身（mycat.jpg）应该是 <code>100x100px</code> 的，而不是去缩小 <code>500x500px</code> 的图片。</p></li><li><p>使用字体图标（iconfont）代替图片图标<br>字体图标就是将图标制作成一个字体，使用时就跟字体一样，可以设置属性如 <code>font-size</code>、<code>color</code> 等。并且字体图标是矢量图，不会失真，而且生成的文件特别小。</p></li><li><p>Base64<br>将图片的内容以 <code>Base64</code> 格式内嵌到 HTML 中，可以减少 HTTP 请求数量。但是，由于 <code>Base64</code> 编码用 <code>8</code> 位字符表示信息中的 <code>6</code> 个位，所以编码后大小大约比原始值扩大了 <code>33%</code> 。</p></li><li><p>使用 Webp<br><code>webp</code> 的优势体现在它具有更优的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼无差异的图像质量；同时具备了无损和有损的压缩模式、<code>alpha</code> 透明以及动画的特性，在 <code>jpeg</code> 和 <code>png</code> 上的转化效果都想当优秀、稳定和统一。</p></li></ul><blockquote><p>提升网络传输速率：</p></blockquote><h3 id="使用-HTTP2"><a href="#使用-HTTP2" class="headerlink" title="使用 HTTP2"></a>使用 HTTP2</h3><p><strong>原理</strong>：在一次 HTTP 请求中，底层会通过 tcp 建立连接。而 tcp 协议存在 3 次握手，4 次挥手阶段，这些机制虽然保证了 tcp 的可靠性，但降低了传输效率，为了解决这个问题，我们可以使用 http2 来增加传输时候效率。</p><p>http2 相比 http1 主要有以下几点<strong>优化</strong>：</p><ul><li><p>解析速度快<br>服务器解析 HTTP1.1 的请求时，必须不断地读入字节，直到遇到分隔符 CRLF 为止。而解析 HTTP2 的请求就不用这么麻烦，因为 HTTP2 是基于帧的协议，每个帧都有表示帧长度的字段。</p></li><li><p>  多路复用<br>HTTP1.1 如果要同时发起多个请求，就得建立多个 TCP 连接，因为一个 TCP 连接同时只能处理一个 HTTP1.1 的请求。在 HTTP2 上，多个请求可以共用一个 TCP 连接，这称为多路复用。同一个请求和响应用一个流来表示，并有唯一的流 ID 来标识。 多个请求和响应在 TCP 连接中可以乱序发送，到达目的地后再通过流 ID 重新组建。</p></li><li><p>首部压缩<br>多次请求中，可能有很多数据都是重复的，HTTP/2 在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键－值对，传输时只需要传递索引值即可，对于相同的数据，不再通过每次请求和响应发送。</p></li><li><p>  服务器端推送<br>服务器根据页面内容，主动把页面需要的资源传给客户端，减少请求数。</p></li></ul><h3 id="静态资源走-CDN-引入"><a href="#静态资源走-CDN-引入" class="headerlink" title="静态资源走 CDN 引入"></a>静态资源走 CDN 引入</h3><p><strong>原理</strong>：当访问一个网站时，如果没有部署 CDN ，浏览器获取资源就是通过 DNS 解析得到 ip 后，向该 ip 地址请求资源；<br>如果该网站部署了 CDN ，那么就</p><ul><li>浏览器向本地 DNS 发出请求以获取 ip</li><li>本地 DNS 服务器依次向根域名服务器、顶级域名服务器、权限域名服务器发出请求，得到全局负载均衡系统（GSLB）的 ip 地址</li><li>本地 DNS 服务器再向 GSLB发出请求。</li><li>GSLB 会根据请求中携带的 ip 地址判断用户的位置，筛选出距离用户较近的本地负载均衡系统（SLB），并将该 SLB 的 ip 地址作为结果返回给本地 DNS 服务器。</li><li>本地 DNS 服务器将 SLB 的 ip 地址返回给浏览器，浏览器向 SLB 发出请求。</li><li>SLB 根据浏览器请求的资源和地址，选出最优的缓存服务器返回给浏览器。</li><li>浏览器再根据 SLB 发回的地址重定向到缓存服务器。</li><li>如果缓存服务器有浏览器需要的资源，就将资源返回给浏览器。如果没有，就老老实实向源服务器请求资源，再将资源发给浏览器以缓存在本地。</li></ul><p><strong>查看</strong>：执行以下命令查看用户与服务器之间经过的所有路由器：</p><pre class="line-numbers language-none"><code class="language-none"># linuxtraceroute baidu.com# windowstracert baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、页面渲染性能优化"><a href="#二、页面渲染性能优化" class="headerlink" title="二、页面渲染性能优化"></a>二、页面渲染性能优化</h2><p>页面要进行渲染，首先要先加载资源，那么优化便可分为<strong>资源加载位置</strong>、<strong>资源加载时机</strong>和<strong>资源渲染过程</strong>。</p><blockquote><p>资源加载位置：</p></blockquote><h3 id="css-文件放在-lt-head-gt-中"><a href="#css-文件放在-lt-head-gt-中" class="headerlink" title="css 文件放在 &lt;head&gt; 中"></a>css 文件放在 <code>&lt;head&gt;</code> 中</h3><p>优先使用外部文件样式，其次才是本文件的样式；</p><h3 id="js-文件放在-lt-body-gt-底部"><a href="#js-文件放在-lt-body-gt-底部" class="headerlink" title="js 文件放在 &lt;body&gt; 底部"></a>js 文件放在 <code>&lt;body&gt;</code> 底部</h3><p>也是优先使用外部脚本文件，其次才是本文件的脚本代码。</p><blockquote><p>资源加载时机：</p></blockquote><h3 id="使用预加载机制"><a href="#使用预加载机制" class="headerlink" title="使用预加载机制"></a>使用预加载机制</h3><p><strong>原理</strong>：在 html 加载时，会加载很多第三方资源，这些资源的优先级是不同的，一些重要资源需要提前进行获取，而一些资源可以延迟进行加载。我们可以使用 <strong>DNS 预解析</strong>，<strong>预加载</strong>，<strong>预获取</strong>，<strong>预连接</strong>，<strong>预渲染</strong>来管理页面资源的加载。</p><p><strong>使用</strong>：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- DNS 预解析 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//www.baidu.com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment">&lt;!-- 预加载，提前加载某些内容，可以通过 as 指定要加载的资源类型--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>preload<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://example.com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment">&lt;!-- 预获取，提前拉取指定的资源到缓存中 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://example.com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment">&lt;!-- 预连接，提前和指定服务器建立通信连接 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>preconnect<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://example.com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment">&lt;!-- 预渲染，提前渲染下一页的数据 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prerender<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://example.com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异步-script-标签"><a href="#异步-script-标签" class="headerlink" title="异步 script 标签"></a>异步 script 标签</h3><p><code>&lt;script&gt;</code> 标签有两个属性：<code>defer</code> 和 <code>async</code> ，可以控制文件的执行顺序。</p><ul><li>defer：异步加载文件，和 HTML 解析同步进行。文件加载完成之后，在 HTML 解析完成之后执行，效果类似于将代码放在 body 底部。</li><li>async：异步加载文件，和 HTML 解析同步进行。文件加载完成之后立即执行，不管 HTML 是否解析完成。</li></ul><h3 id="模块按需加载"><a href="#模块按需加载" class="headerlink" title="模块按需加载"></a>模块按需加载</h3><p>待补充……</p><h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><p><strong>概念</strong>：懒加载也叫延迟加载、按需加载，指的是在页面渲染时不一次性渲染所有图片，而是只加载在页面可视区内的图片。</p><p><strong>优点</strong>:</p><ul><li>减少无用资源的加载：使用一次性将所有图片加载出来，但用户可能只浏览一部分图片而已，那些没被浏览到的图片其实可以先不用渲染出来。</li><li>提升用户体验：一次性加载太多图片，可能需要等待的时间较长，这样就影响了用户体验，使用懒加载后，渲染压力就会变小很多。</li><li>防止加载过多图片而影响其他资源文件的加载。</li></ul><p><strong>原理</strong>：<br>给 <code>&lt;img&gt;</code> 标签定义一个 <code>data-src</code> 属性，赋值为图片地址，并将 <code>src</code> 属性赋值为 <code>&#39;&#39;</code> ，这样图片就渲染不出来了，当图片出现在页面可视区的时候，再将 <code>data-src</code> 的值赋给 <code>src</code> 即可完成懒加载。</p><p>注意：<code>data-src</code> 是自定义的，你也可以定义为 <code>data-xxx</code> 。</p><p>这里的难点在于怎么确定可视区域，有两种方法：</p><ul><li>方法一：使用原生 js<br>知识点：<br>（1）<code>window.innerHeight</code> 是浏览器可视区的高度（不包含浏览器地址栏、书签那块）<br>（2）<code>document.body.scrollTop || document.documentElement.scrollTop</code> 是浏览器滚动过的距离<br>（3）<code>imgs.offsetTop</code> 是图片元素顶部距离可视区顶部的高度（包括滚动条的距离）<br>（4）图片加载条件： 图片顶部到文档顶部的距离 &lt; 浏览器可视高度 + 浏览器滚动过的高度，也就是 <code>img.offsetTop &lt; window.innerHeight + document.body.scrollTop</code></li></ul><p>代码实现：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loading.gif<span class="token punctuation">"</span></span>  <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loading.gif<span class="token punctuation">"</span></span>  <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loading.gif<span class="token punctuation">"</span></span>  <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loading.gif<span class="token punctuation">"</span></span>  <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loading.gif<span class="token punctuation">"</span></span>  <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loading.gif<span class="token punctuation">"</span></span>  <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> imgs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">lozyLoad</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> scrollTop <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span><span class="token keyword">const</span> winHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> img<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>offsetTop <span class="token operator">&lt;</span> scrollTop <span class="token operator">+</span> winHeight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>src <span class="token operator">=</span> imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-src'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>window<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> <span class="token function">lozyLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>方法二：使用 <code>IntersectionObserver</code></li></ul><p>用法：<code>IntersectionObserver</code> 是浏览器原生提供的构造函数，接受两个参数：<code>callback</code>是可见性变化时的回调函数，<code>option</code>是配置对象（该参数可选）。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> io <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> option<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构造函数的返回值 <code>io</code> 是一个观察器实例，实例的<code>observe</code>方法可以指定观察哪个 DOM 节点。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 开始观察，参数是一个 DOM 节点对象</span>io<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 停止观察</span>io<span class="token punctuation">.</span><span class="token function">unobserve</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 关闭观察器</span>io<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要观察多个节点，就要多次调用这个方法。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">io<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>elementA<span class="token punctuation">)</span><span class="token punctuation">;</span>io<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>elementB<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>资源渲染过程</strong>：</p></blockquote><h3 id="减少重绘重排"><a href="#减少重绘重排" class="headerlink" title="减少重绘重排"></a>减少重绘重排</h3><h4 id="1-缓存-DOM"><a href="#1-缓存-DOM" class="headerlink" title="1. 缓存 DOM"></a>1. 缓存 DOM</h4><p><strong>原理</strong>：查询 DOM 比较耗时，因此在同一个节点需要多次查询的情况下，可以缓存 DOM 。</p><p><strong>使用</strong>：<code>const div = document.getElementById(&#39;div&#39;)</code></p><h4 id="2-减少-DOM-深度及-DOM-数量"><a href="#2-减少-DOM-深度及-DOM-数量" class="headerlink" title="2. 减少 DOM 深度及 DOM 数量"></a>2. 减少 DOM 深度及 DOM 数量</h4><p><strong>原理</strong>：HTML 中标签元素越多，标签的层级越深，浏览器解析 DOM 并绘制到浏览器中所花的时间就越长。</p><h4 id="3-DOM-读写分离"><a href="#3-DOM-读写分离" class="headerlink" title="3. DOM 读写分离"></a>3. DOM 读写分离</h4><p>不要两个读操作之间，加入一个写操作。</p><p><strong>原理</strong>：当 DOM 变动和样式变动时，会触发页面的重新渲染。但浏览器会尽量把所有的变动集中在一起，排成一个队列，然后一次性执行，尽量避免多次重新渲染。这时如果在修改样式中间进行了其他不是修改样式的操作，就会触发多次重排。</p><h4 id="4-批量操作-DOM"><a href="#4-批量操作-DOM" class="headerlink" title="4. 批量操作 DOM"></a>4. 批量操作 DOM</h4><p><strong>原理</strong>：在元素脱离文档流之后，对该元素进行的多次操作，不会触发回流。等操作结束后，再将元素放回标准流即可达到效果。</p><p><strong>脱离文档流的方法</strong>：</p><ul><li>①隐藏元素；</li><li>②使用文档碎片；<ul><li><strong>原理</strong>：使用 <code>DocumentFragment</code> 对象，在内存中操作 DOM 不会引发页面重排。</li></ul></li><li>③拷贝节点；</li><li>④<code>position</code> 属性设置为 <code>absolute</code> 或 <code>fixed</code> 。</li></ul><p><strong>实例</strong>：对 DOM 节点进行多次操作：给每个 <code>ul</code> 新增一个 <code>li</code> ，要使其不会触发回流</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 原来：</span><span class="token keyword">var</span> oUl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> oLi <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oLi<span class="token punctuation">.</span>innerText <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    oUl<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>oLi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 修改方案1：隐藏元素</span><span class="token keyword">var</span> oUl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oUl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> oLi <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oLi<span class="token punctuation">.</span>innerText <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    oUl<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>oLi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>oUl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>        <span class="token comment">// 修改方案2：使用文档碎片</span><span class="token keyword">var</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> oLi <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oLi<span class="token punctuation">.</span>innerText <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    fragment<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>oLi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>oUl<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 修改方案3：拷贝节点</span><span class="token keyword">var</span> newUl <span class="token operator">=</span> oUl<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> oLi <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oLi<span class="token punctuation">.</span>innerText <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    newUl<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>oLi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>oUl<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>newUl<span class="token punctuation">,</span> oUl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 修改方案4：position 属性为 absolute 或 fixed</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-合并修改样式"><a href="#5-合并修改样式" class="headerlink" title="5. 合并修改样式"></a>5. 合并修改样式</h4><p><strong>原理</strong>：如果要给一个节点操作多个 css 属性，而每修改一种样式都会造成回流，因此尽可能将多次操作合并成一个。</p><p><strong>实例</strong>：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 原来：</span><span class="token keyword">var</span> oDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> oDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>padding <span class="token operator">=</span> <span class="token string">'5px'</span><span class="token punctuation">;</span> oDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">'1px solid #000'</span><span class="token punctuation">;</span> oDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>margin <span class="token operator">=</span> <span class="token string">'5px'</span><span class="token punctuation">;</span><span class="token comment">// 修改方案1：使用 style 的 cssText</span><span class="token keyword">var</span> oDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> oDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">=</span> <span class="token string">'padding:5px; border:1px solid #000; margin:5px'</span><span class="token punctuation">;</span><span class="token comment">// 修改方案2：将这几个样式定义给一个类名，然后给标签添加该类名</span><span class="token punctuation">.</span>pbm<span class="token punctuation">&#123;</span>    padding<span class="token operator">:</span><span class="token number">5</span>px<span class="token punctuation">;</span>    border<span class="token operator">:</span><span class="token number">1</span>px solid #<span class="token number">000</span><span class="token punctuation">;</span>    margin<span class="token operator">:</span><span class="token number">5</span>px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> oDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oDiv<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'pbm'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-避免使用-table-布局"><a href="#6-避免使用-table-布局" class="headerlink" title="6. 避免使用 table 布局"></a>6. 避免使用 table 布局</h4><p>一个小的改动可能会使整个<code>table</code>进行重新布局</p><h4 id="7-给图片指定大小"><a href="#7-给图片指定大小" class="headerlink" title="7. 给图片指定大小"></a>7. 给图片指定大小</h4><p><strong>原理</strong>：因为 <code>img</code> 元素是内联元素，所以在加载图片后悔改变宽高，因此最好在渲染前就指定图片的大小，或者让其脱离文档流。</p><h4 id="8-合理使用硬件加速（GPU-加速）"><a href="#8-合理使用硬件加速（GPU-加速）" class="headerlink" title="8. 合理使用硬件加速（GPU 加速）"></a>8. 合理使用硬件加速（GPU 加速）</h4><p>我们知道，浏览器页面的绘制是由 GPU 完成的，因此减少重排重绘也可以从 GPU 缓存 这方面入手。例如：把那些会发生大量重排重绘的元素提取出来，单独触发一个渲染层，那么这个元素就不会影响其它层一块重绘了。</p><p><strong>创建渲染层的方式</strong>：</p><p>满足以下任意情况便会创建层：</p><ul><li><code>will-change</code> 设置为 <code>opacity、transform、top、left、bottom、right</code>（推荐）</li><li><code>&lt;video&gt;</code> 元素</li><li><code>&lt;canvas&gt;</code> 元素</li><li>css 3D  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>250px<span class="token punctuation">,</span>250px<span class="token punctuation">,</span>250px<span class="token punctuation">)</span><span class="token function">rotate3d</span><span class="token punctuation">(</span>250px<span class="token punctuation">,</span>250px<span class="token punctuation">,</span>250px<span class="token punctuation">,</span>-120deg<span class="token punctuation">)</span><span class="token function">scale3d</span><span class="token punctuation">(</span>0.5<span class="token punctuation">,</span> 0.5<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>css 滤镜</li><li>混合插件(如 Flash)</li><li>元素有一个包含复合层的后代节点(换句话说，就是一个元素拥有一个子元素，该子元素在自己的层里)</li><li>元素有一个z-index较低且包含一个复合层的兄弟元素(换句话说就是该元素在复合层上面渲染)</li></ul><p><strong>最常用的方法</strong>，就是给某个元素添加下面的样式：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-moz-transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-ms-transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-o-transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 在 Chrome and Safari中可能会有页面闪烁的效果，下面的代码可以修复此情况：*/</span><span class="token property">-webkit-backface-visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token property">-moz-backface-visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token property">-ms-backface-visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token property">backface-visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token property">-webkit-perspective</span><span class="token punctuation">:</span> 1000<span class="token punctuation">;</span><span class="token property">-moz-perspective</span><span class="token punctuation">:</span> 1000<span class="token punctuation">;</span><span class="token property">-ms-perspective</span><span class="token punctuation">:</span> 1000<span class="token punctuation">;</span><span class="token property">perspective</span><span class="token punctuation">:</span> 1000<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在webkit内核的浏览器中，另一个行之有效的方法是：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-moz-transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-ms-transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h3><p>待补充……</p><h2 id="三、其他"><a href="#三、其他" class="headerlink" title="三、其他"></a>三、其他</h2><h3 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h3><p><strong>原理</strong>：在短时间内对一个元素进行多次的重复操作，可以设置防抖和节流，防止该操作的频繁触发。</p><p><strong>实现</strong>：</p><ul><li><p>防抖：<br>基础版：每次触发事件后都会等过了指定的延迟时间才执行 <code>func</code> 函数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> timeour <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进阶版：事件触发的时候马上执行 <code>func</code> 函数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> immediate</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 触发后立即执行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果两次触发的间隔小于 wait，此时 timeout 还不为 null，不执行 func</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// wait 时间后把 timeouut 重新设置为 null，表示可以再次执行 func 了</span>            timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>节流：<br>定时器版</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间戳版</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> previous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">functoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> previous <span class="token operator">>=</span> wait<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            previous <span class="token operator">=</span> now<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两者合并版</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> previous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">functoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>        <span class="token keyword">let</span> remaining <span class="token operator">=</span> wait <span class="token operator">-</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> previous<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 为了第一次触发能够马上执行（时间戳思想）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 需要先清空定时器，否则会重复执行</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>                timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            previous <span class="token operator">=</span> now<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 为了最后一次触发还能够再执行一次（定时器思想）</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                    timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    previous <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> remaining<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="使用-requestAnimationFrame-替代-setTimeout-和-setInterval"><a href="#使用-requestAnimationFrame-替代-setTimeout-和-setInterval" class="headerlink" title="使用 requestAnimationFrame 替代 setTimeout 和 setInterval"></a>使用 <code>requestAnimationFrame</code> 替代 <code>setTimeout</code> 和 <code>setInterval</code></h3><p>希望在每一帧刚开始的时候对页面进行更改，目前只有使用 requestAnimationFrame 能够保证这一点。使用 setTimeout 或者 setInterval 来触发更新页面的函数，该函数可能在一帧的中间或者结束的时间点上调用，进而导致该帧后面需要进行的事情没有完成，引发丢帧。<br>当你准备更新动画时你应该调用此方法。这将使浏览器在下一次重绘之前调用你传入给该方法的动画函数(即你的回调函数)。</p><p><code>window.requestAnimationFrame()</code> 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。</p><p><strong>注意：若你想在浏览器下次重绘之前继续更新下一帧动画，那么回调函数自身必须再次调用<code>window.requestAnimationFrame()</code></strong></p><p><strong>语法</strong>：<code>window.requestAnimationFrame(callback);</code></p><p><strong>参数</strong>：<code>callback</code> 表示下一次重绘之前更新动画帧所调用的函数(即上面所说的回调函数)。</p><p><strong>返回值</strong>：一个 <code>long</code> 整数，请求 ID ，是回调列表中唯一的标识。用于传值给 <code>window.cancelAnimationFrame()</code> 以取消回调函数。</p><p><strong>范例</strong>：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'some-element-you-want-to-animate'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> start<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token parameter">timestamp</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>    start <span class="token operator">=</span> timestamp<span class="token punctuation">;</span>  <span class="token keyword">const</span> elapsed <span class="token operator">=</span> timestamp <span class="token operator">-</span> start<span class="token punctuation">;</span>  <span class="token comment">//这里使用`Math.min()`确保元素刚好停在200px的位置。</span>  element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">'translateX('</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">*</span> elapsed<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px)'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>elapsed <span class="token operator">&lt;</span> <span class="token number">2000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 在两秒后停止动画</span>    window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 八股文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>近期安排*一点感想</title>
      <link href="/2022/04/28/jin-qi-an-pai-yi-dian-gan-xiang/"/>
      <url>/2022/04/28/jin-qi-an-pai-yi-dian-gan-xiang/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记事时间点：2022.04.28 大二下 星期四 晴</p></blockquote><p>从 2 月开学我就在准备面试，希望能找到大厂的前端暑期实习，但事与愿违，从一开始觉得“准备好了”，到认清现实，不过是经历了两场面试，一场是北京的一家小厂面试，一场是我和我哥的模拟面试，就让我知道自己还有不足之处，于是我开始闭关修炼了。</p><p>一个月后，这时已经 4 月了，我觉得自己真的比之前的我进步了，就开始海投简历，牛客、拉勾、实习僧，我都投了很多，但 2 个星期过去，到了 4 月中旬，还是没什么消息，就算简历过了初筛，也没有后续，加上今年互联网寒冬，我担心 hc 不多了，心里有一点点小焦虑。</p><blockquote><p>话虽这么说，这里我还是想吐槽一下我自己，期间我还是有收到 4 个未接来电，但因为手机给这几个电话标识了“广告推销”，我以为无关紧要，就没去接，也由于我手机静音，导致我不知道有人来电，后来想想，才发现那几个电话有可能是要约面的，后知后觉的话，忍不住一阵惋惜。有人说就算不接，企业那边也会再换个时间打过来，但我也没收到后续的来电，想到这里，我还是要懊悔一番啊啊啊…</p></blockquote><p>小插曲过后，我思考为什么投了简历没消息，难道仅仅因为今年行情不好？难道仅仅因为我是 24 届的？但也不对啊，我看见还是有同为 24 届的小伙伴能找到实习，有的甚至已经收到 offer 了，所以问题应该出在自身。于是我理所淡然的把方向瞄准了简历，发现果然还是有问题，参考了一些建议之后，我更新了我的简历，又继续在招聘网站上海投。效果很明显，投完之后的 3 天内，就有 3 家公司来约面，其中就有字节。很高兴终于有面试机会了，也不管字节是我面的第一家大厂，应该先拿其他公司攒攒面试经验了，心里想着都准备了这么久了，不管是好是坏，都得先面一面，不然都不知道这段时间的准备到了何种程度。抱着这样的心态，我就准备字节面试了。</p><p>昨天刚面完字节，心里没有什么太大的波澜，总体来说还是很平静的，面试官问的问题，我大都能接得上，不足的是二叉树的算法题没写出来（题很简单，但那时没发挥好，面完后自己做能做出来555）、跨域没答好、以及一些问题答得不利索，最后面试官的评价是知识点没串联起来，这个面评不算好，因此我也只能安静等待最后的结果了，希望能过一面吧。</p><p>由于担心字节不能过一面，我也有点焦虑了，开始有摆烂的想法了，但这想法只是一瞬，我知道自己还是很多事要做，那便是：英语四级、驾照、概率论期末考试、计组考试、实习（还没到最后，还是要努力的），事情很多，但留给我的时间不多了，本来之前是想等搞定实习之后，就将重心放在英语四级和驾照上，但无奈自己没法拿到 offer ，只能改变策略，每天抽时间将各个任务慢慢推进了。</p><p>事情真多啊，感觉自己变得忙了，最近也没有打电话给家里，老妈有点生气了，但其实我只是因为没搞定实习感到烦恼而已，没有欢快的情绪去打电话。除此之外，还有一个原因，就是我想等拿到大厂的实习 offer 后，再开开心心地去跟他们报喜，跟他们说你们的儿子是有努力学习的，也能找到实习的。抱着这样的想法，慢慢演变成了没拿到实习就不打电话回家，因为这样的想法，我疏于和家里人沟通，被抱怨我也可以理解。</p><p>怎么说呢，我一直都知道自己这样做不对，不管因为什么原因，自己都不应该长时间不跟家里联系，这样会让家里人不开心，他们不知道我究竟在做什么（因为没打电话跟他们说说最近的生活状况，他们当然不知道了），可能在他们看来，没打电话就是没打电话，不管因为什么原因。其实这样说也对，就算再忙，打个电话的时间总还是有的，是想不想、愿不愿意的问题，没打就说明不想、不愿意，仅此而已。</p><p>但话说回来，我虽然清楚这一点，但就是没有要常打电话的念头，这可能跟我的性格有关，孤僻、固执，甚至“无情”，这样一个性格的人，还真是难相处啊，可能在经历了社会的毒打之后，我才会想去跟家里人倾诉，那时候的我，会无比顾家吧。</p><p>对了，今天还有一件开心的事，晚上有一节软件工程的课，刚走到教室，我就看到了我爸的语音通话，原来是我爸打电话问我五一要不要回家，我真的贼开心，因为我爸几乎没有像这样打电话过来直接表达对我的关心。我觉得天底下的父亲，更多的是一种无言的爱，他们不会直接地表达对儿子的爱，而是会在背后默默付出，苦痛都自己担着，又默默给与孩子关心，他们会想得更多，因为是一家之主，要考虑到现实的处境，是偏向理性的一种思考，正因为这种理性，他们往往不会感性地表达自己的情感。所以我才会对我爸的这个电话感到开心和意外，这是今天最开心的一件事了！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入探究“在浏览器输入URL到渲染页面”（上）过程剖析</title>
      <link href="/2022/04/05/shen-ru-tan-jiu-zai-liu-lan-qi-shu-ru-url-dao-xuan-ran-ye-mian-shang-guo-cheng-pou-xi/"/>
      <url>/2022/04/05/shen-ru-tan-jiu-zai-liu-lan-qi-shu-ru-url-dao-xuan-ran-ye-mian-shang-guo-cheng-pou-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是一道十分经典的面试题，涉及到计网、操作系统、web 的一系列知识，不管是深度还是广度，都能够很好地考察面试者的水平，相信很多程序员多多少少都接触到这道题，网上也有很多非常好的文章对此作出了解释，但能深入并且扩展开来的，少之又少。今天笔者会<strong>以面试者的角度</strong>来回答这个问题，逐步扩展开来，详细讲解这道题，既作为自己面试的准备，也帮助大家能更加深入的理解到其中的奥秘（原来我们再日常不过的操作，还隐藏了这么多技术，而这也是前端的神奇所在啦），预计在真实面试中可以讲 <code>15</code> 分钟左右。</p><p>关于这道经典的面试题，笔者准备写三篇文章来对知识点进行深度和广度的挖掘：</p><ul><li>深入探究“在浏览器输入URL到渲染页面”（上）过程剖析</li><li><a href="https://hcyety.github.io/2022/04/29/shen-ru-tan-jiu-zai-liu-lan-qi-shu-ru-url-dao-xuan-ran-ye-mian-zhong-xing-neng-you-hua/">深入探究“在浏览器输入URL到渲染页面”（中）性能优化</a></li><li><a href="">深入探究“在浏览器输入URL到渲染页面”（下）模拟面试</a><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1>我们知道会有这么一个过程：</li><li>输入 URL 地址：在浏览器地址栏输入网站连接</li><li>DNS 解析：将域名解析成 IP 地址</li><li>TCP 连接：浏览器与服务器进行三次握手</li><li>发送 HTTP 请求</li><li>服务器处理请求并返回 HTTP 报文</li><li>浏览器解析渲染页面</li><li>断开连接：TCP 四次挥手</li></ul><p>这个过程不能说错，但笔者觉得不够全面，因为在这背后还有更多的技术在默默支撑着这些功能的实现，我们一起来探究下。</p><blockquote><p>先简述总体过程：<br><strong>一、用户输入</strong></p></blockquote><ul><li>用户在浏览器地址栏输入 url 并回车</li></ul><p><strong>二、URL 请求过程</strong></p><ul><li>浏览器处理用户输入，把处理后的 url 发送至网络进程</li><li>网络进程收到 url 请求后查看本地是否缓存了该资源，如果有则将该资源返回给浏览器进程</li><li>如果没有，网络进程向服务器发起 HTTP 请求（网络请求）以请求资源：<ul><li>DNS 解析：将域名解析成 IP 地址</li><li>如果请求协议是HTTPS，那么还需要建立TLS连接</li><li>利用 ip 地址和服务器建立 TCP 连接：浏览器与服务器进行三次握手</li><li>浏览器端构建请求头信息，并将其发送给服务器</li><li>服务器处理请求并返回 HTTP 报文给网络进程</li><li>处理状态码</li></ul></li></ul><p><strong>三、断开连接</strong></p><ul><li>TCP 四次挥手</li></ul><p><strong>四、浏览器进程开始准备渲染进程</strong></p><ul><li>浏览器进程检查当前url是否和之前打开的渲染进程根域名是否相同，如果相同，则复用原来的进程，如果不同，则开启新的渲染进程</li></ul><p><strong>五、提交文档</strong></p><ul><li>渲染进程准备好之后，需要先向渲染进程提交页面数据，我们称之为提交文档阶段</li></ul><p><strong>六、渲染阶段</strong></p><ul><li>渲染进程接收完文档信息之后，便开始解析页面和加载子资源，完成页面的渲染。</li></ul><blockquote><p>下面来详述这些过程的具体细节：</p></blockquote><h2 id="一、用户输入"><a href="#一、用户输入" class="headerlink" title="一、用户输入"></a>一、用户输入</h2><p>当用户在地址栏中输入信息时，地址栏会判断该信息是文字还是路径。</p><ul><li>如果是文字，地址栏会使用浏览器默认的搜索引擎，来合成新的带有该文字的 url。</li><li>如果是路径（通常用户会输入如 <code>baidu.com</code> 的路径），那么地址栏若判断其符合 URL 规则，就把这段路径加上协议，合成完整的 url，就变成了 <code>https://www.baidu.com</code> 。</li></ul><p>当用户完成输入后并回车之后，浏览器便进入下图的状态：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bff1551f30b84f6aa350379a3bc554bb~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>从图中可以看出，标签页上的图标进入了加载状态，但此时页面仍是之前的页面，并没有立即替换成百度的首页。这是因为需要等待提交文档阶段，页面内容才会被替换。</p><p>而提交文档需要获得服务器返回所请求的文件信息，才能进行下一步操作。</p><h2 id="二、URL-请求过程"><a href="#二、URL-请求过程" class="headerlink" title="二、URL 请求过程"></a>二、URL 请求过程</h2><p>用户已经完成了他的输入操作，接下来便进入了页面资源请求过程。这时，浏览器进程通过进程间通信（<code>IPC</code>）把 url 请求发送给网络进程，网络进程接收到 URL 请求后会查看本地缓存。</p><blockquote><p>简单说一下：<br>浏览器进程主要负责用户交互、子进程管理和文件储存等功能。<br>网络进程是面向渲染进程和浏览器进程等提供网络下载功能。<br>渲染进程的主要职责是把从网络下载的HTML、JavaScript、CSS、图片等资源解析为可以显示和交互的页面。  </p></blockquote><p>这个我们在前面简述总流程时已经说过了，但是所谓的“查看本地缓存”是怎么个查看法，缓存又是存到何处，我们来探究下其中细节：</p><h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><p>所谓“查看本地缓存”，其实就是我们常听到的浏览器缓存。</p><p>浏览器缓存有两种，分别是 <strong>强缓存</strong> 和 <strong>协商缓存</strong> 。</p><p>浏览器在发送请求时，根据请求头的 <code>Expires</code> 和 <code>Cache-Control</code> 判断是否命中强缓存策略，如果命中，直接从缓存获取资源，不会发送请求了；如果没有命中，发送请求，根据请求头 <code>Last-Modified</code> 和 <code>Etag</code> 判断是否命中协商缓存，如果命中，直接从缓存获取资源，如果没有命中，则直接从服务端获取资源。</p><h4 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h4><p>强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程。</p><p>怎么判断是否命中强缓存呢？有三种情况：</p><ul><li>①第一次请求，不存在缓存结果和缓存标识，这时强缓存失效，直接向服务器发送请求。</li><li>②存在缓存结果和缓存标识，但已经失效，这时强缓存失败，使用协商缓存。</li><li>③存在缓存结果和缓存标识，且尚未失效，这时强缓存生效，直接返回该结果。</li></ul><p>怎么做到强缓存呢？可以通过设置两种 HTTP Header 实现：<code>Expires</code> 和 <code>Cache-Control</code>（<code>Cache-Control</code> 的优先级高于 <code>Expires</code>）。</p><ul><li><code>Expires</code> 是 HTTP/1.0 控制网页缓存的字段，其值为服务器返回该请求结果缓存的到期时间。也就是说，<code>Expires = max-age + 请求时间</code> ，需要和 <code>Last-modified</code> 结合使用。<blockquote><p><code>Expires</code> 控制缓存的原理是使用客户端的时间与服务端返回的时间作对比，那么如果①客户端的时间被人为修改，或者②由于时区不同服务端的时间不准确，那么强缓存会直接失效。因此到了 HTTP/1.1 <code>Expire</code> 已经被 <code>Cache-Control</code> 替代，这也是为什么 <code>Expires</code> 和 <code>Cache-Control</code> ，优先级却低于 <code>Cache-Control</code> 的原因。</p></blockquote></li><li><code>Cache-Control</code> 是 HTTP/1.1 控制网页缓存的字段，主要取值为：<ul><li><code>public</code>：默认值，所有内容都将被缓存（浏览器和代理服务器都可以缓存，并且在多用户间共享）</li><li><code>private</code>：所有内容只有客户端可以缓存（不能在用户间共享）</li><li><code>no-cache</code>：客户端缓存内容，但是否使用缓存则需要经过协商缓存来验证决定</li><li><code>no-store</code>：所有内容都不会被缓存，既不强缓存，也不协商缓存</li><li><code>max-age=xxx</code>：单位为 <code>s</code>，缓存内容将在 xxx 秒后失效</li><li><code>s-maxage</code>：单位为 <code>s</code>，同 <code>max-age</code>，只用于共享缓存（比如CDN缓存）。<ul><li>比如，当 <code>s-maxage=60</code> 时，在这 <code>60</code> 秒中，即使更新了 CDN 的内容，浏览器也不会进行请求。也就是说 <code>max-age</code> 用于普通缓存，而 <code>s-maxage</code> 用于代理缓存。如果存在 <code>s-maxage</code>，则会覆盖掉 <code>max-age</code> 和 <code>Expires</code> header。</li></ul></li><li><code>must-revalidate</code>：指定如果页面是过期的，则去服务器进行获取。<blockquote><p>注意：规则可以同时多个</p></blockquote></li></ul></li></ul><p>强缓存不会向服务器发送请求，直接从缓存中读取资源，在 chrome 控制台的 Network 选项中可以看到该请求返回 <code>200</code> 的状态码，并且 <code>Size</code> 显示 <code>from disk cache</code>（磁盘缓存） 或 <code>from memory cache</code>（内存缓存） 。</p><p>先加载一次页面，然后刷新一下就可以在控制台看到哪里缓存了：<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5cb568fdb4814245bce9d2c160e7eaaf~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>那问题来了：什么时候会使用 <code>from disk cache</code>，什么时候会使用 <code>from memory cache</code> 呢？<br>答案是先 <code>memory</code> 再 <code>disk</code> ，原因如下：</p><ul><li><code>from memory cache</code> 有两个特点，分别是快速读取和时效性。<ul><li>快速读取：内存缓存会将编译解析后的文件，直接存入该进程的内存中，占据该进程一定的内存资源，以方便下次运行使用时的快速读取。</li><li>时效性：一旦该进程关闭，则该进程的内存则会清空。</li></ul></li><li><code>from disk cache</code> 直接将缓存写入硬盘文件中，读取缓存需要对该缓存存放的硬盘文件进行I/O操作，然后重新解析该缓存内容，读取复杂，速度比内存缓存慢。</li><li>在浏览器中，浏览器会在 js 和图片等文件解析执行后直接存入内存缓存中，那么当刷新页面时只需直接从内存缓存中读取<code>(from memory cache)</code>；而 css 文件则会存入硬盘文件中，所以每次渲染页面都需要从硬盘读取缓存<code>(from disk cache)</code>。</li></ul><h4 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h4><p>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程。</p><p>怎么判断是否命中协商缓存呢？有两种情况：</p><ul><li>①协商缓存生效，返回 <code>304</code> ，表示该资源无更新。</li><li>②协商缓存失效，返回 <code>200</code> 和请求结果，表示该资源更新了。</li></ul><p>怎么做到协商缓存呢？也可以通过设置两种 HTTP Header 实现：<code>Last-Modified/If-Modified-Since</code> 和 <code>Etag/If-None-Match</code> （<code>Etag/If-none-match</code> 的优先级高于 <code>Last-Modified/If-Modified-Since</code>）。</p><ul><li><code>Last-Modified/If-Modified-Since</code><ul><li><code>Last-Modified</code> 是服务器响应请求时，返回该资源文件在服务器最后被修改的时间。</li><li><code>If-Modified-Since</code> 是客户端再次发起该请求时，携带上次请求返回的 <code>Last-Modified</code> 值。<br>服务器收到请求，发现请求头含有 <code>If-Modified-Since</code> ，会根据该字段值与该资源在服务器的最后被修改时间做比较：若服务器的资源最后被修改时间大于 <code>If-Modified-Since</code> 的字段值，则重新返回资源，状态码为 <code>200</code> ；否则返回 <code>304</code> ，代表资源无更新。</li></ul></li><li><code>Etag/If-None-Match</code> <ul><li><code>Etag</code> 是服务器响应请求时，返回当前资源文件的一个唯一标识（由服务器生成一段 hash 字符串）</li><li><code>If-None-Match</code> 是客户端再次发起该请求时，携带上次请求返回的唯一标识 <code>Etag</code> 值，通过此字段告诉服务器该资源上次请求返回的唯一标识值。<br>服务器收到请求，发现该请求头中含有 <code>If-None-Match</code> ，会根据该字段值与该资源在服务器的 <code>Etag</code> 值作对比：若发现一致则返回 <code>303</code> ，代表资源无更新，继续使用缓存文件；不一致则重新返回资源文件，状态码为 <code>200</code> 。</li></ul></li></ul><h4 id="浏览器缓存总结"><a href="#浏览器缓存总结" class="headerlink" title="浏览器缓存总结"></a>浏览器缓存总结</h4><p>强制缓存优先于协商缓存进行，若强制缓存(<code>Expires</code> 和 <code>Cache-Control</code>)生效则直接使用缓存，若不生效则进行协商缓存(<code>Last-Modified / If-Modified-Since</code> 和 <code>Etag / If-None-Match</code>)，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，重新获取请求结果，再存入浏览器缓存中；生效则返回 <code>304</code> ，继续使用缓存。</p><p>图解：<img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b8013b5d62c948cea82bef06418f4548~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><blockquote><p>如果你想亲手操作浏览器缓存，体会其中奥妙，<a href="https://segmentfault.com/a/1190000017962411#item-6">这篇文章</a> 可以助你一臂之力 ^_^</p></blockquote><p>到这里，“查看本地缓存”就结束了，如果仍然需要向服务器请求资源的话，就需要先进行下面的操作了。</p><h3 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h3><p>要向域名所在服务器请求资源，首先当然得知道这个域名的 ip 地址是什么，才可以发起请求。关于这个 ip 地址，计算机会先在本地进行查找，这里会分成三小步：</p><ul><li>先到浏览器的 DNS 缓存中查询是否有对应记录，如有则直接返回 ip ，完成解析，如果没有则下一步；</li><li>判断软件或浏览器是否有进行域名直接查询，如果有的话，会直接连到软件服务商提供的 DNS 服务器上，并返回 ip ；如果没有，则继续查询操作系统的缓存，如有缓存则直接返回 ip ，如果没有则下一步；</li><li>查看本地 <code>host</code> 文件（因为 <code>hosts</code> 文件会建立域名到 ip 地址的绑定关系），比如 <code>windows</code> 的 <code>host</code> 文件一般位于 <code>“C:\Windows\System32\drivers\etc”</code> ，如果这里也没有的话就需要到本地 DNS 服务器上查找了。<blockquote><p>如果至此还没有命中域名，这时浏览器才会向本地 DNS 服务器发起一个请求来解析这个域名（题外话：通常本地域名服务器在你的城市的某个角落，距离不会很远，一般都会缓存域名解析结果，大约 80% 的域名解析到这里就完成了）。<br>提一嘴：DNS 域名服务器一般分3种，分别是根域名服务器（.）、顶级域名服务器（.com、.cn、.net 等）、权限域名服务器（xxx.com、xxx.cn、xxx.net 等）。</p></blockquote></li><li>查询 DNS 请求到达本地 DNS 服务器之后，本地 DNS 服务器会首先查询它自己的缓存记录，如果缓存中有此条记录，就可以直接返回结果。如果没有，本地 DNS 服务器还要向根域名服务器进行查询【由本地 DNS 服务器代替浏览器发起这个请求】。</li><li>根域名服务器没有记录具体的域名和 ip 地址的对应关系，它会返回域名的顶级域名服务器的地址，让本地 DNS 服务器去这个地址获取 ip 。</li><li>于是本地 DNS 服务器得到新的地址后，向顶级域名服务器发出请求。顶级域名服务器收到请求，会返回权威域名服务器的地址，让本地 DNS 服务器其这个地址获取 ip 。</li><li>于是本地 DNS 服务器得到新的地址后，向权限域名服务器发出请求。权限域名服务器收到请求，在自己的缓存表中发现了该域名和 ip 地址的对应关系，就将 ip 地址返回给本地 DNS 服务器。</li><li>本地 DNS 服务器将获取到与域名对应的 ip 地址返回给客户端，并且将域名和 ip 地址的对应关系保存在缓存中，以备下次别的用户查询时使用。</li><li>这样，DNS 解析就完成了。</li></ul><p>这样解释可能比较抽象，也不太容易懂，我们来看个栗子：<br>用户输入的 url 为 <code>https://www.baidu.com/</code> ，这里假设本地缓存无效，浏览器直接向本地 DNS 服务器发起域名解析请求。</p><ul><li>浏览器发送带有 url 的请求，询问本地 DNS 服务器：我这个域名的 ip 是什么？</li><li>本地 DNS 服务器：咱也不知道啊，我帮你问问吧，待会把结果告诉你。</li><li>本地 DNS 服务器发送带有 url 的请求，询问根服务器：这个域名的 ip 你知道吗？</li><li>根域名服务器：我给你 <code>.com</code> 顶级域名服务器的地址，你去问问它知不知道吧。</li><li>本地 DNS 服务器拿到 <code>.com</code> 顶级域名服务器的地址，便发起请求，询问 <code>.com</code> 顶级域名服务器：这个域名的 ip 你知道吗？</li><li><code>.com</code> 顶级域名服务器：我给你 <code>baidu.com</code> 权限域名服务器的地址，你去问问它知不知道吧。</li><li>本地 DNS 服务器拿到 <code>baidu.com</code> 权限域名服务器的地址，便发起请求，询问 <code>baidu.com</code> 权限域名服务器：这个域名的 ip 你知道吗？</li><li><code>baidu.com</code> 权限域名服务器：我找找看哈，是 <code>1.2.3.4</code> ，诺，给你。</li><li>本地 DNS 服务器拿到 ip 后，将其给了浏览器：我问到了 ip 了，这就是了，你拿去吧。</li><li>浏览器：好的，我把它存起来一段时间，这段时间就可以不用麻烦你了。</li></ul><p>这样比较好理解一些有木有，还是不行的话可以看下图解：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c4ed548b044242beb7b2113e657baad1~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><blockquote><p>关于 DNS 解析的 TTL 参数：<br>购买域名后，我们在配置 DNS 解析的时候，有一个参数常常容易忽略，就是 DNS 解析的 TTL 参数（Time To Live）。TTL 这个参数告诉本地 DNS 服务器，域名缓存的最长时间。<br>用阿里云解析来举例，阿里云解析默认的 TTL 是 10 分钟，10 分钟的含义是，本地 DNS 服务器对于域名的缓存时间是 10 分钟，10 分钟之后，本地 DNS 服务器就会删除这条记录，删除之后，如果有用户访问这个域名，就要重复一遍上述复杂的流程。<br>其实，如果网站已经进入稳定发展的状态，不会轻易更换 IP 地址，我们完全可以将 TTL 设置到协议最大值，即24小时。带来的好处是，让域名解析记录能够更长时间的存放在本地DNS服务器中，以加快所有用户的访问。</p></blockquote><blockquote><p>推荐阅读：<a href="https://mp.weixin.qq.com/s?__biz=MzI0NDc3ODE5OQ==&mid=2247484407&idx=1&sn=44688d37144e4b65d59bf37a90945f0a&scene=21#wechat_redirect">超详细 DNS 协议解析</a></p></blockquote><h3 id="TCP-三次握手"><a href="#TCP-三次握手" class="headerlink" title="TCP 三次握手"></a>TCP 三次握手</h3><p>DNS 解析完成之后，浏览器已经知道了要请求域名的 ip 地址，可以建立向该地址建立连接了：<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1e115e67abf4225b5e3c18920c8fe14~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ul><li><p>一开始客户端和服务器都处于 <code>CLOSED</code> 状态。然后服务器开始监听某个端口，并进入 <code>LISTEN</code> 状态。</p><blockquote><p><code>CLOSED</code>：没有任何连接状态<br><code>LISTEN</code>：侦听来自远方 TCP 端口的连接请求</p></blockquote></li><li><p>客户端主动发起连接，开始<strong>第一次握手</strong>：客户端向服务器发送 <code>SYN</code> 报文（<code>SYN = 1</code>，表明这是一个 TCP 连接请求报文段），并指明客户端的初始化序列号 <code>seq = x</code> （表示本报文段所发送的数据的第一个字节的序号）。客户端进入 <code>SYN-SENT</code> 状态，等待服务器的确认。</p><blockquote><p><code>SYN-SENT</code> ：同步已发送状态，在发送连接请求后等待匹配的连接请求</p></blockquote></li><li><p>服务器收到客户端的 <code>SYN</code> 报文，如果同意建立连接，就开始<strong>第二次握手</strong>：服务器发送 <code>SYN + ACK</code> 报文作为应答（<code>SYN = 1, ACK = 1</code>，表明这是一个 TCP 连接请求确认报文段），并指定自己的初始化序列号 <code>seq = y</code> （作为 TCP 服务器进程所选择的初始序号），同时把客户端的 <code>seq + 1</code> 作为确认号 <code>ack</code> 的值，即 <code>ack = x + 1</code> （表示已经收到了客户端发来的 <code>SYN</code> 报文，希望收到的下一个数据的第一个字节的序号是 <code>x + 1</code> ）。服务器进入 <code>SYN-RCVD</code> 状态。</p><blockquote><p><code>SYN-RCVD</code>：在收到和发送一个连接请求后等待对连接请求的确认</p></blockquote></li><li><p>客户端收到服务器响应的 <code>SYN</code> 报文之后，开始<strong>第三次握手</strong>：客户端发送 <code>ACK</code> 报文（<code>ACK = 1</code> ，表明这是一个普通的 TCP 确认报文段），把服务器的 <code>seq + 1</code> 作为 <code>ack</code> 的值，即 <code>ack = y + 1</code> （表示已经收到了服务器发来的 <code>SYN</code> 报文，希望收到的下一个数据的第一个字节的序号是 <code>y + 1</code> ），并指明此时客户端的序列号 <code>seq = x + 1</code> （这是因为 TCP 客户进程发送的第一个 TCP 报文段的序号为 <code>x</code> ，并且不携带数据）。客户端进入 <code>ESTABLISHED</code> 状态。</p><blockquote><p><code>ESTABLISHED</code>：代表一个打开的连接，数据可以传送给用户</p></blockquote></li><li><p>TCP 服务器进程收到该确认报文段后也进入 <code>ESTABLISHED</code> 状态。现在，TCP 双方都进入了连接已建立状态，它们可以基于已建立好的 TCP 连接进行通信，即开始发送 HTTP 请求。</p></li></ul><h3 id="浏览器向服务器发送-HTTP-请求"><a href="#浏览器向服务器发送-HTTP-请求" class="headerlink" title="浏览器向服务器发送 HTTP 请求"></a>浏览器向服务器发送 HTTP 请求</h3><h3 id="服务器处理请求并返回-HTTP-响应报文给网络进程"><a href="#服务器处理请求并返回-HTTP-响应报文给网络进程" class="headerlink" title="服务器处理请求并返回 HTTP 响应报文给网络进程"></a>服务器处理请求并返回 HTTP 响应报文给网络进程</h3><p>HTTP 报文分为请求报文和响应报文，都有固定的格式以及各自的属性。<br>详情可见：<a href="https://juejin.cn/post/7068485552059711519#heading-9">HTTP首部</a></p><h3 id="处理状态码"><a href="#处理状态码" class="headerlink" title="处理状态码"></a>处理状态码</h3><ol><li><p>在收到服务器返回的响应报文后，网络进程开始解析响应头。<br>如果发现返回的状态码是 <code>301</code> 或 <code>302</code> ，那么说明服务器需要浏览器<strong>重定向</strong>到其他 url ，于是网络进程会从响应头的 <code>Location</code> 字段里读取重定向的地址，然后再发起新的 HTTP 或者 HTTPS 请求，这也意味着要从头开始重复以便之前的流程。</p></li><li><p>在处理了跳转信息之后，接下来就要看看服务器返回来的数据类型了。<br>怎么查看这个数据类型呢？答案是响应头的 <code>Content-Type</code> 字段。<br><code>Content-Type</code> 表示服务器返回的响应体数据的类型，浏览器会根据它的值来决定如何显示响应体的内容。  </p></li></ol><p>如果值为 <code>text/html</code> ，这就是告诉浏览器，服务器返回的数据是 HTML 格式；如果值为 <code>application/octet-stream</code>，就代表显示数据是字节流类型的，通常情况下，浏览器会按照下载类型来处理该请求。</p><blockquote><p>注意：如果服务器配置 <code>Content-Type</code> 不正确，比如将 <code>text/html</code> 类型配置成 <code>application/octet-stream</code> 类型，那么浏览器可能会曲解文件内容，可能会将一个本来是用来展示的页面，变成一个下载文件。</p></blockquote><h2 id="三、TCP-四次挥手"><a href="#三、TCP-四次挥手" class="headerlink" title="三、TCP 四次挥手"></a>三、TCP 四次挥手</h2><p>浏览器收到服务器响应的数据后，要看看请求头或响应头中是否包含 <code>Connection: Keep-Alive</code> ，表示建立了持久连接，这样 <code>TCP</code> 连接会一直保持，之后请求统一站点的资源会复用这个连接；否则进行 TCP 四次挥手断开连接：<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3001cd8a976043c5b7544961ca347891~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ul><li><p>一开始客户端和服务器都处于 <code>ESTABLISHED</code> 状态。当数据传输结束后，通信的双方均可释放连接。</p></li><li><p>假设是客户端先发起关闭请求，开始<strong>第一次挥手</strong>：客户端发送 <code>FIN</code> 报文（<code>FIN = 1</code> ，表明这是一个 TCP 连接释放报文段，同时也对之前收到的报文段进行确认），报文中指定一个序列号 <code>seq = u</code> （表示 TCP 客户进程之前已传送过的数据的最后一个字节的序号 <code>+1</code>）。客户端进入 <code>FIN-WAIT-1</code> 状态。</p><blockquote><p><code>FIN-WAIT-1</code>：待远程TCP的连接中断请求，或先前的连接中断请求的确认</p></blockquote></li><li><p>服务器收到 <code>FIN</code> 包，结束 <code>ESTABLISHED</code> 阶段，开始<strong>第二次挥手</strong>：服务器发送 <code>ACK</code> 报文（<code>ACK = 1</code> ，表明这是一个普通的 TCP 确认报文段），并且令 <code>ack = u + 1</code> （表明这是在收到客户端报文的基础上，将其序号值加 <code>1</code> 作为本段报文确认号 <code>ack</code> 的值，这是对 TCP 连接释放报文段的确认），设置 <code>seq = v</code> 。服务器进入 <code>CLOSE_WAIT</code> 状态。</p><blockquote><p><code>CLOSE-WAIT</code>：等待从本地用户发来的连接中断请求；</p></blockquote></li><li><p>此时的 TCP 处于半关闭状态，从 “客户端–&gt;服务器” 方向的连接释放，客户端无法再发送数据给服务器。客户端收到服务器的确认后，进入 <code>FIN-WAIT-2</code> 状态，等待服务器发出的连接释放报文段。</p><blockquote><p><code>FIN-WAIT-2</code>：从远程TCP等待连接中断请求</p></blockquote></li><li><p>如果服务器没有要东西要传送给客户端，要断开连接了，就开始<strong>第三次挥手</strong>：发送 <code>FIN + ACK</code> 报文（<code>FIN = 1, ACK = 1</code> ，表示服务器已经准备好释放连接了)，并指定确认号 <code>ack = u + 1</code> （表示这是在收到客户端报文的基础上，将其序号 <code>seq</code> 的值加 <code>1</code> 作为本段报文确认号 ack 的值），同时指定一个序列号 <code>seq = w</code> 。服务器进入 <code>LAST-ACK</code> 状态，等待客户端的确认。</p><blockquote><p><code>LAST-ACK</code> - 等待原来发向远程TCP的连接中断请求的确认；</p></blockquote></li><li><p>客户端收到服务器发来的 <code>FIN + ACK</code> 包之后，确认服务器已经做好释放连接的准备了，于是开始<strong>第四次挥手</strong>：发送一个 <code>ACK</code> 报文（<code>ACK = 1</code> ，表示接收到了服务器准备好释放连接的信号）作为应答，令 <code>ack = w + 1</code> （表示这是在收到了服务器报文的基础上，将其序号 seq 的值 <code>+1</code> 作为本段报文确认号的值），并且 <code>seq = u + 1</code> （表示这是在已收到服务器报文的基础上，将其确认号 ack 的值作为本段序号的值）。客户端进入 <code>TIME-WAIT</code> 状态。</p><blockquote><p><code>TIME-WAIT</code>：等待足够的时间以确保远程TCP接收到连接中断请求的确认</p></blockquote></li><li><p>随后客户端开始在 <code>TIME-WAIT</code> 阶段等待 <code>2 MSL</code> 。</p></li><li><p>服务器收到从客户端发出的 TCP 报文之后结束 <code>LAST-ACK</code> 阶段，进入 <code>CLOSED</code> 阶段。由此正式确认关闭从 “服务器–&gt;客户端” 方向的连接。</p></li><li><p>客户端在等待了 <code>2 MSL</code> 之后，自动结束 <code>TIME-WAIT</code> 阶段，进入 <code>CLOSED</code> 阶段。至此，四次握手完成。</p></li></ul><h2 id="四、准备渲染进程"><a href="#四、准备渲染进程" class="headerlink" title="四、准备渲染进程"></a>四、准备渲染进程</h2><p>默认情况下，Chrome 会为每一个页面分配一个渲染进程，也就是说，在浏览器上每打开一个新的 Tab 页面就会创建一个新的渲染进程（这句话其实不太正确，我们后面会讲到）。</p><p>如下图所示，我在百度首页打开了百度贴吧，总共开了两个标签页，查看 Chrome 的任务管理器，我们发现确实创建了两个渲染进程，两个进程 ID 都不一样。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/35294a6111544f718b4d178f7d2ffa62~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>但这并不是说打开一个标签页就一定会创建新的渲染进程，只要两个标签页属于同一个站点，浏览器就会让这两个标签页直接运行在同一个渲染进程中。</p><p>Q：那么什么叫“同一站点”呢？<br>A：我们将“同一站点”定义为：只要<strong>协议 + 根域名</strong>相同，就说他们属于同一站点。<br>下面这三个 url 就属于同一站点：</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;www.baidu.comhttps:&#x2F;&#x2F;www.baidu.com:8080https:&#x2F;&#x2F;map.baidu.com&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>因为他们的协议都是 <code>https://</code> ，根域名都是 <code>baidu.com</code> ，因此均属于同一站点。这也意味着浏览器不会创建三个渲染进程，而是只创建一个渲染进程，其他标签页复用该进程。</p><h2 id="五、提交文档"><a href="#五、提交文档" class="headerlink" title="五、提交文档"></a>五、提交文档</h2><ul><li>渲染进程准备好后，还不能立即进入文档解析状态，因为此时的文档数据还在网络进程中，并没有提交给渲染进程，因此浏览器进程向渲染进程发起“提交文档”的消息，渲染进程接收到消息后与网络进程建立传输数据的“管道”。</li><li>于是网络进程就开始传送数据。当渲染进程接收完数据后，会返回“确认提交”的消息给浏览器进程。</li><li>浏览器进程收到确认消息后更新浏览器界面。<blockquote><p>这就是为什么在浏览器的地址栏输入了一个地址之后，之前的页面没有立马消失，而是要加载一会才会更新页面。这中间要请求资源、等待响应、提交数据等等，当然不会一下子就完成好。<br>注意：此时页面还没渲染完毕，只是将浏览器的界面状态更新了而已，如前进后退的状态、地址栏信息、安全状态、页面变化（可能是页面变成白屏或者骨架屏吧？）。  </p></blockquote></li></ul><h2 id="六、浏览器页面的渲染过程"><a href="#六、浏览器页面的渲染过程" class="headerlink" title="六、浏览器页面的渲染过程"></a>六、浏览器页面的渲染过程</h2><p>当文档数据被提交后，渲染进程就要开始页面解析和子资源加载了。</p><ol><li>解析 <code>HTML</code> 构建 <code>DOM</code> 树</li><li>解析 <code>CSS</code> 构建 <code>CSSOM</code> 树</li><li>创建 <code>Layout</code>（布局） 树，并计算元素的布局信息。<ul><li>遍历 <code>DOM</code> 树中的所有可见节点，并把这些节点加到布局中；</li><li>而不可见的节点会被布局树忽略掉，如 <code>head</code> 标签下面的全部内容，再比如属性为 <code>dispaly:none</code> 等的元素也不会被包进布局树</li></ul></li><li>对布局树进行分层，并生成分层树。<ul><li>通常情况下，并不是布局树的每个节点都包含一个图层，如果一个节点没有对应的层，那么这个节点就从属于父节点的图层。</li></ul></li><li>为每个图层生成绘制列表，并将其提交到合成线程。<ul><li>渲染引擎会把一个图层的绘制拆分成很多小的绘制指令，然后再把这些指令按照顺序组成一个待绘制列表。当图层的绘制列表准备好之后，主线程会把该绘制列表提交（commit）给合成线程。</li></ul></li><li>合成线程将图层分成图块，并在光栅化线程池中将图块转换成位图。</li><li>当所有图块都被光栅化后，合成线程就会将它们合并成一张图片，并生成一个绘制图块的命令 <code>DrawQuad</code> ，然后将该命令发送给浏览器进程。</li><li>浏览器进程里的一个叫 <code>viz</code> 的组件是专门用来接收合成线程发过来的 <code>DrawQuad</code> 命令，然后根据该命令将其页面内容绘制到内存中，最后再将内存显示在屏幕上。（然后发送给显卡。）</li><li>接着放入通过显卡缓存的后缓冲区，然后显卡中前后缓冲去交换，显示器显示页面并显示到显示器上。</li><li>当页面生成完成，渲染进程会发送一个消息给浏览器进程，浏览器收到消息后，会停止标签图标上的加载动画。<blockquote><p>①你以为渲染过程只是这样吗？那么大错特错了，就解析 <code>HTML</code> 而言，里面还有很多学问。<br>②你知道为什么第3步不是应该生成 <code>Render</code> 树吗？因为那已经是之前的事情了，现在 Chrome 团队已经做了大量的重构，已经没有生成<code>Render Tree</code>的过程了。<br>③你知道需要满足什么条件，渲染引擎才会为特定的节点创建新的层吗？需要<strong>拥有层叠上下文属性的元素会被提升为单独的一层</strong>；或者<strong>需要剪裁（clip）的地方也会被创建为图层。</strong><br>④你知道什么是光栅化吗？<strong>所谓栅格化，是指将图块转换为位图</strong>。  </p><p>还有很多更加深层次的东西这里没有写出来，笔者强推：<br>poetry 的 <a href="https://blog.poetries.top/browser-working-principle/guide/part1/lesson05.html">渲染流程（上）：HTML、CSS和JavaScript是如何变成页面的</a><br>神三元的 <a href="https://sanyuan0704.top/blogs/browser/browser-render/002.html#%E6%9E%84%E5%BB%BA-dom-%E6%A0%91">002 说一说从输入URL到页面呈现发生了什么？——解析算法篇</a><br>这两篇文章写得非常之好，分享给大家。前端的世界真的非常神奇，这两篇文章会告诉你，你平常看到的那些很好看的网页背后，究竟做了些什么。这里笔者就不班门弄斧了。</p></blockquote></li></ol><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>看完这篇文章后，你的大脑应该会感觉很充实，学到了很多底层知识，同时知道了在面试中遇到这道题时该怎么回答，这是好事。但其实这里面还可以继续深挖下去，你知道的，面试官的水平通常会比面试者高，他们可能会问更加深层次的东西，要想回答上来，我们平时要注意多思考，多问为什么。</p><p>这里笔者也针对这个经典面试题写了一篇文章：深入探究“在浏览器输入URL到渲染页面”（下）模拟面试，如果担心在面试时被问住，可以先收藏下，不过这篇文章笔者还没写好，后续会补上。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 八股文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备战大厂前端面试之CSS篇</title>
      <link href="/2022/03/08/bei-zhan-da-han-qian-duan-mian-shi-zhi-css-pian/"/>
      <url>/2022/03/08/bei-zhan-da-han-qian-duan-mian-shi-zhi-css-pian/</url>
      
        <content type="html"><![CDATA[<p>前端面试题系列：</p><ul><li>【1】<a href="https://hcyety.github.io/2022/03/08/bei-zhan-da-han-qian-duan-shi-xi-zhi-html-pian/">备战前端实习面试之HTML篇</a>  </li><li>【2】备战前端实习面试之CSS篇  </li><li>【3】<a href="">备战前端实习面试之JavaScript篇</a>  </li><li>【4】<a href="">备战前端实习面试之React篇</a>  </li><li>【5】<a href="">备战前端实习面试之Node.js篇</a>  </li><li>【6】<a href="">备战前端实习面试之浏览器原理篇</a>  </li><li>【8】<a href="">备战前端实习面试之性能优化篇</a>  </li><li>【7】<a href="">备战前端实习面试之计算机网络篇</a>  </li><li>【9】<a href="">备战前端实习面试之手写代码篇</a>  </li><li>【9】<a href="">备战前端实习面试之代码输出结果篇</a></li></ul><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="一、盒模型"><a href="#一、盒模型" class="headerlink" title="一、盒模型"></a>一、盒模型</h2><p>每个标签都是一个盒模型，由四个部分组成，分别是 <code>margin</code>、<code>border</code>、<code>padding</code>、<code>content</code> 。<br>而盒模型分为两种，分别是标准盒模型和怪异盒模型，其中</p><ul><li>标准盒模型的宽高等于 <code>content</code> ，通过 <code>box-sizing: content-box</code> 设置。</li><li>怪异盒模型的宽高等于 <code>content + padding + border</code>，通过 <code>box-sizing: border-box</code> 设置。</li></ul><h2 id="二、position-属性的值有哪些及其区别"><a href="#二、position-属性的值有哪些及其区别" class="headerlink" title="二、position 属性的值有哪些及其区别"></a>二、position 属性的值有哪些及其区别</h2><ul><li>static（出现在正常的文档流中）<br>默认。位置设置为 static 的元素，它始终会处于页面流给予的位置（static 元素会忽略任何 top、bottom、left 或 right 声明）。</li><li>relative（不脱离文档流）<br>发生偏移时的参照为 position 属性取 static 时盒子的位置</li><li>absolute（脱离文档流）<br>元素相对于最近的非 static 定位的祖先元素发生偏移</li><li>fixed（脱离文档流）<br>元素相对于屏幕视口（viewport）的位置来发生偏移, 元素的位置在屏幕滚动时不会改变。这一点与 absolute 不同，absolute 在屏幕滚动时会跟着一起滚动</li><li>sticky <br>可以被认为是 relative 和 fixed 的混合，元素在跨越特定阈值前为相对定位，之后为固定定位： sticky 会让元素在页面滚动时如同在正常流中（relative定位），但当滚动到特定位置时就会固定在屏幕上如同 fixed <blockquote><p>sticky定位的阈值是相对它的最近滚动祖先来定义的，而 sticky 的作用区域也是它的第一个非static父元素内，也就是说粘性布局的效果只在该父元素内表现出来。</p></blockquote></li><li>inherit<br>规定从父元素继承position属性的值</li></ul><h2 id="三、浮动的脱离文档流和绝对定位的脱离文档流是一样的吗"><a href="#三、浮动的脱离文档流和绝对定位的脱离文档流是一样的吗" class="headerlink" title="三、浮动的脱离文档流和绝对定位的脱离文档流是一样的吗"></a>三、浮动的脱离文档流和绝对定位的脱离文档流是一样的吗</h2><p>大盒子里包裹着使用 <code>float: left</code> 浮动的元素，其他小盒子会无视它，从浏览器左上角开始布局，但大盒子内的文本依旧会为浮动元素让出位置，这就导致了“字围”现象。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/431b84edfb1d4f6180681fbf97c68fd5~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>使用绝对定义的元素，其他小盒子也会忽略它，但大盒子内的文本不同于浮动的脱离文档流，而是会忽略浮动的元素，因此文字会与浮动元素重叠。<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3685780fda6f42dea8166a42583e431a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="四、讲讲-BFC"><a href="#四、讲讲-BFC" class="headerlink" title="四、讲讲 BFC"></a>四、讲讲 BFC</h2><p>BFC（块级格式化上下文）是一个独立的布局环境，可以理解为一个容器，这个容器有它自己的布局规则，布局时不会影响外界，同时也不受外部影响。</p><p><strong>BFC 的布局规则</strong>：</p><ul><li>内部的盒子会在垂直方向上自上而下地排列，和文档流的排列方式一致。</li><li>盒子垂直方向的距离由 <code>margin</code> 决定。属于同一个 BFC 的两个相邻盒子的 <code>margin</code>  会发生重叠。</li><li>计算BFC的高度时，浮动元素也参与计算。</li><li>每个元素的左 <code>margin</code> 值和容器的左 <code>border</code> 相接触（对于从左往右的格式化，否则相反）。即使存在浮动也是如此。</li><li>BFC 的区域不会与浮动的容器发生重叠。</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li></ul><p><strong>BFC 的作用</strong>：</p><ul><li>利用 BFC 避免 margin 重叠。</li><li>阻止元素被浮动元素覆盖<ul><li>可应用于自适应两栏布局（避免右侧与左侧发生重叠)</li></ul></li><li>清除浮动  </li><li>创建自适应两栏布局</li></ul><p><strong>触发 BFC 的条件</strong>：</p><ul><li>根元素或包含根元素的元素</li><li><code>float</code> 的值不为 <code>none</code></li><li><code>position</code> 的值为 <code>absolute</code> 或 <code>fixed</code></li><li><code>display</code> 的值为 <code>flex/inline-flex弹性元素</code> 或 <code>grid/inline-grid网格元素</code> 或 <code>inline-block行内块元素</code> 或 <code>table-cell表格单元格</code> 或 <code>table-caption表格标题</code></li><li><code>overflow</code> 值不为 <code>visible</code></li><li><code>contain</code> 值为 <code>layout</code> 或 <code>content</code> 或 <code>strict</code></li></ul><p><strong>如何解决 margin 重叠</strong>：</p><ol><li>兄弟之间重叠（底部元素设置 BFC ）</li></ol><ul><li>底部元素变为行内盒子：<code>display: inline-block</code></li><li>底部元素设置浮动：<code>float</code></li><li>底部元素的 <code>position</code> 的值为 <code>absolute/fixed</code></li></ul><ol start="2"><li>父子之间重叠</li></ol><ul><li>父元素加入：<code>overflow: hidden</code></li><li>父元素添加透明边框：<code>border:1px solid transparent</code></li><li>子元素变为行内盒子：<code>display: inline-block</code></li><li>子元素加入浮动属性或定位</li></ul><h2 id="五、为什么要清除浮动？清除浮动的方式？"><a href="#五、为什么要清除浮动？清除浮动的方式？" class="headerlink" title="五、为什么要清除浮动？清除浮动的方式？"></a>五、为什么要清除浮动？清除浮动的方式？</h2><p>清除浮动是为了清除使用浮动元素产生的影响。这个影响就是，浮动元素的高度会塌陷，而高度的塌陷使页面后面的布局不能正常显示。</p><p><strong>清除浮动的五种方法</strong>：</p><ol><li>给浮动的父元素设置宽高（不推荐，企业中一般不设宽高）</li><li>给要清除浮动的元素设置 <code>clear: both</code> 属性（但 <code>margin</code> 属性会失效）</li><li>隔墙法</li></ol><ul><li>外墙法：<ul><li>①在两个盒子中间添加一个额外的块级元素</li><li>②给这个额外添加的块级元素设置 <code>clear: both</code></li><li>注意：外墙法可以让第二个盒子使用 <code>margin-top</code> 属性，但不可以让第一个盒子使用 <code>margin-bottom</code> 属性，因此直接给额外添加的块级元素设置宽高即可</li></ul></li><li>内墙法：<ul><li>①在第一个盒子中所有子元素最后添加一个额外的块级元素</li><li>②给这个额外添加的块级元素设置 <code>clear: both</code></li><li>注意：内墙法可以让第二个盒子使用 <code>margin-top</code> 属性，也可以让第一个盒子使用 <code>margin-bottom</code> 属性，因此直接给额外添加的块级元素设置宽高即可</li></ul></li><li>外墙法和内墙法的区别：外墙法不能撑起第一个盒子的高度，而内墙法可以撑起第一个盒子的高度</li></ul><ol start="4"><li>给浮动的元素设置伪元素选择器<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box::after</span><span class="token punctuation">&#123;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token comment">/* 设置添加的子元素的内容为空 */</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>     <span class="token comment">/* 设置添加的子元素为块级元素 */</span>    <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>          <span class="token comment">/* 设置添加的子元素的高度为0 */</span>    <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span> <span class="token comment">/* 设置添加的子元素看不见 */</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>        <span class="token comment">/* 给添加的子元素 clear: both; */</span><span class="token punctuation">&#125;</span><span class="token comment">/* 注意：过去的浏览器不支持 CSS3 新特性，因此需要加上：*/</span><span class="token selector">.box</span><span class="token punctuation">&#123;</span>    *<span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> <span class="token comment">/* 兼容 IE 6 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>包含浮动元素的父级标签添加 <code>overflow:hidden</code> 或者 <code>overflow:auto</code></li></ol><h2 id="六、什么是伪类和伪元素？他们的作用和区别？"><a href="#六、什么是伪类和伪元素？他们的作用和区别？" class="headerlink" title="六、什么是伪类和伪元素？他们的作用和区别？"></a>六、什么是伪类和伪元素？他们的作用和区别？</h2><p><strong>定义</strong>：</p><ul><li>伪类：是以一个冒号(:)作为前缀，被添加到一个选择器末尾的关键字。</li><li>伪元素：是以两个冒号(::)作为前缀，同样是添加到选择器后面去选择某个元素的某个部分。</li></ul><p><strong>作用</strong>：</p><ul><li>伪类：用于当已有的元素处于某个状态时，为其添加对应的样式，这个状态是根据用户行为而动态变化。</li><li>伪元素：用于创建一些不在文档树中的元素，并为其添加样式，但是这些元素实际上并不在文档中生成。</li></ul><p><strong>区别</strong>：</p><ul><li>伪类：在某个状态给指定元素添加相应的样式时，它是已有元素上添加类别的，不会产生新的元素。</li><li>伪元素：在内容元素的前后插入额外的元素或样式，它们只在外部显示可见，但不会在文档的源代码中找到它们。</li></ul><h2 id="七、CSS3-的新特性"><a href="#七、CSS3-的新特性" class="headerlink" title="七、CSS3 的新特性"></a>七、CSS3 的新特性</h2><ol><li>过渡  </li></ol><p><strong>语法</strong>：<br>transition： <code>transition-property</code>【CSS属性】，<code>transition-duration</code>【花费时间】，<code>transition-timing-function</code>【效果曲线（默认ease）】，<code>transition-delay</code>【延迟时间（默认0）】。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">// 连写（可以省略后面的两个参数）：transition：width<span class="token punctuation">,</span> 5s<span class="token punctuation">,</span> ease<span class="token punctuation">,</span> 2s<span class="token property">transition-property</span><span class="token punctuation">:</span> width<span class="token punctuation">;</span><span class="token property">transition-duration</span><span class="token punctuation">:</span> 1s<span class="token punctuation">;</span><span class="token property">transition-timing-function</span><span class="token punctuation">:</span> linear<span class="token punctuation">;</span><span class="token property">transition-delay</span><span class="token punctuation">:</span> 2s<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>transition-timing-function 的参数</strong>：<br>|值|描述|<br>|:–|:–|<br>|linear|匀速（等于 cubic-bezier(0,0,1,1)）|<br>|ease|逐渐变慢（cubic-bezier(0.25,0.1,0.25,1)）|<br>|ease-in|加速（等于 cubic-bezier(0.42,0,1,1)）|<br>|ease-out|减速（等于 cubic-bezier(0,0,0.58,1)）|<br>|ease-in-out|先加速后减速（等于 cubic-bezier(0.42,0,0.58,1)）|<br>|cubic-bezier(n,n,n,n)|在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值|</p><ol start="2"><li>动画<br>①animation：<code>animation-name</code>【动画名称】，<code>animation-duration</code>【一个周期花费时间】，<code>animation-timing-function</code>【运动曲线（默认ease）】，<code>animation-delay</code>【动画延迟（默认0）】，<br><code>animation-fill-mode</code>，<code>animation-direction</code>【是否反向播放动画（默认normal）】，<code>animation-iteration-count</code>【播放次数（默认1）】，<code>animation-play-state</code>【是否暂停动画（默认 running ）】<br>②告诉系统外面需要自己创建一个名称叫做xxx的动画<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> 动画名称</span> <span class="token punctuation">&#123;</span>    <span class="token selector">from</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">to</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li><code>animation-name</code>    规定动画的名称。由大小写敏感的字母a-z、数字0-9、下划线（_）和 <code>/</code> 或横线（-）组成。<em>第一个非横线字符必须是字母，数字不能在字母前面，不允许两个横线出现在开始位置</em>  </li><li><code>animation-duration</code>    规定动画完成一个周期所花费的秒或毫秒。默认是 0 ，表示无动画。  </li><li><code>animation-timing-function</code>    规定动画的速度曲线。默认是 “ease”。可选参数如下： </li></ul><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">linear</td><td align="left">动画从头到尾的速度是相同的。</td></tr><tr><td align="left">ease</td><td align="left">默认。动画以低速开始，然后加快，在结束前变慢。</td></tr><tr><td align="left">ease-in</td><td align="left">动画以低速开始。</td></tr><tr><td align="left">ease-out</td><td align="left">动画以低速结束。</td></tr><tr><td align="left">ease-in-out</td><td align="left">动画以低速开始和结束。</td></tr><tr><td align="left">cubic-bezier(n,n,n,n)</td><td align="left">在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。</td></tr><tr><td align="left"></td><td align="left"></td></tr></tbody></table><ul><li><code>animation-delay</code>    规定动画何时开始。默认是 0。  </li><li><code>animation-fill-mode</code>    规定对象动画在执行之前和之后如何将样式应用于其目标。可选参数如下：</li></ul><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">none</td><td align="left">默认状态，回到动画没开始时的状态。</td></tr><tr><td align="left">forwards</td><td align="left">让动画停留在结束状态。</td></tr><tr><td align="left">backwards</td><td align="left">让动画回到第一帧的状态。</td></tr><tr><td align="left">both</td><td align="left">向前和向后填充模式都被应用。</td></tr></tbody></table><ul><li><p><code>animation-direction</code>    规定动画是否在下一周期逆向地播放。默认是 “normal”。可选参数如下：</p><ul><li>normal    默认值。动画正常播放。    </li><li>alternate    动画轮流反向播放。</li><li>reverse 动画反向播放。</li><li>alternate-reverse 动画反向轮流播放。<br>效果如图：<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/935d7afa5d364119b99895b8d071977a~tplv-k3u1fbpfcp-zoom-1.image" alt="animation-direction 参数效果"></li></ul></li><li><p><code>animation-iteration-count</code> 规定动画被播放的次数。默认是 1。无限播放则是 infinite  </p></li><li><p><code>animation-play-state</code>    规定动画是否正在运行或暂停。可以通过查询它来确定动画是否正在运行。另外，它的值可以被设置为暂停和恢复的动画的重放。默认是 “running”。可选参数如下：</p></li></ul><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">paused</td><td align="left">规定动画已暂停。</td></tr><tr><td align="left">running</td><td align="left">规定动画正在播放。</td></tr><tr><td align="left">inherit</td><td align="left">/</td></tr><tr><td align="left">initial</td><td align="left">/</td></tr><tr><td align="left">unset</td><td align="left">/</td></tr></tbody></table><ol start="3"><li>形状转换  </li></ol><ul><li>transform-origin    定义形变点的位置。</li><li>2D transform 方法<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token function">translate</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>定义 2D 转换，沿着 X 和 Y 轴移动元素。    <span class="token function">translateX</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>定义 2D 转换，沿着 X 轴移动元素。    <span class="token function">translateY</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>定义 2D 转换，沿着 Y 轴移动元素。<span class="token function">rotate</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span>定义 2D 旋转，在参数中规定角度，参数为数值、单位 deg。<span class="token function">scale</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>定义 2D 缩放转换，改变元素的宽度和高度，参数为数值、无单位。    <span class="token function">scaleX</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>定义 2D 缩放转换，改变元素的宽度。    <span class="token function">scaleY</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>定义 2D 缩放转换，改变元素的高度。<span class="token function">matrix</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">)</span>定义 2D 转换，使用六个值的矩阵。<span class="token function">skew</span><span class="token punctuation">(</span>x-angle<span class="token punctuation">,</span>y-angle<span class="token punctuation">)</span>定义 2D 倾斜转换，沿着 X 和 Y 轴，参数为数值、单位 deg。    <span class="token function">skewX</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span>定义 2D 倾斜转换，沿着 X 轴。    <span class="token function">skewY</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span>定义 2D 倾斜转换，沿着 Y 轴。x-axis定义视图被置于 X 轴的何处。可能的值：left，center，right，length，%y-axis定义视图被置于 Y 轴的何处。可能的值：top，center，bottom，length，%z-axis定义视图被置于 Z 轴的何处。可能的值：length<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>3D Transform 方法<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token function">matrix3d</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">)</span>定义 3D 转换，使用 16 个值的 4x4 矩阵。<span class="token function">translate3d</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span>定义 3D 转化。    <span class="token function">translateX</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>定义 3D 转化，仅使用用于 X 轴的值。    <span class="token function">translateY</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>定义 3D 转化，仅使用用于 Y 轴的值。    <span class="token function">translateZ</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>定义 3D 转化，仅使用用于 Z 轴的值。<span class="token function">scale3d</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span>定义 3D 缩放转换。    <span class="token function">scaleX</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>定义 3D 缩放转换，通过给定一个 X 轴的值。    <span class="token function">scaleY</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>定义 3D 缩放转换，通过给定一个 Y 轴的值。    <span class="token function">scaleZ</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>定义 3D 缩放转换，通过给定一个 Z 轴的值。<span class="token function">rotate3d</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span>angle<span class="token punctuation">)</span>定义 3D 旋转。    <span class="token function">rotateX</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span>定义沿 X 轴的 3D 旋转。    <span class="token function">rotateY</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span>定义沿 Y 轴的 3D 旋转。    <span class="token function">rotateZ</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span>定义沿 Z 轴的 3D 旋转。<span class="token function">perspective</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>定义 3D 转换元素的透视视图。x-axis定义视图被置于 X 轴的何处。可能的值：left，center，right，length，%y-axis定义视图被置于 Y 轴的何处。可能的值：top，center，bottom，length，%z-axis定义视图被置于 Z 轴的何处。可能的值：lengthtransform-style规定被嵌套元素如何在 3D 空间中显示。    flat子元素将不保留其 3D 位置。    preserve-3d子元素将保留其 3D 位置。perspective规定 3D 元素的透视效果（近大远小）。    number元素距离视图的距离，以像素计。    none默认值。与 0 相同。不设置透视。perspective-origin规定 3D 元素的底部位置。    x-axis定义该视图在 x 轴上的位置。默认值：50%。可能的值：left，center，right，length，%    y-axis定义该视图在 y 轴上的位置。默认值：50%。可能的值：top，center，bottom，length，%backface-visibility定义元素在不面对屏幕时是否可见。    visible背面是可见的。    hidden背面是不可见的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="4"><li><p>阴影<br><code>box-shadow</code>：水平阴影的位置 垂直阴影的位置 模糊距离 阴影的大小 阴影的颜色 阴影开始方向（默认是从里往外，设置inset就是从外往里）;</p></li><li><p>边框图片<br><code>border-image</code>：图片url 图像边界向内偏移 图像边界的宽度(默认为边框的宽度) 用于指定在边框外部绘制偏移的量（默认0） 铺满方式–重复（repeat）、拉伸（stretch）或铺满（round）（默认：拉伸（stretch））;</p></li><li><p>边框圆角<br><code>border-radius</code>：左上角，右上角，右下角，左下角;</p></li><li><p>背景  </p></li></ol><ul><li><code>background-clip</code> 规定背景的绘制区域         <ul><li>border-box    背景被裁剪到边框盒。</li><li>padding-box    背景被裁剪到内边距框。</li><li>content-box    背景被裁剪到内容框。</li></ul></li><li><code>background-origin</code>    <ul><li>padding-box    背景图像相对于内边距框来定位。    </li><li>border-box    背景图像相对于边框盒来定位。</li><li>content-box    背景图像相对于内容框来定位。</li></ul></li><li><code>background-size</code><ul><li>length    设置背景图像的高度和宽度。第一个值设置宽度，第二个值设置高度。如果只设置一个值，则第二个值会被设置为 “auto”。</li><li>percentage    以父元素的百分比来设置背景图像的宽度和高度。第一个值设置宽度，第二个值设置高度。如果只设置一个值，则第二个值会被设置为 “auto”。</li><li>cover    把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。背景图像的某些部分也许无法显示在背景定位区域中。</li><li>contain    把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域。</li></ul></li></ul><ol start="8"><li><p>反射<br><code>-webkit-box-reflect</code>：方向【above-上 | below-下 | right-右 | left-左】，偏移量，遮罩图片</p></li><li><p>文字阴影<br><code>text-shadow</code>：水平阴影，垂直阴影，模糊的距离，以及阴影的颜色</p></li><li><p>颜色<br><code>rgba</code>（rgb为颜色值，a为透明度）<br><code>hsla</code>（h：色相”，“s：饱和度”，“l：亮度”，“a：透明度”）</p></li><li><p>渐变</p></li><li><p>Filter（滤镜）</p></li></ol><ul><li>黑白色 filter: grayscale(100%)</li><li>褐色 filter:sepia(1)</li><li>饱和度 saturate(2)</li><li>色相旋转 hue-rotate(90deg)</li><li>反色 filter:invert(1)</li><li>透明度 opacity(.5)</li><li>亮度 brightness(.5)</li><li>对比度 contrast(2)</li><li>模糊 blur(3px)</li><li>阴影 drop-shadow(5px 5px 5px #000)</li></ul><ol start="13"><li><p>混合模式  </p><ul><li>background-blend-mode（用于同一个元素的背景图片和背景颜色）<ul><li>multiply 正片叠底</li><li>screen 滤色</li><li>overlay 叠加</li><li>darken 变暗</li><li>lighten 变亮</li><li>color-dodge 颜色减淡模式</li><li>color-burn 颜色加深</li><li>hard-light 强光</li><li>soft-light 柔光</li><li>difference 差值</li><li>exclusion 排除</li><li>hue 色相</li><li>saturation 饱和度</li><li>color 颜色</li><li>luminosity 亮度</li></ul></li><li>mix-blend-mode（用于一个元素的背景图片或者颜色和子元素）<ul><li>数值同 background-blend-mode</li></ul></li></ul></li><li><p>多列布局  </p><ul><li><p>加上私有前缀，兼容</p><ul><li>-webkit- （谷歌，Safari，新版Opera浏览器，以及几乎所有iOS系统中的浏览器（包括 iOS 系统中的火狐浏览器）；基本上所有基于WebKit 内核的浏览器）</li><li>-moz- （火狐浏览器）</li><li>-o- （旧版Opera浏览器）</li><li>-ms- （IE浏览器 和 Edge浏览器）</li></ul></li><li><p>column-count    规定元素应该被分隔的列数。</p></li><li><p>column-fill    规定如何填充列。</p></li><li><p>column-gap    规定列之间的间隔。</p></li><li><p>column-rule    设置所有 column-rule-* 属性的简写属性。</p></li><li><p>column-rule-color    规定列之间规则的颜色。</p></li><li><p>column-rule-style    规定列之间规则的样式</p></li><li><p>column-rule-width    规定列之间规则的宽度。</p></li><li><p>column-span    规定元素应该横跨的列数。</p></li><li><p>column-width    规定列的宽度。</p></li><li><p>columns    规定设置 column-width 和 column-count 的简写属性</p></li></ul></li><li><p>媒体查询<br>语法：@media 媒体类型 and （媒体特性）{你的样式}</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>600px<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>900px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token selector">body</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span>#f5f5f5<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><ul><li><p>not关键词</p><ul><li>使用关键词“not”是用来排除某种制定的媒体类型，也就是用来排除符合表达式的设备。换句话说，not关键词表示对后面的表达式执行取反操作，如：  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">not</span> print <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>1200px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    样式代码<span class="token punctuation">&#125;</span>// 上面代码表示的是：样式代码将被使用在除打印设备和设备宽度小于1200px下的所有设备中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>only关键词</p><ul><li><a href="https://www.jianshu.com/p/927790abdd80">媒体查询使用方法@media</a></li></ul></li><li><p>媒体类型</p><ul><li>all    用于所有媒体类型设备。</li><li>print    用于打印机。</li><li>screen    用于计算机屏幕、平板电脑、智能手机等等。</li><li>speech    用于大声“读出”页面的屏幕阅读器。</li></ul></li><li><p>媒体特性</p><ul><li>如果是横屏landscape、竖屏portrait，则语法：orientation：portrait | landscape  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">orientation</span><span class="token punctuation">:</span>landscape<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token selector">body</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span>lightblue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>但与CSS属性不同的是，媒体特性是通过min/max来表示大于等于或小于做为逻辑判断，而不是使用小于（&lt;）和大于（&gt;）这样的符号来判断<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>480px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token selector">.ads</span><span class="token punctuation">&#123;</span>        <span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>上面代码表示的是：当屏幕小于或等于480px时，页面中的广告区块（.ads）都讲被隐藏<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>更复杂的媒体查询</li></ul></li><li><p>媒体查询中的“与”逻辑</p>  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>400px<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">orientation</span><span class="token punctuation">:</span>landscape<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token selector">body</span><span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>媒体查询中的“或”逻辑</p>  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>400px<span class="token punctuation">)</span><span class="token punctuation">,</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">orientation</span><span class="token punctuation">:</span>landscape<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token selector">body</span><span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>媒体查询中的“非”逻辑可以用not操作符让整个媒体查询失效。这就直接反转了整个媒体查询的含义。因而在下面的例子中，文本只会在朝向为竖着的时候变成蓝色。</p>  <pre class="line-numbers language-css" data-language="css"><code class="language-css">    <span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">not</span> all <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">orientation</span><span class="token punctuation">:</span>landscape<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>        <span class="token selector">body</span><span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    ```      ## 八、CSS中可继承与不可继承属性有哪些？1. **无继承性的属性**① **display**：规定元素应该生成的框的类型② **文本属性**：-   vertical-align：垂直文本对齐-   text-decoration：规定添加到文本的装饰-   text-shadow：文本阴影效果-   white-space：空白符的处理-   unicode-bidi：设置文本的方向③ **盒子模型的属性**：width、height、margin、border、padding④ **背景属性**：background、background-color、background-image、background-repeat、background-position、background-attachment⑤ **定位属性**：float、clear、position、top、right、bottom、left、min-width、min-height、max-width、max-height、overflow、clip、z-index⑥ **生成内容属性**：content、counter-reset、counter-increment⑦ **轮廓样式属性**：outline-style、outline-width、outline-color、outline⑧ **页面样式属性**：size、page-break-before、page-break-after⑨ **声音样式属性**：pause-before、pause-after、pause、cue-before、cue-after、cue、play-during2. **有继承性的属性**① **字体系列属性**-   font-family：字体系列-   font-weight：字体的粗细-   font-size：字体的大小-   font-style：字体的风格② **文本系列属性**-   text-indent：文本缩进-   text-align：文本水平对齐-   line-height：行高-   word-spacing：单词之间的间距-   letter-spacing：中文或者字母之间的间距-   text-transform：控制文本大小写（就是uppercase、lowercase、capitalize这三个）-   color：文本颜色③ **元素可见性**-   visibility：控制元素显示隐藏④ **列表布局属性**-   list-style：列表风格，包括list-style-type、list-style-image等⑤ **光标属性**-   cursor：光标显示为何种形态## 九、隐藏元素的方法有哪些1. **<span class="token property">display</span><span class="token punctuation">:</span> none**- 不会在页面中占据位置，也不会响应绑定的监听事件。2. **<span class="token property">visibility</span><span class="token punctuation">:</span> hidden**- 在页面中占据位置，但不会响应绑定的监听事件。3. **<span class="token property">opacity</span><span class="token punctuation">:</span> 0**- 在页面中占据位置，且会响应绑定的监听事件。4. **<span class="token property">position</span><span class="token punctuation">:</span> absolute**5. **<span class="token property">z-index</span><span class="token punctuation">:</span> 负值**6. **<span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span>**- 在页面中占据位置，但不会响应绑定的监听事件。7. **clip/clip-path**- 在页面中占据位置，但不会响应绑定的监听事件。## <span class="token property">十、display</span><span class="token punctuation">:</span>none 与 <span class="token property">visibility</span><span class="token punctuation">:</span>hidden 的区别这两个属性都是让元素隐藏，不可见。  区别如下：- 在渲染树中  - `<span class="token property">display</span><span class="token punctuation">:</span>none` 会让元素完全从渲染树中消失，渲染时不会占据任何空间；  - `<span class="token property">visibility</span><span class="token punctuation">:</span>hidden` 不会让元素从渲染树中消失，渲染的元素还会占据相应的空间，只是内容不可见。- 是否是继承属性  - `<span class="token property">display</span><span class="token punctuation">:</span>none` 是非继承属性，子孙节点会随着父节点从渲染树消失，通过修改子孙节点的属性也无法显示；  - `<span class="token property">visibility</span><span class="token punctuation">:</span>hidden` 是继承属性，子孙节点消失是由于继承了`hidden`，通过设置 `<span class="token property">visibility</span><span class="token punctuation">:</span>visible` 可以让子孙节点显示；- 修改常规文档流中元素的 `display` 通常会造成文档的重排，但是修改 `visibility` 属性只会造成本元素的重绘；- 如果使用读屏器，设置为 `<span class="token property">display</span><span class="token punctuation">:</span>none` 的内容不会被读取，设置为 `<span class="token property">visibility</span><span class="token punctuation">:</span>hidden` 的内容会被读取。## <span class="token property">十一、display</span><span class="token punctuation">:</span>inline-block 什么时候会显示间隙？- 有空格时会有间隙，可以删除空格解决；- 使用 `font-size` 时，可通过设置 `<span class="token property">font-size</span><span class="token punctuation">:</span>0`、`letter-spacing`、`word-spacing`解决；- `margin` 正值时，可以让 `margin` 使用负值解决；## 十二、单行、多行文本溢出隐藏- 单行文本溢出```css<span class="token property">overflow</span><span class="token punctuation">:</span> hiddle<span class="token punctuation">;</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>多行文本溢出</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">overflow</span><span class="token punctuation">:</span> hiddle<span class="token punctuation">;</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span><span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span><span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>注意：由于上面的三个属性都是 CSS3 的属性，没有浏览器可以兼容，所以要在前面加一个-webkit- 来兼容一部分浏览器。</p><h2 id="十三、说说-flex-布局？flex-1-代表什么？"><a href="#十三、说说-flex-布局？flex-1-代表什么？" class="headerlink" title="十三、说说 flex 布局？flex: 1 代表什么？"></a>十三、说说 flex 布局？flex: 1 代表什么？</h2><p>flex 布局称弹性布局。采用 flex 布局的元素，称为 flex 容器，简称“容器”；它的所有子元素自动成为容器成员，称为 flex 项目，简称“项目”。</p><p>容器默认存在两根轴：水平的主轴（mainaxis）和垂直的交叉轴（crossaxis），项目默认沿主轴排列。</p><p>以下6个属性设置在容器上：</p><ul><li>flex-direction：决定主轴的方向（即项目的排列方向）。</li><li>flex-wrap：定义，如果一条轴线排不下，如何换行。</li><li>flex-flow：是flex-direction属性和flex-wrap属性的简写形式，默认值为rownowrap。</li><li>justify-content：定义了项目在主轴上的对齐方式。</li><li>align-items：定义项目在交叉轴上如何对齐。</li><li>align-content：定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</li></ul><p>以下6个属性设置在项目上：</p><ul><li>order：定义项目的排列顺序。数值越小，排列越靠前，默认为 <code>0</code>。</li><li>flex-grow：定义项目的放大比例，默认为 <code>0</code> ，即如果存在剩余空间，也不放大。</li><li>flex-shrink：定义了项目的缩小比例，默认为 <code>1</code> ，即如果空间不足，该项目将缩小。</li><li>flex-basis：定义了在分配多余空间之前，项目占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为 <code>auto</code> ，即项目的本来大小。</li><li>flex：是 <code>flex-grow</code>，<code>flex-shrink</code> 和 <code>flex-basis</code> 的简写，默认值为 <code>0 1 auto</code>。</li><li>align-self：允许单个项目有与其他项目不一样的对齐方式，可覆盖 <code>align-items</code> 属性。默认值为 <code>auto</code> ，表示继承父元素的 <code>align-items</code> 属性，如果没有父元素，则等同于 <code>stretch</code>。</li></ul><blockquote><p>推荐阅读：阮一峰的 <a href="https://ruanyifeng.com/blog/2015/07/flex-grammar.html">Flex 布局教程：语法篇</a></p></blockquote><p>flex 属性的可选值如下：</p><ul><li>当 flex 取值为 none，则计算值为 <code>0 0 auto</code>，如 <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span><span class="token property">flex</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token selector">.item</span> <span class="token punctuation">&#123;</span> <span class="token property">flex-grow</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">flex-basis</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>当 flex 取值为 auto，则计算值为 <code>1 1 auto</code>，如 <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span><span class="token property">flex</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token selector">.item</span> <span class="token punctuation">&#123;</span> <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> <span class="token property">flex-basis</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>当 flex 取值为一个非负数字 <code>a</code>，则计算值为 <code>a 1 0%</code>，如 <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span><span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token selector">.item</span> <span class="token punctuation">&#123;</span> <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> <span class="token property">flex-basis</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>当 flex 取值为一个长度 <code>b</code> 或百分比 <code>b%</code> ，则计算值为 <code>1 1 b%</code>，如 <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item-2</span> <span class="token punctuation">&#123;</span><span class="token property">flex</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token selector">.item-1</span> <span class="token punctuation">&#123;</span> <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> <span class="token property">flex-basis</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token selector">或 .item-1</span> <span class="token punctuation">&#123;</span><span class="token property">flex</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token selector">.item-1</span> <span class="token punctuation">&#123;</span> <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> <span class="token property">flex-basis</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>当 flex 取值为两个非负数字 <code>x</code> 和 <code>y</code>，则计算值为 <code>x y 0%</code>，如 <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span><span class="token property">flex</span><span class="token punctuation">:</span> 2 3<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token selector">.item</span> <span class="token punctuation">&#123;</span> <span class="token property">flex-grow</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span> <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span> <span class="token property">flex-basis</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>当 flex 取值为一个非负数字 <code>j</code> 和一个长度 <code>k</code> 或百分比 <code>k%</code>，则计算值为 <code>j 1 k%</code>，如 <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span><span class="token property">flex</span><span class="token punctuation">:</span> 2333 3222px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token selector">.item</span> <span class="token punctuation">&#123;</span> <span class="token property">flex-grow</span><span class="token punctuation">:</span> 2333<span class="token punctuation">;</span> <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> <span class="token property">flex-basis</span><span class="token punctuation">:</span> 3222px<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="十四、什么是层叠上下文？什么是层叠水平？元素的层叠顺序？层叠准则？"><a href="#十四、什么是层叠上下文？什么是层叠水平？元素的层叠顺序？层叠准则？" class="headerlink" title="十四、什么是层叠上下文？什么是层叠水平？元素的层叠顺序？层叠准则？"></a>十四、什么是层叠上下文？什么是层叠水平？元素的层叠顺序？层叠准则？</h2><p><strong>层叠上下文的概念</strong>：层叠上下文是 HTML 中的一个三维概念，如果一个元素含有层叠上下文，就说这个元素在z轴上“高人一等”，在视觉上有更高的优先级，即这个元素会优先被用户看到。</p><p><strong>层叠水平的概念</strong>：决定了同一个层叠上下文中元素在z轴上的显示顺序。</p><p><strong>层叠顺序</strong>：<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0339c71bc5d4ba59566147464d69032~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>对于上图，从上到下分别是：</p><ul><li><ol><li>背景和边框</li></ol></li><li><ol start="2"><li>负的z-index</li></ol></li><li><ol start="3"><li>块级盒</li></ol></li><li><ol start="4"><li>浮动盒</li></ol></li><li><ol start="5"><li>行内盒</li></ol></li><li><ol start="6"><li>z-index:0</li></ol></li><li><ol start="7"><li>正z-index<blockquote><p>注意: 当定位元素 <code>z-index:auto</code>，生成盒在当前层叠上下文中的层级为 0，不会建立新的层叠上下文，除非是根元素。</p></blockquote></li></ol></li></ul><p><strong>层叠准则</strong>：</p><ul><li>谁大谁上：当具有明显的层叠水平标识的时候，如生效的z-index属性值，在同一个层叠上下文领域，层叠水平值大的那一个覆盖小的那一个。</li><li>后来居上：当元素的层叠水平一致、层叠顺序相同的时候，在DOM流中处于后面的元素会覆盖前面的元素。</li></ul><blockquote><p>推荐阅读：张鑫旭的<a href="https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/">深入理解CSS中的层叠上下文和层叠顺序</a></p></blockquote><h2 id="十五、z-index属性在什么情况下会失效"><a href="#十五、z-index属性在什么情况下会失效" class="headerlink" title="十五、z-index属性在什么情况下会失效"></a>十五、z-index属性在什么情况下会失效</h2><p>通常 z-index 的使用是在有两个重叠的标签，在一定的情况下控制其中一个在另一个的上方或者下方出现。z-index值越大就越是在上层。<strong>z-index元素的position属性需要是relative，absolute或是fixed</strong>。</p><p>z-index属性在下列情况下会失效：</p><ul><li>父元素position为relative时，子元素的z-index失效。解决：父元素position改为absolute或static；</li><li>元素没有设置position属性为非static属性。解决：设置该元素的position属性为relative，absolute或是fixed中的一种；</li><li>元素在设置z-index的同时还设置了float浮动。解决：float去除，改为display：inline-block；</li></ul><h2 id="十六、width-auto-和-width-100-的区别"><a href="#十六、width-auto-和-width-100-的区别" class="headerlink" title="十六、width:auto 和 width:100%的区别"></a>十六、width:auto 和 width:100%的区别</h2><ul><li><code>width：100%</code><br>100% 表示子元素的真正宽度等于父元素的真正宽度。</li><li><code>width：auto</code><br>auto 表示子元素的 宽度+内边距+外边距+边框 等于父元素的真正宽度。</li></ul><h2 id="十七、min-width、max-width、width的包含-优先级-关系"><a href="#十七、min-width、max-width、width的包含-优先级-关系" class="headerlink" title="十七、min-width、max-width、width的包含(优先级)关系"></a>十七、min-width、max-width、width的包含(优先级)关系</h2><ul><li><code>width &lt; min-width</code>时，以 <code>min-width</code> 为主；</li><li><code>min-width &lt; width &lt; max-width</code> 时，以 <code>width</code> 为主；</li><li><code>max-width &lt; width</code> 时，以 <code>max-width</code> 为主。</li></ul><h2 id="十八、margin-值为负数是什么意思"><a href="#十八、margin-值为负数是什么意思" class="headerlink" title="十八、margin:值为负数是什么意思"></a>十八、margin:值为负数是什么意思</h2><ol><li>若元素本身没有宽度</li></ol><ul><li><p><code>margin-left</code>：会增大元素左边的宽度</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    最外层的宽度为800px    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>里层的元素没有宽度，设置了margin-left: -100px<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.wrap</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #f00<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 100px auto 0<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #007AFF<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span>-100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/63e3678a631344dc8a906b136f088a21~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p></li><li><p><code>margin-right</code>：会增大元素右边的宽度</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    最外层的宽度为800px    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>里层的元素没有宽度，设置了margin-right: -100px<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.wrap</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #f00<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 100px auto 0<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #007AFF<span class="token punctuation">;</span>    <span class="token property">margin-right</span><span class="token punctuation">:</span> -100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/297d004567fe47e4b4a0322f89b0d5b7~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p></li><li><p><code>margin-top</code>：会将本元素向上移动（后面的元素也会跟着上移）</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    最外层的宽度为800px    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>里层的元素没有宽度，设置了 margin-top: -100px <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.wrap</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #f00<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 100px auto 0<span class="token punctuation">;</span>   <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #007AFF<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> -100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有设置 <code>margin-top: -100px</code> 时：<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d872e6d3a84a4eefbd6f0cf1468b274d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p></li></ul><p>设置了 <code>margin-top: -100px</code> 时：<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b77ee0bd8cb4da185053714015ddb74~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ul><li><code>margin-bottom</code>：本元素不移动，后面的元素会上移<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  最外层的宽度为 800px ，设置了 margin: 100px  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>里层的元素没有宽度，设置了 margin-bottom: -100px <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.wrap</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #f00<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 100px auto 0<span class="token punctuation">;</span>   <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #007AFF<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> -100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.test</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>没有设置 <code>margin-bottom: -100px</code> 时：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b9d33dc19a6c42b48af4f933e7f811d0~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li></ul><p>设置了 <code>margin-bottom: -100px</code> 时：<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/249c2e0bea3347f2aae1b8cc9086e25b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ol start="2"><li>若元素本身有宽度</li></ol><ul><li><code>margin-left</code>：本元素向左移动<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    最外层的宽度为800px    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>里层的元素有宽度，设置了margin-left: -100px<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.wrap</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #f00<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 100px auto 0<span class="token punctuation">;</span>   <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #007AFF<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> -100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4ec17aaf800f4058ade101ac90b57a42~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li><li><code>margin-right</code>：本元素不动，后面的元素往左移动<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>里层的元素有宽度，设置  margin-right: -100px <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.wrap</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #f00<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 100px auto 0<span class="token punctuation">;</span>   <span class="token property">font-size</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #007AFF<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 700px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">margin-right</span><span class="token punctuation">:</span> -100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.test</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>没设置 <code>margin-right: -100px</code> 时：<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46fa268c444f4aa7a3a9fb04abd424e7~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li></ul><p>设置 <code>margin-right: -100px</code>后：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b03f7c0af16a4bbc99dde2d8e0ae7c58~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ul><li><code>margin-top</code>：会将本元素向上移动（后面的元素也会跟着上移）</li><li><code>margin-bottom</code>：本元素不移动，后面的元素会上移</li></ul><blockquote><p>推荐阅读：<a href="https://www.cnblogs.com/Ersonnnn/p/14841837.html">详述padding和margin中的负值</a></p></blockquote><h2 id="十九、font-style-属性中-italic-和-oblique-的区别？"><a href="#十九、font-style-属性中-italic-和-oblique-的区别？" class="headerlink" title="十九、font-style 属性中 italic 和 oblique 的区别？"></a>十九、font-style 属性中 italic 和 oblique 的区别？</h2><p><code>italic</code> 和 <code>oblique</code> 这两个关键字都表示“斜体”的意思。</p><p>它们的区别在于，<code>italic</code> 是使用当前字体的斜体字体，而 <code>oblique</code> 只是单纯地让文字倾斜。</p><h2 id="二十、readonly-和-disabled的区别"><a href="#二十、readonly-和-disabled的区别" class="headerlink" title="二十、readonly 和 disabled的区别"></a>二十、readonly 和 disabled的区别</h2><ul><li><p><strong>readonly 属性规定输入字段为只读。</strong></p><p>  <code>readonly</code> 属性只对<code>&lt;input type=&quot;text&quot;&gt;、&lt;input type=&quot;number&quot;&gt;、&lt;textarea&gt;和&lt;input type=&quot;password&quot;&gt;等可以输入的表单元素</code>有效。</p><p>  <code>readonly</code> 属性只是将元素设置为只读，其他操作正常，用户仍然可以使用 tab 键切换到该字段，还可以选中或拷贝其文本。</p><p>  应用：<code>readonly</code> 属性可以防止用户对值进行修改，直到满足某些条件为止（比如选中了一个复选框）。然后，需要使用 JavaScript 消除 <code>readonly</code> 值，将输入字段切换到可编辑状态。</p></li><li><p><strong>disabled 属性规定应该禁用 input 元素。</strong></p><p>  <code>disabled</code> 属性可以作用于所有的表单元素。</p><p>  <code>disabled</code> 属性阻止对元素的一切操作，例如获取焦点，点击事件等等。</p></li></ul><h2 id="二十一、overflow-scroll-时不能平滑滚动的问题怎么处理？"><a href="#二十一、overflow-scroll-时不能平滑滚动的问题怎么处理？" class="headerlink" title="二十一、overflow:scroll 时不能平滑滚动的问题怎么处理？"></a>二十一、overflow:scroll 时不能平滑滚动的问题怎么处理？</h2><p>以下代码可解决这种卡顿的问题：<code>-webkit-overflow-scrolling:touch;</code><br>因为这行代码启用了硬件加速特性，所以滑动很流畅。</p><h2 id="二十二、opacity可以有过渡效果么"><a href="#二十二、opacity可以有过渡效果么" class="headerlink" title="二十二、opacity可以有过渡效果么"></a>二十二、opacity可以有过渡效果么</h2><p>可以，实践如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.test</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.test:hover</span> <span class="token punctuation">&#123;</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> 2s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二十三、opacity为0-5的元素，背景色0-5alpha是更浅么？"><a href="#二十三、opacity为0-5的元素，背景色0-5alpha是更浅么？" class="headerlink" title="二十三、opacity为0.5的元素，背景色0.5alpha是更浅么？"></a>二十三、opacity为0.5的元素，背景色0.5alpha是更浅么？</h2><p>是的，实践如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.test</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 0.5<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当 <code>.test</code> 的 <code>background-color: rgba(255,255,255,1);</code> 时，效果如图：<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0d4be9f699b74247aede24f6fa105d90~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>当 <code>.test</code> 的 <code>background-color: rgba(255,255,255,0.5);</code> 时，效果如图：<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e24a585ea63647ceb8c86523b2e55a7c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="二十四、为什么css-选择器的查找是从右往左的"><a href="#二十四、为什么css-选择器的查找是从右往左的" class="headerlink" title="二十四、为什么css 选择器的查找是从右往左的"></a>二十四、为什么css 选择器的查找是从右往左的</h2><p>我们知道 DOM 树和 CSSOM 树会合并成 render 树，这个操作实际上就是需要将 css 附着到 DOM 树上，因此需要根据选择器提供的信息对 DOM 树进行遍历，才能将样式成功附着到对应的 DOM 元素上。</p><p>如果我们有这样一段 DOM 树：</p><pre class="line-numbers language-none"><code class="language-none">        .main      &#x2F;       \  section      aside  &#x2F; \         &#x2F;   \h1  .content .desc a      &#x2F;&#x2F;      pp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并定义一段 css：<code>.main .desc p&#123;&#125;</code> ，如果浏览器是从左往右解析 css 选择器：</p><ul><li>遍历 DOM 树</li><li>.main -&gt; .section -&gt; h1 ，发现没有找到指定的 css ，则回溯</li><li>.main -&gt; section -&gt; .content -&gt; p ，发现也没有，回溯</li><li>.main -&gt; aside -&gt; .desc ，终于成功找到了</li></ul><p>从左往右解析就是这么麻烦，但如果是从右往左的话，就可以直接找到指定的 css 样式，这样就有效减少了回溯次数，提升了css 解析的性能。</p><h2 id="二十五、link-和-import-的区别"><a href="#二十五、link-和-import-的区别" class="headerlink" title="二十五、link 和 @import 的区别"></a>二十五、link 和 @import 的区别</h2><p>两者都是外部引用 css 的方式，区别如下：</p><ul><li>link 是 XHTML 标签，无兼容问题；@import 是在 css2.1 时提出的，低版本的浏览器不支持；</li><li>link 引入 css 时，在页面载入时同时加载；@import 需要在页面完全载入以后再加载；</li><li>link 支持使用 JavaScript 去控制 DOM 修改样式，@import不支持；</li><li>link 是 XHTML 标签，除了加载 css 外，还可以定义 rss 等其他事务，@import只属于 css 范畴，只能加载 css</li></ul><h2 id="二十六、动画性能如何优化"><a href="#二十六、动画性能如何优化" class="headerlink" title="二十六、动画性能如何优化"></a>二十六、动画性能如何优化</h2><ol><li><p>动画中尽量少使用会触发重排重绘的 css 属性</p></li><li><p>使用更低耗的 <code>transform</code>、<code>opacity</code> 等属性，尽量不使用 <code>box-shadow</code>、<code>gradients</code> 等尤其消耗 GPU 的属性<br>css 属性性能消耗图如下：<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d446694b961f4aa7a0d96947cc1172ea~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p></li><li><p>尽量减少或者固定层的数量，不要在动画过程中创建层</p></li><li><p>尽量减少层的更新次数，可以使用 <code>translate3d</code> 来达到此效果</p></li></ol><hr><h2 id="一、实现一个宽高自适应的正方形"><a href="#一、实现一个宽高自适应的正方形" class="headerlink" title="一、实现一个宽高自适应的正方形"></a>一、实现一个宽高自适应的正方形</h2><ul><li>方法一：利用vw来实现<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.square</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 10vw<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>方法二：利用元素的margin/padding百分比是相对父元素width的性质来实现<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.square</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 20%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">padding-top</span><span class="token punctuation">:</span> 20%<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>方法三：利用子元素的margin-top的值来实现的<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.square</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 30%<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.square::after</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、实现一个等腰三角形"><a href="#二、实现一个等腰三角形" class="headerlink" title="二、实现一个等腰三角形"></a>二、实现一个等腰三角形</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.test</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 100px solid transparent<span class="token punctuation">;</span><span class="token comment">/* 需要哪个方向的三角形，就保留哪个方向的代码即可 */</span>  <span class="token property">border-top-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>     <span class="token comment">/* 向上 */</span>  <span class="token property">border-right-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token comment">/* 向右 */</span>  <span class="token property">border-bottom-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> <span class="token comment">/* 向下 */</span>  <span class="token property">border-left-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span> <span class="token comment">/* 向左 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>效果如下：<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68d370f12fb2461ab3d8f6fb73035ba2~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li></ul><pre class="line-numbers language-none"><code class="language-none">.test &#123;  width: 0;  height: 0;  border: 100px solid transparent;  border-top-color: red;  border-left-color: red;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c4f3ea14a6a148d682610b560159981e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="三、实现一个扇形"><a href="#三、实现一个扇形" class="headerlink" title="三、实现一个扇形"></a>三、实现一个扇形</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.test</span> <span class="token punctuation">&#123;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 100px solid transparent<span class="token punctuation">;</span><span class="token comment">/* 需要哪个方向的圆，就保留哪个方向的代码即可 */</span>  <span class="token property">border-top-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>      <span class="token comment">/* 向上 */</span>  <span class="token property">border-right-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token comment">/* 向右 */</span>  <span class="token property">border-bottom-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token comment">/* 向下 */</span>  <span class="token property">border-left-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>  <span class="token comment">/* 向左 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2f9e520ff6ed4522bacbe97b1e2e6bfb~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="四、实现一个半圆"><a href="#四、实现一个半圆" class="headerlink" title="四、实现一个半圆"></a>四、实现一个半圆</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>上半圆<br>长度设为宽度的两倍</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.test</span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 100px 100px 0 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c368a5ab1cd4501b20d8437fd1002d4~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p></li><li><p>右半圆<br>宽度设为长度的两倍</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.test</span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 0 100px 100px 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d00fbdf814bc47d491002ce5668108b4~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p></li><li><p>下半圆<br>长度设为宽度的两倍</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.test</span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 0px 0px 100px 100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f543e1bd65241f3812467f53c4ea3f7~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p></li><li><p>左半圆<br>宽度设为长度的两倍</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.test</span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 100px 0px 0px 100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f477c20af33c4360ae9dad801e622abf~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p></li></ul><h2 id="五、实现一个圆环"><a href="#五、实现一个圆环" class="headerlink" title="五、实现一个圆环"></a>五、实现一个圆环</h2><ol><li>两个标签的嵌套<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.parent</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.child</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用伪元素，before／after<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.parent</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.parent:after</span> <span class="token punctuation">&#123;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用 border<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.parent</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 50px solid blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用 border-shadow<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.parent</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 0 50px blue<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 或者 */</span><span class="token selector">.parent</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 0 50px blue inset<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用 radial-gradient<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.parent</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-radial-gradient</span><span class="token punctuation">(</span>circle closest-side<span class="token punctuation">,</span> skyblue 50%<span class="token punctuation">,</span> blue 50%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>效果如图：<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1b4a774eb1634efabfde7499db5db3eb~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li></ol><h2 id="六、实现两栏布局"><a href="#六、实现两栏布局" class="headerlink" title="六、实现两栏布局"></a>六、实现两栏布局</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>whole<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span><span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">div</span><span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span>500px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>方法一：浮动布局 </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.left</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span><span class="token punctuation">&#123;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>aqua<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>左侧栏固定宽度向左浮动，右侧主要内容则用margin-left留出左侧栏的宽度，默认宽度为auto，自动填满剩下的宽度。</p></li><li><p>方法二：BFC</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.whole</span><span class="token punctuation">&#123;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.left</span><span class="token punctuation">&#123;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>aqua<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方法三：浮动布局+负外边距（双飞翼布局的两栏版）</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.left</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">margin-right</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>aqua<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>左侧固定栏指定一个右侧的100%的负外边距，为整个屏幕的宽度，这就使得right最左侧可以与屏幕最左侧对齐。</p></li></ul><p>此时right的宽度是100%，因此需要指定一个左侧的外边距用于空出左侧栏的位置，即左侧栏的宽度300px</p><ul><li>方法四：绝对定位<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.left</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span><span class="token punctuation">&#123;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>aqua<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>方法五：flex盒模型<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.whole</span><span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.left</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span><span class="token punctuation">&#123;</span>    <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>aqua<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>方法六：float+calc()函数 <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.left</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span><span class="token punctuation">&#123;</span>    <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% - 300px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>aqua<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/986c0209c07c4a09a843c56b25d8db38~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="七、实现三栏布局"><a href="#七、实现三栏布局" class="headerlink" title="七、实现三栏布局"></a>七、实现三栏布局</h2><p>三栏布局一般指的是页面中一共有三栏，<strong>左右两栏宽度固定，中间自适应</strong>的布局。</p><ul><li><p>方法一：浮动定位布局：两边使用 float，中间使用 margin</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>左侧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>右侧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.wrap</span><span class="token punctuation">&#123;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.left</span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> coral<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span><span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.middle</span><span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> 220px<span class="token punctuation">;</span>  <span class="token property">margin-right</span><span class="token punctuation">:</span> 220px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> lightpink<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方法二：绝对定位布局：两边使用 absolute，中间使用 margin</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>左侧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>右侧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.wrap</span><span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.left</span><span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> coral<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span><span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.middle</span><span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0 200px 0 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> lightpink<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方法三：flex布局</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>左侧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>右侧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.wrap</span><span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.left</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> coral<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.middle</span><span class="token punctuation">&#123;</span>    <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 10px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> lightpink<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方法四：grid 布局</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>左侧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>右侧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.wrap</span><span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 200px auto 200px<span class="token punctuation">;</span>    <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">grid-column-gap</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.left</span><span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> coral<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span><span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.middle</span><span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> lightpink<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方法五：两边使用 float 和负 margin</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>左侧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>右侧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.wrap</span><span class="token punctuation">&#123;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.middle</span><span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 210px 0 110px<span class="token punctuation">;</span>               <span class="token property">background</span><span class="token punctuation">:</span> lightpink<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token selector">.left</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> coral<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -200px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方法六：双飞翼布局</p></li><li><p>方法七：圣杯布局</p><h2 id="八、实现双飞翼布局"><a href="#八、实现双飞翼布局" class="headerlink" title="八、实现双飞翼布局"></a>八、实现双飞翼布局</h2></li></ul><p>左、中、右三个盒子同级，在中间盒子里放一个小盒子，设置小盒子的margin，从而留出两侧盒子位置。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>中间弹性区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>左边栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>右边栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.middle</span><span class="token punctuation">&#123;</span>  <span class="token comment">/* 处理中间栏的内容被遮盖问题 */</span>  <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0 200px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> lightpink<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.left</span><span class="token punctuation">&#123;</span>   <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span><span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> -200px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> lightgreen<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现的布局如下：<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/44376a1388194e6da0b6bc4e611b9665~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="九、实现圣杯布局"><a href="#九、实现圣杯布局" class="headerlink" title="九、实现圣杯布局"></a>九、实现圣杯布局</h2><p>左、中、右三个盒子在一个同一个盒子中，设置外侧盒子的padding，从而留出两侧盒子位置。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>Header内容区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>中间弹性区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>左边栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>右边栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>Footer内容区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">header, footer</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> darkseagreen<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.container</span><span class="token punctuation">&#123;</span>     <span class="token property">height</span><span class="token punctuation">:</span>500px<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.middle</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>     <span class="token property">background-color</span><span class="token punctuation">:</span> deeppink<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.left</span><span class="token punctuation">&#123;</span>     <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>     <span class="token property">left</span><span class="token punctuation">:</span> -200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> darkorchid<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -200px<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> -200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现的布局如下：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/73f732cab2204dd08e8836841ece8e03~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="十、怎么画0-5px的细线"><a href="#十、怎么画0-5px的细线" class="headerlink" title="十、怎么画0.5px的细线"></a>十、怎么画0.5px的细线</h2><ul><li><p>viewport<br>html 文件的 <code>&lt;head&gt;</code> 头部将 <code>&lt;meta&gt;</code> 设置如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width,initial-sacle=0.5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在页面中正常绘制线条即可。<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0978bb425aa24708afca7b6e52341148~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p></li><li><p>阴影box-shadow</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.hr</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0.5px 0 #000<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c16be49a5f540dd8c1cb13a17856417~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p></li><li><p>缩放transform:scale()</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.hr</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，画出来的线条变虚了，但粗细没有改变<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/378dcfcc12584de09eaa3a4c17bba2fc~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p></li></ul><p>因此还需要给线条加上 <code>transform-origin: 50% 100%</code>：<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d8be6f8d67db404c9a8a35525e25ed22~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ul><li>线性渐变linear-gradient<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.hr</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>0deg<span class="token punctuation">,</span> #fff<span class="token punctuation">,</span> #000<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3e8844e27aee46b583d3871567d5dd3c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li></ul><h2 id="十一、怎么随机生成一堆不难看的颜色"><a href="#十一、怎么随机生成一堆不难看的颜色" class="headerlink" title="十一、怎么随机生成一堆不难看的颜色"></a>十一、怎么随机生成一堆不难看的颜色</h2><p>网页中颜色的使用方式有以下几种：</p><ul><li>颜色名称：如 <code>red</code>、<code>green</code>、<code>blue</code> 等</li><li>十六进制颜色，每两位代表红或绿或蓝的比例：如 <code>#ffffff白色</code>、<code>#000000黑色</code> 等</li><li>rgba：如 <code>rgba(red, green, blue, 1)</code>，可选参数有：<ul><li>r：红色值。可填正整数 | 百分数。</li><li>g：绿色值。可填正整数 | 百分数。</li><li>b：蓝色值。可填正整数 | 百分数。</li><li>a：透明度。取值在 <code>0 ~ 1</code> 之间。</li></ul></li><li>hsla颜色值：如 <code>hsla(360, 50%, 50%, 0.5)半透明红色</code>，可选参数有：<ul><li>h：色调。0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色，取值为：0 - 360。</li><li>s：饱和度。取值在 <code>0.0% ~ 100.0%</code> 之间。</li><li>l：亮度。取值在 <code>0.0% ~ 100.0%</code> 之间。</li><li>a：透明度。取值在 <code>0 ~ 1</code> 之间。</li></ul></li></ul><p><strong>实践</strong>：<br>声明 html 样式结构如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ul<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>声明 js 代码结构如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// code</span><span class="token punctuation">&#125;</span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//获取 ul 节点</span>    <span class="token keyword">var</span> oUl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取li标签</span>    <span class="token keyword">var</span> aLi <span class="token operator">=</span> oUl<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//循环li</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> aLi<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      aLi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token function">Color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面补充 js 中的 <code>createColor</code> 函数。</p><p>生成方式一：十六进制</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 写法一：</span><span class="token keyword">function</span> <span class="token function">createColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> color <span class="token operator">=</span> <span class="token string">'#'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      color <span class="token operator">+=</span> <span class="token string">'0123456789abcdef'</span><span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> color<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 写法二：</span><span class="token keyword">function</span> <span class="token function">createColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">'#'</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token keyword">return</span> <span class="token punctuation">(</span>color <span class="token operator">+=</span>  <span class="token string">'0123456789abcdef'</span><span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>             <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>color<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">?</span> color <span class="token operator">:</span> arguments<span class="token punctuation">.</span><span class="token function">callee</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b49b61821f14cd3a1045a4eeb89849e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>生成方式二：rgba</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> r <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> g <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> b <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> a <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果是 rgb ，则固定该值即可</span>    <span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">rgba(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>r<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>g<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>b<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>a<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token keyword">return</span> color<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>rgba：<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ae29545ee3154f53a24e3208a9bfec18~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>rgb：<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/484ec4c6023744939337603edbb2ba6b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>生成方式三：hsla</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> colorAngle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hsla(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>colorAngle<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, 100%, 50%, 1)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token keyword">return</span> color<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa908ee19e7948e78e7f616fb6df69d5~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="十二、用-transition-和-animation-分别写出对应的样式实现-360°旋转"><a href="#十二、用-transition-和-animation-分别写出对应的样式实现-360°旋转" class="headerlink" title="十二、用 transition 和 animation 分别写出对应的样式实现 360°旋转"></a>十二、用 transition 和 animation 分别写出对应的样式实现 360°旋转</h2><ul><li><p><code>transition</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>transition<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">div:hover</span> <span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> transform 5s linear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>animation</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>animation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> turn 5s linear<span class="token punctuation">;</span>  <span class="token comment">/* 注意：值没有逗号 */</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> turn</span> <span class="token punctuation">&#123;</span>    <span class="token selector">from</span><span class="token punctuation">&#123;</span>      <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">to</span><span class="token punctuation">&#123;</span>      <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="十三、实现一个点击之后从中心旋转并放大的正方形"><a href="#十三、实现一个点击之后从中心旋转并放大的正方形" class="headerlink" title="十三、实现一个点击之后从中心旋转并放大的正方形"></a>十三、实现一个点击之后从中心旋转并放大的正方形</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.test</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.click</span> <span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span>5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> transform 1s linear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    div<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 求职 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 八股文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备战大厂前端面试之HTML篇</title>
      <link href="/2022/03/08/bei-zhan-da-han-qian-duan-mian-shi-zhi-html-pian/"/>
      <url>/2022/03/08/bei-zhan-da-han-qian-duan-mian-shi-zhi-html-pian/</url>
      
        <content type="html"><![CDATA[<p>前端面试题系列：</p><ul><li>【1】备战前端实习面试之HTML篇</li><li>【2】<a href="https://hcyety.github.io/2022/03/08/bei-zhan-da-han-qian-duan-shi-xi-zhi-css-pian/">备战前端实习面试之CSS篇</a></li><li>【3】<a href="">备战前端实习面试之JavaScript篇</a></li><li>【4】<a href="">备战前端实习面试之React篇</a></li><li>【5】<a href="">备战前端实习面试之Node.js篇</a></li><li>【6】<a href="">备战前端实习面试之浏览器原理篇</a></li><li>【8】<a href="">备战前端实习面试之性能优化篇</a></li><li>【7】<a href="">备战前端实习面试之计算机网络篇</a></li><li>【9】<a href="">备战前端实习面试之手写代码篇</a></li><li>【9】<a href="">备战前端实习面试之代码输出结果篇</a></li></ul><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="一、html-常用的标签"><a href="#一、html-常用的标签" class="headerlink" title="一、html 常用的标签"></a>一、html 常用的标签</h2><p><code>h</code>、<code>p</code>、<code>hr</code>、<code>br</code>、<code>div</code>、<code>span</code>、<code>ul li</code>、<code>ol li</code>、<code>img</code>、<code>a</code>、<code>input</code>、<code>label</code>、<code>textarea</code>、<code>select</code>、<code>form</code>、<code>head</code>、<code>nav</code>、<code>footer</code>、<code>article</code>、<code>section</code>、<code>aside</code>、<code>audio</code>、<code>video</code>  </p><h2 id="二、html-新特性"><a href="#二、html-新特性" class="headerlink" title="二、html 新特性"></a>二、html 新特性</h2><ol><li><p>新增语义化标签<br><code>header</code>头部、<code>footer</code>底部、<code>nav</code>导航栏、<code>article</code>主要内容、<code>aside</code>侧边栏、<code>section</code>区块（有语义化的div）、<code>meau</code>菜单</p></li><li><p>新增媒体元素<br>①<code>audio</code>：音频</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span></span> <span class="token attr-name">controls</span> <span class="token attr-name">autoplay</span> <span class="token attr-name">loop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>true<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>属性：</p></li></ol><ul><li>controls 控制面板</li><li>autoplay 自动播放</li><li>loop=‘true’ 循环播放<br>②<code>video</code>：视频<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span></span> <span class="token attr-name">poster</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>imgs/aa.jpg<span class="token punctuation">'</span></span> <span class="token attr-name">controls</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>属性：</li><li>poster：指定视频还没有完全下载完毕，或者用户还没有点击播放前显示的封面。默认显示当前视频文件的第一帧画面，当然通过 poster 也可以自己指定。</li><li>controls 控制面板</li><li>width</li><li>height</li></ul><ol start="3"><li>新增用于绘画的 canvas 属性</li><li>新增本地存储方式：<code>sessionStorage</code>、 <code>localStorage</code></li><li>新的技术：<code>webworker</code>、<code>websocket</code></li><li>新增表单控件：<code>calendar</code>、<code>date</code>、<code>time</code>、<code>email</code>、<code>url</code>、<code>search</code></li></ol><h2 id="三、对语义化的理解"><a href="#三、对语义化的理解" class="headerlink" title="三、对语义化的理解"></a>三、对语义化的理解</h2><p>语义化是指根据内容的结构化（内容语义化），选择合适的标签（代码语义化），也就是说用正确的标签做正确的事。</p><p><strong>好处：</strong></p><ul><li>对开发者友好，让人容易理解，利于代码可读性</li><li>对机器友好，让搜索引擎更容易读懂，利于 SEO</li></ul><h2 id="四、说说-web-worker"><a href="#四、说说-web-worker" class="headerlink" title="四、说说 web worker"></a>四、说说 web worker</h2><p><code>web worker</code> 的作用是为 JavaScript 创造多线程环境，允许主线程创建 <code>Worker 线程</code>，然后将一些任务分配给其运行。</p><p>在主线程运行的同时，Worker 线程在后台运行，两者互不干扰，等到 Worker 线程完成任务后就将结果返回给主线程。这样的好处是：一些计算密集型或高延迟的任务，被 Worker 线程负担了，主线程就会很流畅，不会被阻塞或拖慢（通过 <code>postMessage</code> 将结果传回到主线程即可）。</p><p>Worker 线程一旦新建成功，就会始终运行，不会被主线程上的活动（如用户点击按钮、提交表单）打断。这样有利于随时响应主线程的通信。但是，这也造成了 <code>Worker</code> 比较耗费资源，不应该过度使用，而且一旦使用完毕，就应该关闭。</p><p>这里有几个注意点：</p><ol><li>同源限制<br>分配给 Worker 线程的脚本文件，必须和主线程脚本文件同源。</li><li>脚本限制<br>Worker 线程不能执行 <code>alert()</code> 方法和 <code>confirm()</code> 方法，但可以使用 <code>XMLHttpRequest</code> 对象发出 <code>AJAX</code> 请求。</li><li>DOM 限制<br>Worker 线程所在的全局对象，与主线程不一样，无法读取主线程所在网页的 DOM 对象，也无法使用 <code>document</code>、<code>window</code>、<code>parent</code> 这些对象。但是 Worker 线程可以使用 <code>navigator</code> 对象和 <code>location</code> 对象。</li><li>通信联系<br>Worker 线程和主线程不在同一个上下文环境，不能直接通信，必须通过消息完成。</li><li>文件限制<br>Worker 线程无法读取本地文件，即不能打开本机的文件系统，它所加载的脚本，必须来自于网络。</li></ol><blockquote><p><a href="https://www.ruanyifeng.com/blog/2018/07/web-worker.html">阮一峰：Web Worker 使用教程</a></p></blockquote><h2 id="五、HTML5-的离线储存的工作原理是什么？该怎么使用？如何进行管理和加载？"><a href="#五、HTML5-的离线储存的工作原理是什么？该怎么使用？如何进行管理和加载？" class="headerlink" title="五、HTML5 的离线储存的工作原理是什么？该怎么使用？如何进行管理和加载？"></a>五、HTML5 的离线储存的工作原理是什么？该怎么使用？如何进行管理和加载？</h2><p>离线存储指的是：在用户没有连接网络时，可以正常访问站点或应用，当连接上网络后，更新用户机器上的缓存文件。</p><p><strong>原理</strong>：html5 的离线缓存是基于一个新建的 <code>.appcache</code> 文件的缓存机制，即通过这个文件上的解析清单 离线缓存资源。之后当网络在离线状态下时，浏览器会通过被离线存储的数据进行页面展示。</p><p><strong>使用方法</strong>：</p><ol><li>首先要创建一个和 <code>.html</code> 文件同名的 <code>.manifest</code> 文件，然后在页面头部插入 <code>manifest</code> 属性：<code>&lt;html lang=&quot;en&quot; manifest=&quot;index.manifest&quot;&gt;</code></li><li>在 <code>cache.manifest</code> 文件中编写需要离线存储的资源：<pre class="line-numbers language-none"><code class="language-none">CACHE:  js&#x2F;app.js  css&#x2F;style.cssNETWORK:  resourse&#x2F;logo.pngFALLBACK:  &#x2F; &#x2F;offline.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li><strong>CACHE</strong>: 表示需要离线存储的资源列表。由于包含 <code>.manifest</code> 文件的页面将被自动离线存储，所以不需要把页面自身也列出来。</li><li><strong>NETWORK</strong>: 表示在它下面列出来的资源只有在在线的情况下才能访问，他们不会被离线存储。不过，如果在 CACHE 和 NETWORK 中有一个相同的资源，那么这个资源还是会被离线存储，也就是说 CACHE 的优先级更高。</li><li><strong>FALLBACK</strong>: 表示如果访问第一个资源失败，那么就使用第二个资源来替换他。比如上面这个文件表示的就是如果访问根目录下任何一个资源失败了，那么就去访问 offline.html 。</li></ul><ol start="3"><li>在离线状态时，操作 window.applicationCache 进行离线缓存的操作。</li></ol><p><strong>更新缓存的方案</strong>：理所当然的就是更新 <code>.manifest</code> 文件</p><p><strong>管理和加载</strong>：</p><ul><li>在线情况下，浏览器发现 html 头部有 <code>manifest</code> 属性，它会请求 <code>.manifest</code> 文件，<strong>如果是第一次访问页面</strong>，那么浏览器就会根据 <code>.manifest</code> 文件的内容下载相应的资源并进行离线存储；<strong>如果已经访问过页面并进行过离线存储</strong>，那么浏览器会使用离线的资源加载页面，然后对比新旧 <code>.manifest</code> 文件，若文件发生改变就会重新下载文件中的资源并进行存储。</li><li>离线情况下，浏览器会直接使用离线存储的资源加载页面。</li></ul><p><strong>注意事项</strong>：<br>（1）浏览器对缓存数据的容量限制可能不太一样（某些浏览器设置的限制是每个站点 5MB）。<br>（2）如果 <code>.manifest</code> 文件，或者内部列举的某一个文件不能正常下载，整个更新过程都将失败，浏览器继续全部使用老的缓存。<br>（3）引用 <code>.manifest</code> 的 html 必须与 <code>.manifest</code> 文件同源，在同一个域下。<br>（4）<code>FALLBACK</code> 中的资源必须和 <code>.manifest</code> 文件同源。<br>（5）当一个资源被缓存后，该浏览器直接请求这个绝对路径也会访问缓存中的资源。<br>（6）站点中的其他页面即使没有设置 <code>manifest</code> 属性，请求的资源如果在缓存中也从缓存中访问。<br>（7）当 <code>.manifest</code> 文件发生改变时，资源请求本身也会触发更新。</p><h2 id="六、DOCTYPE（文档类型）的作用？严格模式和混杂模式的区别？"><a href="#六、DOCTYPE（文档类型）的作用？严格模式和混杂模式的区别？" class="headerlink" title="六、DOCTYPE（文档类型）的作用？严格模式和混杂模式的区别？"></a>六、DOCTYPE（文档类型）的作用？严格模式和混杂模式的区别？</h2><p><code>!DOCTYPE</code> 是用来告诉浏览器要以 <code>HTML5</code> 标准解析页面，如果不写，则进入混杂模式</p><ul><li>严格模式（标准模式）：以 w3c 标准解析代码</li><li>混杂模式（怪异模式）：浏览器用自己的方式解析代码。混杂模式通常模拟老式浏览器的行为，以防止老站点无法工作</li></ul><h2 id="七、常⽤的-meta-标签有哪些"><a href="#七、常⽤的-meta-标签有哪些" class="headerlink" title="七、常⽤的 meta 标签有哪些"></a>七、常⽤的 meta 标签有哪些</h2><p>meta 标签由 name 和 content 属性定义，用来描述网页文档的属性。<br>|属性|描述|值|例子|<br>|:–:|:–:|:–:|:–|<br>|charset|HTML文档的编码类型|utf-8<br>gbk|<code>&lt;meta charset=&quot;UTF-8&quot; &gt;</code>|<br>|keywords|页面关键词|自定义|<code>&lt;meta name=&quot;keywords&quot; content=&quot;关键词&quot; /&gt;</code>|<br>|description|页面描述|自定义|<code>&lt;meta name=&quot;description&quot; content=&quot;页面描述内容&quot; /&gt;</code>|<br>|refresh|页面重定向和刷新|自定义|<code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=&quot; /&gt;</code>|<br>|viewport|适配移动端，可以控制视口的大小和比例|width viewport ：宽度<br>height viewport ：高度<br>initial-scale ：初始缩放比例<br>maximum-scale ：最大缩放比例<br>minimum-scale ：最小缩放比例<br>user-scalable ：是否允许用户缩放(yes/no）|<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;&gt;</code>|<br>|robots|搜索引擎索引方式|all：文件将被检索，且页面上的链接可以被查询；<br>none：文件将不被检索，且页面上的链接不可以被查询；<br>index：文件将被检索；<br>follow：页面上的链接可以被查询；<br>noindex：文件将不被检索；<br>nofollow：页面上的链接不可以被查询。|<code>&lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt;</code>|</p><h2 id="八、iframe-有那些优点和缺点"><a href="#八、iframe-有那些优点和缺点" class="headerlink" title="八、iframe 有那些优点和缺点"></a>八、iframe 有那些优点和缺点</h2><p>iframe 元素会创建包含另外一个文档的内联框架（即行内框架）。<br>优点：</p><ul><li>用来加载速度较慢的内容（如广告）</li><li>可以使脚本可以并行下载</li><li>可以实现跨子域通信</li></ul><p>缺点：</p><ul><li>iframe 会阻塞主页面的 onload 事件</li><li>无法被一些搜索引擎索识别</li><li>会产生很多页面，不容易管理</li></ul><h2 id="九、defer-和-async-的区别"><a href="#九、defer-和-async-的区别" class="headerlink" title="九、defer 和 async 的区别"></a>九、defer 和 async 的区别</h2><p><code>defer</code> 和 <code>async</code> 都是 <code>&lt;script&gt;</code> 标签的属性。</p><p>从下图可以得知：<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5b83efb78914203b16106fb9215b5a0~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br><strong>defer：</strong></p><ul><li>在 script 标签添加 defer 属性，就可以让这个 script 外联的 js 变成异步加载。当 html 解析过程中碰到这个 script ，就会开辟一个新线程来下载脚本（这个脚本的下载和 html 的解析是同步的），当脚本下载完毕后不会立即执行，而是等待 html 解析完毕后才开始执行。</li><li>所有 defer 的 js 代码都保证按顺序执行。</li></ul><p><strong>async：</strong></p><ul><li>在 script 标签添加 async 属性后，html 解析过程中碰到这个 script ，也会开辟新线程来同步下载脚本，但下载完毕后会立即执行脚本，并中断 html 解析流程，等到脚本执行完之后再接着解析 html 。</li><li>async 的 js 代码不能保证按顺序执行，而是谁先下载完就先执行哪个脚本。</li></ul><h2 id="十、src-和-href-的区别"><a href="#十、src-和-href-的区别" class="headerlink" title="十、src 和 href 的区别"></a>十、src 和 href 的区别</h2><ul><li>src 会将其指向的资源下载并应用到文档内，这时候它会暂停其他资源的下载，直到该资源加载、编译、执行完毕。</li><li>href 会与指向的网络资源建立链接关系，它会与其他资源并行下载，不会停止对当前文档的处理。</li></ul><h2 id="十一、行内元素、块级元素，以及两者的区别"><a href="#十一、行内元素、块级元素，以及两者的区别" class="headerlink" title="十一、行内元素、块级元素，以及两者的区别"></a>十一、行内元素、块级元素，以及两者的区别</h2><ol><li>行内元素有：<code>a</code>、 <code>br</code>、 <code>cite</code>、 <code>em</code>、 <code>i</code>、 <code>img</code>、 <code>input</code>、 <code>label</code>、 <code>select</code>、 <code>span</code>、 <code>strong</code>、 <code>sub</code>、 <code>sup</code>、 <code>textarea</code></li><li>块级元素有：<code>div</code>、<code>p</code>、<code>form</code>、<code>ul</code>、<code>ol</code>、<code>dl</code>、<code>h</code>、<code>hr</code>、<code>table</code>、<code>menu</code>、</li><li>区别：</li></ol><ul><li>块级元素独占一行，行内元素不会</li><li>块级元素可以设置宽高，行内元素不能</li><li>块级元素可以包含行内元素和块级元素，行内元素不能包含块级元素。</li><li>块级元素可以设置 <code>margin</code> 和 <code>padding</code> ，行内元素的水平方向的 <code>padding-left</code>、<code>padding-right</code>、<code>margin-left</code>、<code>margin-right</code> 都产生边距效果，但是竖直方向的 <code>padding-top</code>、<code>padding-bottom</code>、<code>margin-top</code>、<code>margin-bottom</code> 都不会产生边距效果。（水平方向有效，竖直方向无效）<blockquote><p>若是设置为行内块级元素，它也不能独占一行，但能设置宽高</p></blockquote></li></ul><h2 id="十二、title-与-h1-的区别、b-与-strong-的区别、i-与-em-的区别"><a href="#十二、title-与-h1-的区别、b-与-strong-的区别、i-与-em-的区别" class="headerlink" title="十二、title 与 h1 的区别、b 与 strong 的区别、i 与 em 的区别"></a>十二、title 与 h1 的区别、b 与 strong 的区别、i 与 em 的区别</h2><p><code>title</code> 属性没有明确意义只表示是个标题，<code>h1</code> 则表示层次明确的标题。<br><code>strong</code> 标签有语义，是起到加重语气的效果，而 <code>b</code> 标签是没有的。虽然都能加粗字体，但搜索引擎更侧重 <code>strong</code> 标签。<br><code>i</code> 内容展示为斜体，<code>em</code> 表示强调的文本</p><h2 id="十三、label-的作用"><a href="#十三、label-的作用" class="headerlink" title="十三、label 的作用"></a>十三、label 的作用</h2><p><code>&lt;label&gt;</code> 标签是用来定义故意表单控件的关系。</p><p>作用：用于绑定一个表单元素，当点击 <code>label</code> 标签的时候，被绑定的表单元素就会获得输入焦点。</p><ul><li>  使用方法1：<pre class="line-numbers language-none"><code class="language-none">&lt;label for&#x3D;&quot;mobile&quot;&gt;Number:&lt;&#x2F;label&gt;&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;mobile&quot;&#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>  使用方法2：<pre class="line-numbers language-none"><code class="language-none">&lt;label&gt;Date:&lt;input type&#x3D;&quot;text&quot;&#x2F;&gt;&lt;&#x2F;label&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="十四、canvas-和-svg-的区别"><a href="#十四、canvas-和-svg-的区别" class="headerlink" title="十四、canvas 和 svg 的区别"></a>十四、canvas 和 svg 的区别</h2><ul><li>canvas 是画布，适合图形密集型的游戏，不支持事件处理</li><li>svg 是矢量图，不依赖分辨率，不适合游戏，适合大型渲染区域（地图），支持事件处理</li></ul><h2 id="十五、渐进增强、优雅降级，以及两者的区别"><a href="#十五、渐进增强、优雅降级，以及两者的区别" class="headerlink" title="十五、渐进增强、优雅降级，以及两者的区别"></a>十五、渐进增强、优雅降级，以及两者的区别</h2><ol><li>渐进增强：针对低版本浏览器也能保证基础功能，然后对高级浏览器改进追加功能（向上兼容）。</li><li>优雅降级：一开始就构建站点的完整功能，然后针对浏览器进行测试和修复（向下兼容）。</li><li>区别：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 求职 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 八股文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端必须知道的开发调试知识</title>
      <link href="/2022/01/22/qian-duan-bi-xu-zhi-dao-de-kai-fa-diao-shi-zhi-shi/"/>
      <url>/2022/01/22/qian-duan-bi-xu-zhi-dao-de-kai-fa-diao-shi-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器控制台面板"><a href="#浏览器控制台面板" class="headerlink" title="浏览器控制台面板"></a>浏览器控制台面板</h2><p>浏览器的控制台有很多可供开发者 debug 的功能，在如下图片红色框中可以看到有多个面板各司其职，开发人员可以根据自己的实际情况在相应的板块进行调试<br><img src="https://s4.ax1x.com/2022/01/23/749WDO.png" alt="浏览器控制台面板"></p><h3 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h3><p>动态修改元素和样式</p><ul><li>点击 <code>.cls</code> 动态修改元素的 <code>class</code> ，输入字符串可以动态的给元素添加类名，勾选/取消类名可以动态的查看类名生效效果 <img src="https://s4.ax1x.com/2022/01/22/7hb98e.png" alt=".cls 修改样式"></li><li>点击具体的样式值（字号、颜色、宽度高度等）可以进行编辑，浏览器内容区域可以实时预览 <img src="https://s4.ax1x.com/2022/01/22/7hbVVP.png" alt="修改样式值"></li><li><code>Computed</code> 下点击样式里的箭头可以跳转到 <code>styles</code> 面板中的 css 规则 <img src="https://s4.ax1x.com/2022/01/22/7hbFKA.png" alt="定位 css 规则"></li><li>可以用以下 2 种方式强制激活伪类：<ul><li>选中具有伪类的元素，点击 <code>:hov</code> <img src="https://s4.ax1x.com/2022/01/22/7hbPvd.png" alt=":hov 进行固定"></li><li>DOM 树右键菜单，选择 <code>Force State</code><h3 id="Console"><a href="#Console" class="headerlink" title="Console"></a>Console</h3><pre class="line-numbers language-none"><code class="language-none">console.logconsole.warnconsole.errorconsole.debugconsole.infoconsole.table：更加直观的展示 JSON 和数组数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>可以看到共有 6 种打印方式<img src="https://s4.ax1x.com/2022/01/22/7hHXHx.png" alt="6 种打印方式">，并且在 <code>Console</code> 面板的左侧可以选择等级，对日志进行分类查看（如果找不到左侧的分类，则是因为被隐藏了，点击按钮打开即可<img src="https://s4.ax1x.com/2022/01/22/7hbe58.png" alt="打印 Console 左侧面板">）</li></ul></li></ul><p>值得一提的是 <code>console.table</code> ，该打印可以直观的展示 JSON 和数组数据，如图：<img src="https://s4.ax1x.com/2022/01/22/7hba24.png" alt="console.table"></p><p>由于打印字体在未经样式设置时是统一的，如果想醒目的查看的打印信息，可以通过占位符的方式修改打印信息以达到目的，先看看都有什么占位符：</p><pre class="line-numbers language-none"><code class="language-none">%s：字符串占位符；%o：对象占位符；%c：样式占位符；%d：数字占位符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>那么通过一个例子来看看怎么使用这些占位符，帮助我们在开始过程中更加快速的查看打印信息：<br><img src="https://s4.ax1x.com/2022/01/22/7hbGV0.png" alt="占位符例子"></p><h3 id="Sorce"><a href="#Sorce" class="headerlink" title="Sorce"></a>Sorce</h3><p><img src="https://s4.ax1x.com/2022/01/22/7hbvss.png" alt="Sorce 面板概览"></p><ul><li>区域①：页面资源文件目录树</li><li>区域②：代码预览区域</li><li>区域③：Debug 工具栏，从左到右依次为<ul><li>暂停（继续）</li><li>单步跳过</li><li>进入函数</li><li>跳出函数</li><li>单步执行</li><li>激活（关闭）所有断点</li><li>代码执行异常处自动断点</li></ul></li><li>区域④：断点调试器</li></ul><h4 id="Break-Points-与-Watch"><a href="#Break-Points-与-Watch" class="headerlink" title="Break Points 与 Watch"></a>Break Points 与 Watch</h4><p><img src="https://s4.ax1x.com/2022/01/23/74SFKO.png" alt="Break Points 与 Watch"></p><ul><li>在本地代码中使用关键字 <code>debugger</code> 或在代码预览区域的行号设置断点</li><li>执行到断点处时代码暂停执行</li><li>展开 <code>Breakpoints</code> 列表可以查看断点列表，勾选/取消可以激活/禁用对应断点</li><li>暂停状态下，鼠标 hover 变量可以查看变量的值</li><li>在调试器 <code>Watch</code> 右侧点击 + 可以添加对变量的监控，查看该变量的值<h4 id="Scope-与-Call-Stack"><a href="#Scope-与-Call-Stack" class="headerlink" title="Scope 与 Call Stack"></a>Scope 与 Call Stack</h4><img src="https://s4.ax1x.com/2022/01/23/74SlM8.png" alt="Scope 与 Call Stack"></li><li>展开 <code>Scope</code> 可以查看作用域列表（包含闭包）</li><li>展开 <code>Call Stack</code> 可以查看当前 JavaScript 代码的调用栈<h3 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h3><img src="https://s4.ax1x.com/2022/01/23/74SjQf.png" alt="Performance 面板概览"></li><li>区域①：控制面板</li><li>区域②：概览面板<ul><li>FPS：每秒帧数</li><li>CPU：处理各个任务花费的时间</li><li>NET：各个请求花费的时间</li></ul></li><li>区域③：线程面板<ul><li>Frames：帧线程</li><li>Main：主线程，负责执行 JavaScript ，解析 HTML/CSS ，完成绘制</li><li>Raster：Raster 线程，负责完成某个 layer 或者某些块（tile）的绘制</li></ul></li><li>区域④：统计面板<h3 id="NetWork"><a href="#NetWork" class="headerlink" title="NetWork"></a>NetWork</h3><img src="https://s4.ax1x.com/2022/01/23/74pyX8.png" alt="NetWork 面板概览"></li><li>区域①：控制面板</li><li>区域②：过滤面板</li><li>区域③：概览区域</li><li>区域④：Request Table 面板</li><li>区域⑤：总结面板</li><li>区域⑥：请求详情面板<h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h3><img src="https://s4.ax1x.com/2022/01/23/74pz1x.png" alt="Application 面板概览"><br>Application 面板展示与本地存储相关的信息</li><li>Local Storage</li><li>Session Storage</li><li>IndexedDB</li><li>Web SQL</li><li>Cookie</li></ul><p>点击左侧 <code>Application</code> 下的 <code>Stroage</code> 面板中的 <code>Clear Site Data</code> 可以清除网页的本地存储数据</p><h2 id="常用开发调试技巧"><a href="#常用开发调试技巧" class="headerlink" title="常用开发调试技巧"></a>常用开发调试技巧</h2><h3 id="线上即时修改-Overrides"><a href="#线上即时修改-Overrides" class="headerlink" title="线上即时修改 Overrides"></a>线上即时修改 Overrides</h3><ol><li>打开 <code>Sources</code> 面板下的 <code>Overrides</code></li><li>点击 <code>Select folders for Overrides</code> 。选择一个本地的空文件夹目录<br><img src="https://s4.ax1x.com/2022/01/23/74PU7F.png" alt="选择保存修改的文件夹"></li><li>允许授权</li><li>在 <code>page</code> 中修改代码，修改完成后 <code>command + s</code> 保存</li><li>打开 DevTools ，点击右上角的三个小点 -&gt; More tools -&gt; Changes ，就能看到所有修改了（红色代表修改前，绿色代表修改后）<br><img src="https://s4.ax1x.com/2022/01/23/74PXNQ.png" alt="对比更改后的代码"><h3 id="利用代理解决开发阶段的跨域问题"><a href="#利用代理解决开发阶段的跨域问题" class="headerlink" title="利用代理解决开发阶段的跨域问题"></a>利用代理解决开发阶段的跨域问题</h3>常见的有通过 <code>nginx</code> 来进行代理<h3 id="启动本地-source-map"><a href="#启动本地-source-map" class="headerlink" title="启动本地 source map"></a>启动本地 source map</h3>线上不存在 <code>Source Map</code> 时可以使用 <code>Map Local</code> 网络映射功能来访问本地的 <code>Source Map</code> 文件<h3 id="小黄鸭调试大法"><a href="#小黄鸭调试大法" class="headerlink" title="小黄鸭调试大法"></a>小黄鸭调试大法</h3>传说中程序大师随身携带一只小黄鸭，在调试代码的时候会在桌上放上这只小黄鸭，然后详细地向小黄鸭解释每行代码，然后很快就将问题定位修复了 –《程序员修炼之道》</li></ol>]]></content>
      
      
      <categories>
          
          <category> 调试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 浏览器控制台 </tag>
            
            <tag> 开发调试技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3 新特性</title>
      <link href="/2022/01/22/css3-xin-te-xing/"/>
      <url>/2022/01/22/css3-xin-te-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS3-新特性"><a href="#CSS3-新特性" class="headerlink" title="CSS3 新特性"></a>CSS3 新特性</h2><ol><li>过渡<br>transition： <code>transition-property</code>【CSS属性】，<code>transition-duration</code>【花费时间】，<code>transition-timing-function</code>【效果曲线（默认ease）】，<code>transition-delay</code>【延迟时间（默认0）】。</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css">// 连写（可以省略后面的两个参数）：transition：width<span class="token punctuation">,</span> 5s<span class="token punctuation">,</span> ease<span class="token punctuation">,</span> 2s<span class="token property">transition-property</span><span class="token punctuation">:</span> width<span class="token punctuation">;</span><span class="token property">transition-duration</span><span class="token punctuation">:</span> 1s<span class="token punctuation">;</span><span class="token property">transition-timing-function</span><span class="token punctuation">:</span> linear<span class="token punctuation">;</span><span class="token property">transition-delay</span><span class="token punctuation">:</span> 2s<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>transition-timing-function 的参数：<br>|值|描述|<br>|:–|:–|<br>|linear|匀速（等于 cubic-bezier(0,0,1,1)）|<br>|ease|逐渐变慢（cubic-bezier(0.25,0.1,0.25,1)）|<br>|ease-in|加速（等于 cubic-bezier(0.42,0,1,1)）|<br>|ease-out|减速（等于 cubic-bezier(0,0,0.58,1)）|<br>|ease-in-out|先加速后减速（等于 cubic-bezier(0.42,0,0.58,1)）|<br>|cubic-bezier(n,n,n,n)|在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值|<br>2. 动画<br>①animation：<code>animation-name</code>【动画名称】，<code>animation-duration</code>【一个周期花费时间】，<code>animation-timing-function</code>【运动曲线（默认ease）】，<code>animation-delay</code>【动画延迟（默认0）】，<br><code>animation-fill-mode</code>，<code>animation-direction</code>【是否反向播放动画（默认normal）】，<code>animation-iteration-count</code>【播放次数（默认1）】，<code>animation-play-state</code>【是否暂停动画（默认 running ）】<br>②告诉系统外面需要自己创建一个名称叫做xxx的动画</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> 动画名称</span> <span class="token punctuation">&#123;</span>    <span class="token selector">from</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">to</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>animation-name</code>    规定动画的名称。由大小写敏感的字母a-z、数字0-9、下划线（_）和 <code>/</code> 或横线（-）组成。<em>第一个非横线字符必须是字母，数字不能在字母前面，不允许两个横线出现在开始位置</em>  </li><li><code>animation-duration</code>    规定动画完成一个周期所花费的秒或毫秒。默认是 0 ，表示无动画。  </li><li><code>animation-timing-function</code>    规定动画的速度曲线。默认是 “ease”。可选参数如下： </li></ul><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">linear</td><td align="left">动画从头到尾的速度是相同的。</td></tr><tr><td align="left">ease</td><td align="left">默认。动画以低速开始，然后加快，在结束前变慢。</td></tr><tr><td align="left">ease-in</td><td align="left">动画以低速开始。</td></tr><tr><td align="left">ease-out</td><td align="left">动画以低速结束。</td></tr><tr><td align="left">ease-in-out</td><td align="left">动画以低速开始和结束。</td></tr><tr><td align="left">cubic-bezier(n,n,n,n)</td><td align="left">在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。</td></tr><tr><td align="left"></td><td align="left"></td></tr></tbody></table><ul><li><code>animation-delay</code>    规定动画何时开始。默认是 0。  </li><li><code>animation-fill-mode</code>    规定对象动画在执行之前和之后如何将样式应用于其目标。可选参数如下：</li></ul><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">none</td><td align="left">默认状态，回到动画没开始时的状态。</td></tr><tr><td align="left">forwards</td><td align="left">让动画停留在结束状态。</td></tr><tr><td align="left">backwards</td><td align="left">让动画回到第一帧的状态。</td></tr><tr><td align="left">both</td><td align="left">向前和向后填充模式都被应用。</td></tr></tbody></table><ul><li><p><code>animation-direction</code>    规定动画是否在下一周期逆向地播放。默认是 “normal”。可选参数如下：</p></li><li><p>normal    默认值。动画正常播放。    </p></li><li><p>alternate    动画轮流反向播放。</p></li><li><p>reverse 动画反向播放。</p></li><li><p>alternate-reverse 动画反向轮流播放。<br>效果如图：<img src="https://s4.ax1x.com/2022/01/23/74ynDH.png" alt="animation-direction 参数效果"></p></li><li><p><code>animation-iteration-count</code> 规定动画被播放的次数。默认是 1。无限播放则是 infinite  </p></li><li><p><code>animation-play-state</code>    规定动画是否正在运行或暂停。可以通过查询它来确定动画是否正在运行。另外，它的值可以被设置为暂停和恢复的动画的重放。默认是 “running”。可选参数如下：</p></li></ul><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">paused</td><td align="left">规定动画已暂停。</td></tr><tr><td align="left">running</td><td align="left">规定动画正在播放。</td></tr><tr><td align="left">inherit</td><td align="left">/</td></tr><tr><td align="left">initial</td><td align="left">/</td></tr><tr><td align="left">unset</td><td align="left">/</td></tr></tbody></table><ol start="3"><li>形状转换  </li></ol><ul><li>transform-origin    定义形变点的位置。</li><li>2D transform 方法<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token function">translate</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>定义 2D 转换，沿着 X 和 Y 轴移动元素。    <span class="token function">translateX</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>定义 2D 转换，沿着 X 轴移动元素。    <span class="token function">translateY</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>定义 2D 转换，沿着 Y 轴移动元素。<span class="token function">rotate</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span>定义 2D 旋转，在参数中规定角度，参数为数值、单位 deg。<span class="token function">scale</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>定义 2D 缩放转换，改变元素的宽度和高度，参数为数值、无单位。    <span class="token function">scaleX</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>定义 2D 缩放转换，改变元素的宽度。    <span class="token function">scaleY</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>定义 2D 缩放转换，改变元素的高度。<span class="token function">matrix</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">)</span>定义 2D 转换，使用六个值的矩阵。<span class="token function">skew</span><span class="token punctuation">(</span>x-angle<span class="token punctuation">,</span>y-angle<span class="token punctuation">)</span>定义 2D 倾斜转换，沿着 X 和 Y 轴，参数为数值、单位 deg。    <span class="token function">skewX</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span>定义 2D 倾斜转换，沿着 X 轴。    <span class="token function">skewY</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span>定义 2D 倾斜转换，沿着 Y 轴。x-axis定义视图被置于 X 轴的何处。可能的值：left，center，right，length，%y-axis定义视图被置于 Y 轴的何处。可能的值：top，center，bottom，length，%z-axis定义视图被置于 Z 轴的何处。可能的值：length<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>3D Transform 方法<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token function">matrix3d</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">)</span>定义 3D 转换，使用 16 个值的 4x4 矩阵。<span class="token function">translate3d</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span>定义 3D 转化。    <span class="token function">translateX</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>定义 3D 转化，仅使用用于 X 轴的值。    <span class="token function">translateY</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>定义 3D 转化，仅使用用于 Y 轴的值。    <span class="token function">translateZ</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>定义 3D 转化，仅使用用于 Z 轴的值。<span class="token function">scale3d</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span>定义 3D 缩放转换。    <span class="token function">scaleX</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>定义 3D 缩放转换，通过给定一个 X 轴的值。    <span class="token function">scaleY</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>定义 3D 缩放转换，通过给定一个 Y 轴的值。    <span class="token function">scaleZ</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>定义 3D 缩放转换，通过给定一个 Z 轴的值。<span class="token function">rotate3d</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span>angle<span class="token punctuation">)</span>定义 3D 旋转。    <span class="token function">rotateX</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span>定义沿 X 轴的 3D 旋转。    <span class="token function">rotateY</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span>定义沿 Y 轴的 3D 旋转。    <span class="token function">rotateZ</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span>定义沿 Z 轴的 3D 旋转。<span class="token function">perspective</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>定义 3D 转换元素的透视视图。x-axis定义视图被置于 X 轴的何处。可能的值：left，center，right，length，%y-axis定义视图被置于 Y 轴的何处。可能的值：top，center，bottom，length，%z-axis定义视图被置于 Z 轴的何处。可能的值：lengthtransform-style规定被嵌套元素如何在 3D 空间中显示。    flat子元素将不保留其 3D 位置。    preserve-3d子元素将保留其 3D 位置。perspective规定 3D 元素的透视效果（近大远小）。    number元素距离视图的距离，以像素计。    none默认值。与 0 相同。不设置透视。perspective-origin规定 3D 元素的底部位置。    x-axis定义该视图在 x 轴上的位置。默认值：50%。可能的值：left，center，right，length，%    y-axis定义该视图在 y 轴上的位置。默认值：50%。可能的值：top，center，bottom，length，%backface-visibility定义元素在不面对屏幕时是否可见。    visible背面是可见的。    hidden背面是不可见的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="4"><li><p>阴影<br><code>box-shadow</code>：水平阴影的位置 垂直阴影的位置 模糊距离 阴影的大小 阴影的颜色 阴影开始方向（默认是从里往外，设置inset就是从外往里）;</p></li><li><p>边框图片<br><code>border-image</code>：图片url 图像边界向内偏移 图像边界的宽度(默认为边框的宽度) 用于指定在边框外部绘制偏移的量（默认0） 铺满方式–重复（repeat）、拉伸（stretch）或铺满（round）（默认：拉伸（stretch））;</p></li><li><p>边框圆角<br><code>border-radius</code>：左上角，右上角，右下角，左下角;</p></li><li><p>背景  </p></li></ol><ul><li><code>background-clip</code> 规定背景的绘制区域         <ul><li>border-box    背景被裁剪到边框盒。</li><li>padding-box    背景被裁剪到内边距框。</li><li>content-box    背景被裁剪到内容框。</li></ul></li><li><code>background-origin</code>    <ul><li>padding-box    背景图像相对于内边距框来定位。    </li><li>border-box    背景图像相对于边框盒来定位。</li><li>content-box    背景图像相对于内容框来定位。</li></ul></li><li><code>background-size</code><ul><li>length    设置背景图像的高度和宽度。第一个值设置宽度，第二个值设置高度。如果只设置一个值，则第二个值会被设置为 “auto”。</li><li>percentage    以父元素的百分比来设置背景图像的宽度和高度。第一个值设置宽度，第二个值设置高度。如果只设置一个值，则第二个值会被设置为 “auto”。</li><li>cover    把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。背景图像的某些部分也许无法显示在背景定位区域中。</li><li>contain    把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域。</li></ul></li></ul><ol start="8"><li><p>反射<br><code>-webkit-box-reflect</code>：方向【above-上 | below-下 | right-右 | left-左】，偏移量，遮罩图片</p></li><li><p>文字阴影<br><code>text-shadow</code>：水平阴影，垂直阴影，模糊的距离，以及阴影的颜色</p></li><li><p>颜色<br><code>rgba</code>（rgb为颜色值，a为透明度）<br><code>hsla</code>（h：色相”，“s：饱和度”，“l：亮度”，“a：透明度”）</p></li><li><p>渐变</p></li><li><p>Filter（滤镜）</p></li></ol><ul><li>黑白色 filter: grayscale(100%)</li><li>褐色 filter:sepia(1)</li><li>饱和度 saturate(2)</li><li>色相旋转 hue-rotate(90deg)</li><li>反色 filter:invert(1)</li><li>透明度 opacity(.5)</li><li>亮度 brightness(.5)</li><li>对比度 contrast(2)</li><li>模糊 blur(3px)</li><li>阴影 drop-shadow(5px 5px 5px #000)</li></ul><ol start="13"><li><p>混合模式  </p><ul><li>background-blend-mode（用于同一个元素的背景图片和背景颜色）<ul><li>multiply 正片叠底</li><li>screen 滤色</li><li>overlay 叠加</li><li>darken 变暗</li><li>lighten 变亮</li><li>color-dodge 颜色减淡模式</li><li>color-burn 颜色加深</li><li>hard-light 强光</li><li>soft-light 柔光</li><li>difference 差值</li><li>exclusion 排除</li><li>hue 色相</li><li>saturation 饱和度</li><li>color 颜色</li><li>luminosity 亮度</li></ul></li><li>mix-blend-mode（用于一个元素的背景图片或者颜色和子元素）<ul><li>数值同 background-blend-mode</li></ul></li></ul></li><li><p>多列布局  </p><ul><li><p>加上私有前缀，兼容</p><ul><li>-webkit- （谷歌，Safari，新版Opera浏览器，以及几乎所有iOS系统中的浏览器（包括 iOS 系统中的火狐浏览器）；基本上所有基于WebKit 内核的浏览器）</li><li>-moz- （火狐浏览器）</li><li>-o- （旧版Opera浏览器）</li><li>-ms- （IE浏览器 和 Edge浏览器）</li></ul></li><li><p>column-count    规定元素应该被分隔的列数。</p></li><li><p>column-fill    规定如何填充列。</p></li><li><p>column-gap    规定列之间的间隔。</p></li><li><p>column-rule    设置所有 column-rule-* 属性的简写属性。</p></li><li><p>column-rule-color    规定列之间规则的颜色。</p></li><li><p>column-rule-style    规定列之间规则的样式</p></li><li><p>column-rule-width    规定列之间规则的宽度。</p></li><li><p>column-span    规定元素应该横跨的列数。</p></li><li><p>column-width    规定列的宽度。</p></li><li><p>columns    规定设置 column-width 和 column-count 的简写属性</p></li></ul></li><li><p>媒体查询<br>语法：@media 媒体类型 and （媒体特性）{你的样式}</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>600px<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>900px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token selector">body</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span>#f5f5f5<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>not关键词<ul><li>使用关键词“not”是用来排除某种制定的媒体类型，也就是用来排除符合表达式的设备。换句话说，not关键词表示对后面的表达式执行取反操作，如：  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">not</span> print <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>1200px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    样式代码<span class="token punctuation">&#125;</span>// 上面代码表示的是：样式代码将被使用在除打印设备和设备宽度小于1200px下的所有设备中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>only关键词<ul><li><a href="https://www.jianshu.com/p/927790abdd80">媒体查询使用方法@media</a></li></ul></li><li>媒体类型<ul><li>all    用于所有媒体类型设备。</li><li>print    用于打印机。</li><li>screen    用于计算机屏幕、平板电脑、智能手机等等。</li><li>speech    用于大声“读出”页面的屏幕阅读器。</li></ul></li><li>媒体特性<ul><li>如果是横屏landscape、竖屏portrait，则语法：orientation：portrait | landscape  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">orientation</span><span class="token punctuation">:</span>landscape<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token selector">body</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span>lightblue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>但与CSS属性不同的是，媒体特性是通过min/max来表示大于等于或小于做为逻辑判断，而不是使用小于（&lt;）和大于（&gt;）这样的符号来判断<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>480px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token selector">.ads</span><span class="token punctuation">&#123;</span>        <span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>上面代码表示的是：当屏幕小于或等于480px时，页面中的广告区块（.ads）都讲被隐藏<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>更复杂的媒体查询</li></ul></li><li>媒体查询中的“与”逻辑  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>400px<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">orientation</span><span class="token punctuation">:</span>landscape<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token selector">body</span><span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>媒体查询中的“或”逻辑  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>400px<span class="token punctuation">)</span><span class="token punctuation">,</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">orientation</span><span class="token punctuation">:</span>landscape<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token selector">body</span><span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>媒体查询中的“非”逻辑可以用not操作符让整个媒体查询失效。这就直接反转了整个媒体查询的含义。因而在下面的例子中，文本只会在朝向为竖着的时候变成蓝色。<pre><code class="css">@media not all and (orientation:landscape) &#123;    body&#123;        color:blue;    &#125;&#125;</code></pre></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 盒模型</title>
      <link href="/2022/01/11/css-he-mo-xing/"/>
      <url>/2022/01/11/css-he-mo-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>盒模型又称框模型（Box Model），包含了元素内容（content）、内边距（padding）、边框（border）、外边距（margin）几个要素。它有两种分类，分别是<strong>标准模型</strong>和 <strong>IE 模型</strong>。</p><h2 id="标准模型和-IE-模型的区别"><a href="#标准模型和-IE-模型的区别" class="headerlink" title="标准模型和 IE 模型的区别"></a>标准模型和 IE 模型的区别</h2><p>IE模型和标准模型唯一的区别是内容计算方式的不同：</p><ul><li>IE 模型元素宽度 <code>width = content + padding + border</code> ，高度计算相同</li><li>标准模型元素宽度 <code>width = content</code> ，高度计算相同</li></ul><p>通过两幅图可以直观了解到区别所在：<br><img src="https://s4.ax1x.com/2022/01/11/7mF13T.png" alt="IE 模型"><br><img src="https://s4.ax1x.com/2022/01/11/7mFlCV.png" alt="标准模型"></p><h2 id="一个问题"><a href="#一个问题" class="headerlink" title="一个问题"></a>一个问题</h2><p>盒模型分为两种，那么问题来了，是什么因素让浏览器决定使用哪一种盒模型来渲染页面呢？<br>有两种解决方案：</p><ul><li>编写 html 文件时，我们可以在其头部第一行看见这样的代码 <code>&lt;!DOCTYPE html &gt;</code> ，这个是文档类型声明，只要浏览器看到这行代码就会用标准盒模型来渲染页面；如果没有这行代码，各个浏览器就会按照自己的标准去使用不同的盒模型来渲染。</li><li>通过文档声明的方式来渲染可以实现我们的目的，但是很被动。CSS3 给出了一种解决方法：<code>box-sizing</code> ，通过设置这个属性，就可以指定某种盒模型来渲染页面。<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2>通过 css3 新增的属性 <code>box-sizing: content-box | border-box |  inherit</code> 分别设置盒模型为<strong>标准模型（content-box）</strong> 和 <strong>IE 模型（border-box）</strong>。</li><li>content-box：盒子宽高是 <code>content(内容)</code> 的宽高  </li><li>border-box：盒子宽高是 <code>border + padding + content</code> 的宽高。</li><li>inherit：规定应从父元素继承 <code>box-sizing</code> 属性的值。<h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2></li></ul><ol><li>在解释什么是BFC之前，我们需要先知道Box、Formatting Context的概念：</li></ol><ul><li>Formatting Context<br>它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。</li><li>Box：css布局的基本单位<br>直观点来说，就是一个页面是由很多个 Box 组成的。元素的类型和 display 属性，决定了这个 Box 的类型。 不同类型的 Box， 会参与不同的 Formatting Context（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。有三种盒子：<ul><li>block-level box：display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；</li><li>inline-level box：display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box。并且参与 inline formatting context；</li><li>run-in box: css3 中才有</li></ul></li></ul><ol start="2"><li>BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干，并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。</li><li>BFC的布局规则</li></ol><ul><li>内部的Box会在垂直方向，一个接一个地放置。</li><li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠</li><li>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如 此。</li><li>BFC的区域不会与float box重叠。</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li><li>计算BFC的高度时，浮动元素也参与计算</li></ul><ol start="4"><li>如何创建BFC<ul><li>根元素或包含根元素的元素，如<code>&lt;html&gt;</code></li><li> 浮动元素（元素的 float 不是 none）</li><li> 绝对定位元素（元素的 position 为 absolute 或 fixed）</li><li> 行内块元素（元素的 display 为 inline-block）</li><li> 表格单元格（元素的 display为 table-cell，HTML表格单元格默认为该值）</li><li> 表格标题（元素的 display 为 table-caption，HTML表格标题默认为该值）</li><li> 匿名表格单元格元素【元素的 display为 table、table-row、 table-row-group、table-header-group、table-footer-group（分别是HTML table、row、tbody、thead、tfoot的默认属性）或 inline-table】</li><li>  overflow 值不为 visible 的块元素</li><li>  display 值为 <a href="https://drafts.csswg.org/css-display/#valdef-display-flow-root">flow-root</a> 的元素</li><li>  contain 值为 layout、content或 strict 的元素</li><li> 弹性元素（display为 flex 或 inline-flex元素的直接子元素）</li><li> 网格元素（display为 grid 或 inline-grid 元素的直接子元素）</li><li> 多列容器（元素的 column-count 或 column-width 不为 auto，包括 column-count 为 1）</li><li>  column-span 为 all 的元素始终会创建一个新的BFC，即使该元素没有包裹在一个多列容器中（标准变更，Chrome bug）。</li></ul></li><li>BFC的作用<ul><li>利用BFC避免margin重叠。</li><li>阻止元素被浮动元素覆盖 -&gt; 可应用于自适应两栏布局（避免右侧与左侧发生重叠)</li><li>清除浮动<br>当我们不给父节点设置高度，子节点设置浮动的时候，会发生高度塌陷，这个时候我们就要清除浮动。这个时候我们根据最后一条规则：计算BFC的高度时，浮动元素也参与计算。于是给父节点激活BFC</li></ul></li><li>举个栗子</li></ol><p>页面布局如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>页面样式如下：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.left</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>页面效果如图：<img src="https://s4.ax1x.com/2022/01/11/7ms2ef.png" alt="未设置 BFC 之前"><br>我们看到图片中蓝色块因为浮动叠在了绿色块上面，如果我们的需求是不让这两者发生重叠，解决方法可以是对绿色块启动 BFC ，即在 .right 元素中添加 <code>overflow:hidden</code> （其他启动 BFC 的样式也可），这时就可以看到效果如图：<img src="https://s4.ax1x.com/2022/01/11/7myT4e.png" alt="设置 BFC 之后"></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 选择器</title>
      <link href="/2022/01/11/css-xuan-ze-qi/"/>
      <url>/2022/01/11/css-xuan-ze-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="css-选择器"><a href="#css-选择器" class="headerlink" title="css 选择器"></a>css 选择器</h2><ol><li>关于css属性选择器常用的有以下这些：<pre class="line-numbers language-css" data-language="css"><code class="language-css">id选择器（#box） -->选择id为box的元素类选择器（.one） -->选择类名为one的所有元素标签选择器（div） -->选择标签为div的所有元素后代选择器（#box div） -->选择id为box元素内部所有的div元素子选择器（.one>one_1） -->选择父元素为.one的所有.one_1的元素相邻兄弟选择器（.one+.two） -->选择紧接在.one之后的所有.two元素交集选择器（div.one） -->选择类名为one的所有div元素并集选择器（div<span class="token punctuation">,</span>p） -->选择所有div和p元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>还有一些使用频率相对没那么多的选择器：</li></ol><ul><li>伪类选择器<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token punctuation">:</span>link ：选择未被访问的链接<span class="token punctuation">:</span><span class="token property">visited：选取已被访问的链接</span><span class="token punctuation">:</span><span class="token property">active：选择活动链接</span><span class="token punctuation">:</span>hover ：鼠标指针浮动在上面的元素<span class="token punctuation">:</span>focus ：选择具有焦点的<span class="token punctuation">:</span>first-child：同级别中的第一个元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>伪元素选择器<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token punctuation">:</span><span class="token punctuation">:</span>first-letter ：用于选取指定选择器的首字母<span class="token punctuation">:</span><span class="token punctuation">:</span>first-line ：选取指定选择器的首行<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token property">before</span> <span class="token punctuation">:</span> 选择器在被选元素的内容前面插入内容<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token property">after</span> <span class="token punctuation">:</span> 选择器在被选元素的内容后面插入内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>属性选择器<pre class="line-numbers language-css" data-language="css"><code class="language-css">[attribute] 选择带有attribute属性的元素[attribute=value] 选择所有使用attribute=value的元素[attribute~=value] 选择attribute属性包含value的元素[attribute|=value]：选择attribute属性以value开头的元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="3"><li>在CSS3中新增的选择器还有：</li></ol><ul><li>通用兄弟选择器（p~ul），选择p元素下的所有ul元素</li><li>结构化伪类选择器<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token punctuation">:</span>last-child 同级别中的最后一个标签<span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> 同级别中的第n个元素<span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span>odd<span class="token punctuation">)</span> <span class="token property">同级别中的所有奇数</span><span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span>even<span class="token punctuation">)</span> <span class="token property">同级别中的所有偶数</span><span class="token punctuation">:</span>only-child <span class="token property">父元素中唯一的标签</span><span class="token punctuation">:</span>first-of-type 同级别中同类型的第一个元素<span class="token punctuation">:</span>last-of-type 同级别中同类型的最后一个元素<span class="token punctuation">:</span><span class="token function">nth-of-type</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> 同级别中同类型的第n个元素<span class="token punctuation">:</span><span class="token function">nth-last-of-type</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> 同级别中同类型的倒数第n个元素<span class="token punctuation">:</span>only-of-type  <span class="token property">父元素中唯一的同类型的标签</span><span class="token punctuation">:</span>root 设置HTML文档<span class="token punctuation">:</span>empty 指定空的元素<span class="token punctuation">:</span>enabled 选择被禁用元素<span class="token punctuation">:</span>disabled 选择被禁用元素<span class="token punctuation">:</span>checked 选择选中的元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>属性选择器<pre class="line-numbers language-css" data-language="css"><code class="language-css">[attribute|=value]：选择attribute属性开头为value，且value是被-或其他内容隔开的所有元素[attribute^=value]：选择attribute属性开头为value的所有元素，无论value会不会被-隔开[attribute$=value]：选择attribute属性结尾为value的所有元素[attribute~=value]：选择attribute属性值包含value，且value被空格隔开的所有元素[attribute*=value]：选择attribute属性值包含value的所有元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="CSS-三大特性"><a href="#CSS-三大特性" class="headerlink" title="CSS 三大特性"></a>CSS 三大特性</h2><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>给父元素设置一些属性，子元素也可以使用，这个我们就称之为继承性。在 CSS 的继承中，不仅仅是儿子可以继承，只要是后代都可以继承。</p><ol><li>可继承的属性</li></ol><ul><li>所有元素可以继承的属性：<ul><li>元素可见性：<code>visibility</code></li><li>光标属性：<code>cursor：箭头可以变成需要的形状</code></li></ul></li><li>内联元素可以继承的属性：<ul><li>字体系列属性  <pre class="line-numbers language-css" data-language="css"><code class="language-css">font：组合字体font-family：字体系列font-weight：字体的粗细font-size：字体的大小font-style：字体的风格font-variant：偏大或偏小的字体<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>文本系列属性  <pre class="line-numbers language-css" data-language="css"><code class="language-css">text-indent：文本缩进text-align：文本水平line-height：行高word-spacing：单词之间的间距letter-spacing：中文或者字母之间的间距text-transform：控制文本大小写direction：规定文本的书写方向color：文本颜色<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>表格布局属性  <pre class="line-numbers language-css" data-language="css"><code class="language-css">caption-side：定位表格标题位置border-collapse：合并表格边框border-spacing：设置相邻单元格的边框间的距离empty-cells：单元格的边框的出现与消失table-layout：表格的宽度由什么决定<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>列表属性<pre class="line-numbers language-css" data-language="css"><code class="language-css">list-style-type：文字前面的小点点样式list-style-position：小点点位置list-style：以上的属性可通过这属性集合<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>引用：<code>quotes：设置嵌套引用的引号类型</code></li></ul></li></ul><ol start="2"><li>不可继承的属性</li></ol><ul><li>a 标签的字体颜色</li><li>h 标签字体的大小</li><li>display：规定元素应该生成的框的类型</li><li>文本属性：<ul><li>vertical-align：垂直文本对齐</li><li>text-decoration：规定添加到文本的装饰</li><li>text-shadow：文本阴影效果</li><li>white-space：空白符的处理</li><li>unicode-bidi：设置文本的方向</li></ul></li><li>盒子模型的属性：width、height、margin、border、padding</li><li>背景属性：background、background-color、background-image、background-repeat、background-position、background-attachment</li><li>定位属性：float、clear、position、top、right、bottom、left、min-width、min-height、max-width、max-height、overflow、clip、z-index</li><li>生成内容属性：content、counter-reset、counter-increment</li><li>轮廓样式属性：outline-style、outline-width、outline-color、outline</li><li>页面样式属性：size、page-break-before、page-break-after</li><li>声音样式属性：pause-before、pause-after、pause、cue-before、cue-after、cue、play-during</li></ul><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><p>层叠性就是 CSS 处理冲突的一种能力。</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>什么是优先级：当多个选择器选中同一个标签，并且给同一个标签设置相同的属性时，如何层叠就由优先级来确定。</p><p>优先级判断的3种方式：</p><ol><li>是否是直接选中（间接选中就是值继承）</li></ol><ul><li>如果是间接选中，那么就是谁离目标标签比较近就听谁的</li></ul><ol start="2"><li>相同选择器（直接选中）</li></ol><ul><li>如果都是直接选中，并且都是同类型的选择器，那么就是谁写在后面就听谁的</li></ul><ol start="3"><li>不同选择器（直接选中）</li></ol><ul><li>如果都是直接选中，并且不是相同类型的选择器，那么就会按照选择器的优先级来层叠：【!important &gt;】内联 &gt; id选择器 &gt; 类选择器 &gt; 标签选择器【&gt; 通配符 &gt; 继承 &gt; 浏览器默认属性】</li></ul><p>如果是多个选择器混合在一起使用，就需要计算权重。<br>权重的计算规则：</p><ol><li>首先计算选择器中有多少个 id ，id 多的选择器优先级最高</li><li>如果 id 的个数一样，那么再看类名的个数，类名个数多的优先级最高</li><li>如果这两者的个数都一样，同时标签名称个数也一样，那么就不会继续往下计算了，此时谁写在后面就听谁的。也就是说优先级如果一样，那么谁写在后面就听谁的<blockquote><p>注意：只有选择器是直接选中标签的才需要计算权重，否则一定会听直接选中的选择器的 </p></blockquote></li></ol><p>如果再到具体的计算层⾯，优先级是由 A 、B、C、D 的值来决定的，其中它们的值计算规则如下：</p><ul><li>如果存在内联样式，那么 A = 1, 否则 A = 0</li><li>B的值等于 ID选择器出现的次数</li><li>C的值等于 类选择器 和 属性选择器 和 伪类 出现的总次数</li><li>D 的值等于 标签选择器 和 伪元素 出现的总次数</li></ul><p>这里举个例子：#nav-global &gt; ul &gt; li &gt; a.nav-link ，套用上面的算法，依次求出 A B C D 的值：</p><ul><li>因为没有内联样式 ，所以 A = 0</li><li>ID选择器总共出现了1次， B = 1</li><li>类选择器出现了1次， 属性选择器出现了0次，伪类选择器出现0次，所以 C = (1 + 0 + 0) = 1</li><li>标签选择器出现了3次， 伪元素出现了0次，所以 D = (3 + 0) = 3</li><li>上面算出的A 、 B、C、D 可以简记作：(0, 1, 1, 3)</li></ul><p>知道了优先级是如何计算之后，就来看看比较规则：</p><ul><li>从左往右依次进行比较 ，较大者优先级更高</li><li>如果相等，则继续往右移动一位进行比较</li><li>如果4位全部相等，则后面的会覆盖前面的</li><li>经过上面的优先级计算规则，我们知道内联样式的优先级最高，如果外部样式需要覆盖内联样式，就需要使用 <code>!important</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 之内存管理</title>
      <link href="/2022/01/10/js-zhi-nei-cun-guan-li/"/>
      <url>/2022/01/10/js-zhi-nei-cun-guan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="内存机制"><a href="#内存机制" class="headerlink" title="内存机制"></a>内存机制</h2><p>JS有两种数据类型，分别是原始数据类型（<code>String、Number、Boolean、Null、Undefined、Symbol</code>）和引用数据类型（<code>Object</code>）。<br>而存放这两种数据类型的内存又可以分为两部分，分别是栈内存（Stack）和堆内存（Heap）。</p><p>这里说下栈内存和堆内存的区别：<br>|栈内存|堆内存|<br>|:–:|:–:|<br>|先进后出，后进先出|无序存储，根据引用直接获取|<br>|存储原始数据类型|存储引用数据类型|<br>|存储的值大小固定|存储的值大小不固定，可动态调整|<br>|按值访问|按引用访问|<br>|可以直接操作|不允许直接操作|<br>|空间小，但运行效率高|空间大，但运行效率相对低|</p><p>不知道大家有没有过这样一个疑问：Js 声明变量时，底层是怎么实现这个声明过程的，或者说是怎么存储这个变量的，感兴趣的话可以看看下面这两篇文章：</p><ul><li><a href="http://www.dennisgo.cn/Articles/JavaScript/MemoryManagement.html#%E6%A0%88%E5%86%85%E5%AD%98">原始数据类型是如何存进栈内存的</a>  </li><li><a href="https://segmentfault.com/a/1190000015118062">基本类型和引用类型发生复制行为后的不同影响</a></li></ul><h2 id="内存生命周期"><a href="#内存生命周期" class="headerlink" title="内存生命周期"></a>内存生命周期</h2><p>不管什么程序语言，内存生命周期基本是一致的：   </p><ol><li>分配你所需要的内存</li><li>使用分配到的内存（读、写）</li><li>不需要时将其释放/归还</li></ol><p>JS的内存分配</p><ol><li>值的初始化<br>在定义变量时就完成了内存分配</li><li>使用值<br>使用值的过程实际上是对分配内存进行读取与写入的操作。这个操作可能是写入一个变量或者一个对象的属性值，甚至传递函数的参数。</li><li>释放不再需要的内存</li></ol><h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>不再用到的内存，没有及时释放，就叫做内存泄漏（memory leak），会导致内存溢出。</p><blockquote><p>内存溢出：指程序申请内存时，没有足够的内存供申请者使用。例如，给一块存储int类型数据的存储空间，但却存储long类型的数据，那么结果就是内存不够用，此时就会报错，即所谓的内存溢出。</p></blockquote><h3 id="常见-JavaScript-内存泄露"><a href="#常见-JavaScript-内存泄露" class="headerlink" title="常见 JavaScript 内存泄露"></a>常见 JavaScript 内存泄露</h3><ol><li>意外的全局变量 </li></ol><p>①未定义的变量会在全局对象创建一个新变量。在浏览器中，全局对象是 window 。<br>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  bar <span class="token operator">=</span> <span class="token string">"this is a hidden global variable"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 实际上是：</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  window<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token string">"this is an explicit global variable"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>  如果 bar 是一个应该指向 foo 函数作用域内变量的引用，但是你忘记使用 var 来声明这个变量，这时就会创建一个全局变量。</p><p>  ②另一种意外的全局变量可能由 this 创建：<br>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>variable <span class="token operator">=</span> <span class="token string">"potential accidental global"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>  函数自身发生了调用，this 指向全局对象（window）</p><p>  为了防止这种错误的发生，可以在你的 JavaScript 文件开头添加 <code>&#39;use strict&#39;;</code> 语句。这个语句实际上开启了解释 JavaScript 代码的严格模式，可以避免创建意外的全局变量。</p><p>总结：</p><ul><li>全局变量的注意事项：如果你必须使用全局变量来存储很多的数据，请确保在使用过后将它设置为 <code>null</code> 或者将它<strong>重新赋值</strong>。常见的和全局变量相关的引发内存消耗增长的原因就是缓存。（缓存存储着可复用的数据）</li><li>解决方法：①避免创建全局变量；②使用严格模式,在 JavaScript 文件头部或者函数的顶部加上 use strict。</li></ul><ol start="2"><li>闭包引起的内存泄漏</li></ol><p>原理：闭包可以读取函数内部的变量，然后让这些变量始终保存在内存中。如果在使用结束后没有将局部变量清除，就可能导致内存泄露。 </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> leaks <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> leak <span class="token operator">=</span> <span class="token string">'xxxxxx'</span><span class="token punctuation">;</span> <span class="token comment">// 被闭包所引用，不会被回收</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>leak<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决方法：将事件处理函数定义在外部，解除闭包，或者在定义事件处理函数的外部函数中。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 比如：在循环中的函数表达式，能复用最好放到循环外面。</span><span class="token comment">// 不要这样：</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> <span class="token function-variable function">t</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建了10次函数对象</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">t</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 这样比较好：</span><span class="token keyword">function</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">t</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>t <span class="token operator">=</span> <span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>没有清理的 DOM 元素引用</li></ol><p>原因：虽然别的地方删除了，但是对象中还存在对 dom 的引用。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 在对象中引用DOM</span><span class="token keyword">var</span> elements <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  btn<span class="token operator">:</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  elements<span class="token punctuation">.</span>btn<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">removeBtn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 将body中的btn移除，也就是移除DOM树中的btn</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 但是此时全局变量 elements 还是保留了对 btn 的引用，btn 还是存在于内存中，不能被 GC 回收</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决方法：手动删除，elements.btn = null。</p><ol start="4"><li><p>没有移除计时器或回调函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 定时器中有 dom 的引用，即使 dom 删除了，但是定时器还在，所以内存中还是有这个 dom。</span><span class="token comment">// 定时器</span><span class="token keyword">var</span> serverData <span class="token operator">=</span> <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> renderer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'renderer'</span><span class="token punctuation">)</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>renderer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    renderer<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>serverData<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token comment">// 观察者模式</span><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"I'm innerHTML"</span><span class="token punctuation">&#125;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> onClick<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决方法：①手动删除定时器和 dom；②removeEventListener 移除事件监听</p></li><li><p>循环引用 </p></li></ol><p>当出现了一个含有DOM对象的循环引用时，就会发生内存泄露。</p><h3 id="内存泄露的解决方案"><a href="#内存泄露的解决方案" class="headerlink" title="内存泄露的解决方案"></a>内存泄露的解决方案</h3><p>下面的方案是从网上搜索到的资料，本人并没有实践过（主要是还不懂），仅供大家参考：</p><ul><li> 显式类型转换</li><li> 避免事件导致的循环引用</li><li> 不影响返回值地打破循环引用</li><li> 延迟appendChild</li><li> 代理DOM对象<blockquote><p>更加具体的解决方法可点击这里：<a href="https://zhuanlan.zhihu.com/p/67843006?from=from_parent_mindnote">传送门</a></p></blockquote><h2 id="V8-垃圾回收机制"><a href="#V8-垃圾回收机制" class="headerlink" title="V8 垃圾回收机制"></a>V8 垃圾回收机制</h2>上文有提到：内存会发生泄露是因为没有及时释放多余的内存。那么问题来了，应该由谁去释放多余的内存，又是怎么释放内存的？答案是 V8 垃圾回收机制。在了解这个机制之前，我们先来认识下什么是 V8 。<h3 id="认识V8"><a href="#认识V8" class="headerlink" title="认识V8"></a>认识V8</h3>V8 是 Google 采用 C++ 编写的开源 JavaScript 引擎。采用即时编译，直接翻译成机器语言，并且使用了如内联缓存（inline caching）等方法来提高性能。有了这些功能，JavaScript程序在V8引擎下的运行速度媲美二进制程序。</li></ul><p>V8内存设限：64bit操作系统上不超过1.5G，32bit操作系统上不超过800M 这么设限为了浏览器使用内存足够，内部还有垃圾运行机制，时间也在用户感知的合理范围</p><p>目前V8垃圾回收采用增量标记算法需要50ms，采用非增量标记算法需要1s</p><p>这里先停一下，康康这篇文章再往下会更好：<a href="https://segmentfault.com/a/1190000018605776">前端面试：谈谈 JS 垃圾回收机制</a></p><hr><p>ddd，如果已经看完了上面这篇文章，就让我们继续往下吧~</p><h3 id="什么是垃圾"><a href="#什么是垃圾" class="headerlink" title="什么是垃圾"></a>什么是垃圾</h3><p>一般来说没有被引用的对象就是垃圾，就是要被清除。 有个例外如果几个对象引用形成一个环，互相引用，但根访问不到它们，这几个对象也是垃圾，也要被清除。</p><h3 id="V8垃圾回收策略"><a href="#V8垃圾回收策略" class="headerlink" title="V8垃圾回收策略"></a>V8垃圾回收策略</h3><p>基本思路：确定哪个变量不会再使用，然后释放它占用的内存。这个过程是周期性的，即垃圾回收程序每隔一定时间（或者说在代码执行过程中某个预定的收集时间）就会自动运行。值得注意的是，垃圾回收过程是一个近似且不完美的方案，因为某块内存是否还有用–属于“不可判定的”问题，这意味着靠算法是解决不了的。</p><p>我们以函数中局部变量的正常生命周期为例。函数中的局部变量会在函数执行时存在，此时，栈（或堆）内存会分配空间以保存相应的值。当函数在内部使用了变量，然后退出，此时，就不再需要那个局部变量了，它占用的内存可以释放了。但垃圾回收程序并不知道哪个局部变量是要被释放的，因此，程序必须跟踪记录哪个变量还会使用，以及哪个变量不会再使用。</p><p>原始数据都是由程序语言自身控制的，这里的回收还是指主要存活在堆区的对象数据，这个过程是离不开内存操作的，那在这种情况下是如何对垃圾进行回收的?答案是：</p><ol><li>采用分代回收的思想</li><li>内存分为新生代存储区、老生代存储区</li><li>针对不同代采用不同的 GC 算法</li></ol><p>下面针对 GC 算法展开讨论。</p><h3 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h3><p>相关概念：</p><ul><li><p>GC：垃圾回收机制的简写，垃圾回收期完成具体的工作，可以找到内存中的垃圾、并释放和回收空间</p></li><li><p>GC 算法：是 GC 工作时查找和回收所遵循的规则</p><h3 id="常见-GC-算法："><a href="#常见-GC-算法：" class="headerlink" title="常见 GC 算法："></a>常见 GC 算法：</h3></li><li><p>引用计数（不太常用）</p><ul><li>核心思想：跟踪记录每个值被引用的次数，每次引用的时候加一，被释放时减一，如果一个值的引用次数变成 0 了，就可以将其内存空间回收。</li><li>实现原理：<ul><li>引用计数器</li><li>当引用关系改变时修改引用数字</li><li>当引用数字为0时立即回收</li></ul></li><li>实例：  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> user1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>age<span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> user2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>age<span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> user3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>age<span class="token operator">:</span><span class="token number">13</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> nameList <span class="token operator">=</span> <span class="token punctuation">[</span>user1<span class="token punctuation">.</span>age<span class="token punctuation">,</span> user2<span class="token punctuation">.</span>age<span class="token punctuation">,</span> user<span class="token punctuation">.</span>age<span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> num1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> num2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    num3 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当函数调用过后，<code>num1</code> 和 <code>num2</code> 在外部不能使用，引用数为 0，会被回收;</li><li><code>num3</code> 是挂载在window上的，所以不会被回收;</li><li><code>user1</code>、<code>user2</code>、<code>user3</code> 被 <code>nameList</code> 引用，所以引用数不为 0，故不会被回收 ;</li></ul></li><li>优缺点：<table><thead><tr><th align="center">引用计数算法</th><th align="left">内容</th></tr></thead><tbody><tr><td align="center">优点</td><td align="left">1.发现垃圾时立即回收<br>2.最大限度减少程序暂停，让空间不会有被占满的时候</td></tr><tr><td align="center">缺点</td><td align="left">1.无法回收循环引用的对象<br>2.资源消耗开销大（对所有对象进行数值的监控和修改，本身就会占用时间和资源）</td></tr></tbody></table><ul><li>举一栗子说明上面缺点中无法回收循环应用对象的情况：  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  obj1<span class="token punctuation">.</span>name <span class="token operator">=</span> obj2   obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> obj1  <span class="token keyword">return</span> <span class="token string">'hello world'</span> <span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  obj1 和 obj2 因为互相有引用，所以计数器并不为 0 ，fn 调用结束之后依旧无法回收这两个对象</li></ul></li></ul></li><li><p>标记清除（最常用）</p><ul><li>核心思想：<strong>当变量进入执行上下文时</strong>（比如在函数内部声明一个变量时），这个变量会被加上存在于上下文中的标记；<strong>而在上下文中的变量</strong>，从逻辑上来说，永远不应该释放它们的内存，因为只要上下文中的代码在运行，就有可能用到它们；<strong>当变量离开上下文时</strong>，也会被加上离开上下文的标记【也有的说法是标记被清除，不过《JavaScript 高级程序设计》中写的是前者，就以该书为主吧】。于是当垃圾回收时就会销毁那些带标记的值并回收他们的内存空间。</li><li>实现原理：分 <strong>标记</strong> 和 <strong>清除</strong> 两个阶段完成<ul><li>第一阶段：遍历所有对象找活动对象（可达对象）进行标记（层次用递归进行操作）<ol><li>有一组基本的固有可达值，由于显而易见的原因无法删除。例如:<ul><li>本地函数的局部变量和参数</li><li>当前嵌套调用链上的其他函数的- 变量和参数</li><li>全局变量</li><li>还有一些其他的，内部的这些值称为根。</li></ul></li><li>如果引用或引用链可以从根访问任何其他值，则认为该值是可访问的<ul><li>例如，如果局部变量中有对象，并且该对象具有引用另一个对象的属性，则该对象被视为可达性， 它引用的那些也是可以访问的。</li></ul></li></ol></li><li>第二阶段：遍历所有对象，清除没有标记的对象，并抹掉第一个阶段标的标记<ul><li>注意：js中的标记是标记所有的变量，清除掉被标记为离开状态的变量；而老生代中的标记使标记存活的变量，清除没有被标记的变量。（什么是老生代？后面会讲到的）</li></ul></li><li>收尾：回收相应空间，将回收的空间加到空闲链表中，方便后面的程序申请空间使用</li></ul></li><li>优缺点：<table><thead><tr><th align="center">标记清除算法</th><th align="left">内容</th></tr></thead><tbody><tr><td align="center">优点</td><td align="left">1.相对于引用计数算法来说，解决了对象循环引用的问题。因为局部作用域里面的内容无法被标记，所以即使有引用还是会被清除掉<br>2.回收速度较快</td></tr><tr><td align="center">缺点</td><td align="left">1.空间链表地址不连续（空间碎片化），不能进行空间最大化使用<br>2.不会立即回收垃圾对象，清除的时候程序是停止工作的</td></tr></tbody></table><ul><li>下面是空间链表地址不连续的图示，可以更好的帮我们理解这个缺点是怎么肥事：<img src="https://s4.ax1x.com/2022/01/10/7EKZIs.jpg" alt="不连续空间链表"></li></ul></li></ul></li><li><p>标记整理</p><ul><li><p>核心思想：在 标记 和 清除 中间，添加了内存空间的 整理</p></li><li><p>实现原理：（标记整理可以看做是标记清除的 增强）</p><ul><li>标记阶段：与标记清除一致</li><li>整理阶段：清除垃圾前先执行整理操作，移动对象位置，在地址上产生连续</li><li>最后留出了整个的空闲空间</li></ul></li><li><p>流程图示：<br><img src="https://s4.ax1x.com/2022/01/10/7EK1LF.png" alt="未整理前"><br><img src="https://s4.ax1x.com/2022/01/10/7EK8Z4.png" alt="整理后"><br><img src="https://s4.ax1x.com/2022/01/10/7EKlsU.png" alt="回收后"></p></li><li><p>优缺点：</p><table><thead><tr><th align="center">标记整理算法</th><th align="left">内容</th></tr></thead><tbody><tr><td align="center">优点</td><td align="left">相较标记清除算法减少了碎片化空间</td></tr><tr><td align="center">缺点</td><td align="left">不会立即回收垃圾对象，清除的时候程序是停止工作的</td></tr></tbody></table></li></ul></li><li><p>空间复制</p><ul><li>新生代区域垃圾回收使用空间换时间</li><li>主要采用复制算法，要有空闲空间存在，当然新生代本身空间小，分出来的复制的空间更小，所以浪费这点空间换取时间的效率是微不足道的</li><li>老生代区域垃圾回收不适合复制算法，老生代空间大一分为二，会造成一半的空间浪费，存放数据多复制时间长。</li></ul></li><li><p>分代回收 (一定会用)</p><ul><li>新生代对象回收<blockquote><p>新生代 —— 就是指存活时间较短的对象，例如：一个局部作用域中，只要函数执行完毕之后变量就会回收。</p></blockquote><ul><li>主要使用算法：采用赋值算法 + 标记整理算法</li><li>回收过程：<ul><li>新生代内存区分为<strong>两个等大小空间</strong>，使用空间为From，空闲空间为To</li><li>如果需要申请空间使用，回收步骤如下：<ol><li>首先会将所有活动对象存储于From空间，这个过程中To是空闲状态。   </li><li>当From空间使用到一定程度之后就会触发GC操作，这个时候会进行标记整理——对活动对象进行标记并移动位置将使用空间变得连续。<br><img src="https://s4.ax1x.com/2022/01/10/7EKQMT.png" alt="步骤 1、2 图示"></li><li>将活动对象拷贝至To空间，拷贝完成之后活动空间就有了备份，这个时候就可以考虑回收操作了。</li><li>把From空间完成释放，回收完成。<br><img src="https://s4.ax1x.com/2022/01/10/7EKnGq.png" alt="步骤 3、4 图示"> </li><li>对From和To名称进行调换，继续重复之前的操作。<br><img src="https://s4.ax1x.com/2022/01/10/7EKmin.png" alt="步骤 5 图示"></li></ol></li></ul></li><li>这种算法的缺点是：只能使用堆内存的一半。</li><li>总结：使用From -&gt; 触发GC标记整理 -&gt; 拷贝到To -&gt; 回收From -&gt; 名称互换 -&gt; 重复之前</li></ul></li><li>晋升<ul><li>定义：拷贝的过程中某个对象的指代在老生代空间，就可能出现晋升。 晋升就是将新生代对象移动至老生代。</li><li>什么时候触发晋升操作?<ul><li>1.<strong>一轮GC之后还存活的新生代对象</strong>就需要晋升</li><li>2.在拷贝过程中，To空间的使用率超过25%，将这次的活动对象都移动至老生代空间<ul><li>Q：为什么设置25%这个阈值</li><li>A：当这次回收完成后，这个To空间会变为From空间，接下来的内存分配将在这个空间中进行。如果占比过高，会影响后续的内存分配。</li></ul></li></ul></li></ul></li><li>老生代对象回收<blockquote><p>老生代 —— 就是指存活时间较长的对象，例如：全局对象，闭包变量数据。</p></blockquote><ul><li>主要使用算法：主要采用标记清除 （首要） 、标记整理、增量标记算法</li></ul></li><li>V8内存空间一分为二，分为新生代存储区和老生代存储区<ul><li>左边小空间用于存储新生代对象<ul><li>64bit操作系统上不超过32M</li><li>32bit操作系统上不超过16M</li></ul></li><li>右边较大空间用于存储老生代对象<ul><li>64bit操作系统上不超过1.6G</li><li>32bit操作系统上不超过700M</li></ul></li></ul></li></ul></li><li><p>标记增量 (提高效率用)</p><ul><li>将一整段的垃圾回收操作标记拆分成多个小段完成回收，主要是为了实现程序和垃圾回收的交替完成，这样进行 效率优化 带来的时间消耗更加的合理。</li><li>优化垃圾回收：看图可以将垃圾回收分成两个部分，一个是程序的执行，一个是垃圾的回收。当垃圾回收的时候其实会阻塞程序的执行，所以中间会有空档期。<br>  <img src="../img/12.png"><blockquote><p>这篇文章也挺好，小伙伴们可以看看：<a href="http://newhtml.net/v8-garbage-collection/">传送门</a></p></blockquote></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是闭包</title>
      <link href="/2022/01/09/shi-me-shi-bi-bao/"/>
      <url>/2022/01/09/shi-me-shi-bi-bao/</url>
      
        <content type="html"><![CDATA[<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>指有权访问外层函数作用域中的变量的函数。</p><p>什么意思呢？举个栗子：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>a</code> 对于 foo 函数来说，属于外层函数作用域中的变量，由于作用域链，使得 foo 函数可以访问到变量 <code>a</code> ，因此就构成了一个闭包。</p><h3 id="创建闭包的方式"><a href="#创建闭包的方式" class="headerlink" title="创建闭包的方式"></a>创建闭包的方式</h3><p>那么该如何创建一个闭包呢？<br>常见方式：就是<strong>在一个函数内部创建另一个函数。</strong></p><h3 id="执行上下文的角度看闭包"><a href="#执行上下文的角度看闭包" class="headerlink" title="执行上下文的角度看闭包"></a>执行上下文的角度看闭包</h3><p>下面从执行上下文的角度看下闭包是怎么一回事：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">"global scope"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">"local scope"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> scope<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> f<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先要分析一下这段代码中执行上下文栈和执行上下文的变化情况。</p><ol><li>进入全局代码，创建全局执行上下文，全局执行上下文压入执行上下文栈</li><li>全局执行上下文初始化</li><li>初始化的同时，checkscope 函数被创建，保存作用域链到函数的内部属性[[scope]]</li><li>执行 checkscope 函数，创建 checkscope 函数执行上下文，checkscope 执行上下文被压入执行上下文栈</li><li>checkscope 执行上下文初始化，创建变量对象、作用域链、this等</li><li>checkscope 函数执行完毕，checkscope 执行上下文从执行上下文栈中弹出</li><li>执行 f 函数，创建 f 函数执行上下文，f 执行上下文被压入执行上下文栈</li><li>f 执行上下文初始化，创建变量对象、作用域链、this等</li><li>f 函数执行完毕，f 函数上下文从执行上下文栈中弹出</li></ol><blockquote><p>思考一个问题：当 f 函数执行的时候，checkscope 函数上下文已经被销毁了(即从执行上下文栈中被弹出)，怎么还会读取到 checkscope 作用域下的 scope 值呢？</p></blockquote><ul><li>这是因为 f 执行上下文维护了一个作用域链：<pre class="line-numbers language-js" data-language="js"><code class="language-js">fContext <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  Scope<span class="token operator">:</span><span class="token punctuation">[</span><span class="token constant">AO</span><span class="token punctuation">,</span> checkscopeContext<span class="token punctuation">.</span><span class="token constant">AO</span><span class="token punctuation">,</span> globalContext<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>就是因为这个作用域链，<code>f</code> 函数依然可以读取到 <code>checkscopeContext.AO</code> 的值，说明当 <code>f</code> 函数引用了 <code>checkscopeContext.AO</code> 中的值的时候，即使 <code>checkscopeContext</code> 被销毁了，但是 JavaScript 依然会让 <code>checkscopeContext.AO</code> 活在内存中，<code>f</code> 函数依然可以通过 <code>f</code> 函数的作用域链找到它，正是因为 JavaScript 做到了这一点，从而实现了闭包这个概念。</li></ul><h3 id="一道刷题必刷，面试必考的闭包题"><a href="#一道刷题必刷，面试必考的闭包题" class="headerlink" title="一道刷题必刷，面试必考的闭包题"></a>一道刷题必刷，面试必考的闭包题</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来分析一下为什么答案全为 3 ？</p><ul><li>当执行到 data[0] 函数之前，此时全局上下文的 VO 为：<pre class="line-numbers language-js" data-language="js"><code class="language-js">globalContext <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token constant">VO</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    data<span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    i<span class="token operator">:</span><span class="token number">3</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>当执行 data[0] 函数的时候，data[0] 函数的作用域链为：<pre class="line-numbers language-js" data-language="js"><code class="language-js">data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>Context <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  Scope<span class="token operator">:</span><span class="token punctuation">[</span><span class="token constant">AO</span><span class="token punctuation">,</span> globalContext<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>data[0]Context 的 AO 并没有 i 值，所以会从 <code>globalContext.VO</code> 中查找，i 为 3，所以打印的结果就是 3。</li><li>data[1] 和 data[2] 是一样的道理。</li></ul><p><strong>将上面的题改成闭包看看：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当执行到 data[0] 函数之前，此时全局上下文的 VO 为：（跟没改之前一模一样）  <pre class="line-numbers language-js" data-language="js"><code class="language-js">globalContext <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token constant">VO</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        data<span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        i<span class="token operator">:</span><span class="token number">3</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>当执行 data[0] 函数的时候，data[0] 函数的作用域链发生了改变：  <pre class="line-numbers language-js" data-language="js"><code class="language-js">data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>Context <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    Scope<span class="token operator">:</span><span class="token punctuation">[</span><span class="token constant">AO</span><span class="token punctuation">,</span> 匿名函数Context<span class="token punctuation">.</span><span class="token constant">AO</span><span class="token punctuation">,</span> globalContext<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>匿名函数执行上下文的AO为：  <pre class="line-numbers language-js" data-language="js"><code class="language-js">匿名函数Context <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token constant">AO</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        arguments<span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token number">0</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>            length<span class="token operator">:</span><span class="token number">1</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        i<span class="token operator">:</span><span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><code>data[0]Context</code> 的 AO 并没有 i 值，所以会沿着作用域链从匿名函数<code> Context.AO</code> 中查找，这时候就会找 i 为 0，找到了就不会往 <code>globalContext.VO</code> 中查找了（即使 <code>globalContext.VO</code> 也有 i 的值–为3），所以打印的结果就是0。</li><li>data[1] 和 data[2] 是一样的道理。</li></ul><p>以下代码块中，c 会报错，并不会读取到bar 执行上下文中变量对象c</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">innerFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    fn <span class="token operator">=</span> innerFoo<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>虽然 fn() ，即 innerFoo() 是在 bar 里面执行的，但是 innerFoo 函数执行的时候它的作用域 scope 里面分别是 <code>[AO,fooContext.AO, globalContext.AO]</code> ，并没有包括 barContext.AO 在里面，所以根本就没有声明 c 这个变量，所以报错</li></ul><h3 id="IIFE"><a href="#IIFE" class="headerlink" title="IIFE"></a>IIFE</h3><blockquote><p>推荐阅读文章：<a href="https://segmentfault.com/a/1190000003985390">[译] JavaScript：立即执行函数表达式（IIFE）</a></p></blockquote><p>当函数变成立即执行的函数表达式时，表达式中的变量不能从外部访问</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"Barry"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 无法从外部访问变量 name</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 抛出错误："Uncaught ReferenceError:name is not defined"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将 IIFE 分配给一个变量，不是存储 IIFE 本身，而是存储 IIFE 执行后返回的结果。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"Barry"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// IIFE 执行后返回的结果：</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Barry"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP 的流量控制机制</title>
      <link href="/2022/01/08/tcp-de-liu-liang-kong-zhi-ji-zhi/"/>
      <url>/2022/01/08/tcp-de-liu-liang-kong-zhi-ji-zhi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 运输层 </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP 的运输连接管理</title>
      <link href="/2022/01/06/tcp-de-yun-shu-lian-jie-guan-li/"/>
      <url>/2022/01/06/tcp-de-yun-shu-lian-jie-guan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="TCP-运输连接的三个阶段"><a href="#TCP-运输连接的三个阶段" class="headerlink" title="TCP 运输连接的三个阶段"></a>TCP 运输连接的三个阶段</h2><p>TCP 是面向连接的协议。运输连接是用来传送 TCP 报文的，共有三个阶段，即：</p><ul><li>连接建立（“三报文握手”）</li><li>数据传送</li><li>连接释放（“四报文挥手”）</li></ul><p>TCP 连接的建立采用客户–服务器方式。主动发起连接建立的应用进程叫做<strong>客户</strong>，被动等待连接建立的应用进程叫做<strong>服务器</strong>。</p><blockquote><p>下文将<strong>客户</strong>简写为 A ，将<strong>服务器</strong>简写为 B 。</p></blockquote><h2 id="TCP-的连接建立"><a href="#TCP-的连接建立" class="headerlink" title="TCP 的连接建立"></a>TCP 的连接建立</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>TCP 建立连接的过程叫做<strong>握手</strong>，握手需要在 A 和 B 之间交换三个 TCP 报文段。</p><p>首先，来认识一下握手挥手中用到的一些标识位和缩写的含义：</p><ul><li>SYN（Synchronize Sequence Numbers)：同步序列编号，表示建立链接</li><li>FIN：标识位，表示关闭链接</li><li>ACK（Acknowledgement）：标识位，表示响应</li><li>ack（Acknowledgement Number）：确认号码，是期望收到对方下一个报文的第一个数据字节的序号</li><li>seq（Sequence Number）：顺序号码（TCP连接中传送的字节流中的每个字节都按顺序编号）</li></ul><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>接下来先看下 TCP 三次握手的流程图：<br><img src="https://s4.ax1x.com/2022/01/05/TXqBZ9.png" alt="TCP 三次握手流程图"></p><ul><li>最初两端的 TCP 进程都处于 <code>CLOSED</code> （关闭）状态。</li><li>一开始，B 的 TCP 服务器进程先创建 <strong>传输控制块 TCB</strong> 【用于存储 TCP 连接中的一些重要信息，如 TCP 连接表、指向发送和接收缓存的指针、当前的发送和接收序号】，准备接受 A 的连接请求。然后服务器进程就处于 <code>LISTEN</code>（收听）状态，等待客户的链接请求。</li><li>A 的 TCP 客户进程也是首先创建 <strong>传输控制块 TCB</strong>。然后，在打算建立 TCP 连接时，向 B 发送 TCP 连接请求报文段，并进入 <code>SYN-SENT</code> （同步已发送）状态。<br>TCP 连接请求报文段首部中的同步位 <code>SYN = 1</code>（表明这是一个 TCP 连接请求报文段）；序号字段 <code>seq = x</code> （作为 TCP 客户进程所选择的初始序号）。【注意：TCP 规定 <code>SYN = 1</code> 的报文段不能携带数据，但要<strong>消耗掉一个序号</strong>。】</li><li>B 收到 TCP 连接请求报文段后，如果同意建立连接，则向 A 发送 TCP 连接请求确认报文段，并进入 <code>SYN-RCVD</code> （同步已接受）状态。<br>该报文段首部中的同步位 <code>SYN</code> 和确认位 <code>ACK</code> 都设置为 1 （表明这是一个 TCP 连接请求确认报文段）；序号字段 <code>seq = y</code>（作为 TCP 服务器进程所选择的初始序号），确认号字段 <code>ack = x + 1</code> （这是对 TCP 客户进程所选择的初始序号的确认）。【注意：这个报文段也不能携带数据，因为它是 <code>SYN</code> 被设置为 1 的报文段，但同样要消耗掉一个序号】。</li><li>A 收到 B 的确认后，还要向 B 发送一个普通的 TCP 确认报文段，并进入 <code>ESTABLISHED</code> （连接已建立）状态。<br>该报文段首部中的确认位 <code>ACK = 1</code> (表明这是一个普通的 TCP 确认报文段）；序号字段 <code>seq = x + 1</code> （这是因为 TCP 客户进程发送的第一个 TCP 报文段的序号为 x ，并且不携带数据，因此第二个报文段的序号为 x + 1）。【注意： TCP 规定普通的 TCP 确认报文段可以携带数据，但如果不携带数据，则不消耗序号】。在这种情况下，所发送的下一个数据报文段的序号仍是 <code>seq = x + 1</code>；确认号字段 <code>ack</code> 被设置为 y + 1 （这是对 TCP 服务器进程所选择的初始序号的确认）。</li><li>TCP 服务器进程收到该确认报文段后也进入 <code>ESTABLISHED</code> （连接已建立）状态。现在，TCP 双方都进入了连接已建立状态，他们可以基于已建立好的 TCP 连接进行可靠的数据传输了。</li></ul><h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><ol><li>Q：为什么 A 最后还要发送一次确认呢，只有两次握手不行吗？  </li></ol><p>A：防止已经失效的连接请求报文突然又传送到服务器，从而导致不必要的错误和资源的浪费。  </p><p>所谓“已失效的连接请求报文段”是这样产生的：  </p><ul><li>先考虑一种正常情况：A 发出连接请求，但因连接请求报文丢失而未收到确认，于是 A 重新发送一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接。这时 A 共发送了两个连接请求报文段，其中第一个丢失，第二个到达了 B ，没有“已失效的连接请求报文段”。  </li><li>现假定出现一种异常情况，即 A 发出的第一个连接请求报文段并没有丢失，而是在某些网络结点长时间滞留了，以致延误到连接释放以后的某个时间才到达 B 。本来这是一个早已失效的报文段。但 B 收到此失效的连接请求报文段后，就误以为是 A 又发出一次新的连接请求。于是就向 A 发出确认报文段，同意建立连接。假定不采用报文握手，那么只要 B 发出确认新的连接就建立了。<br>而由于现在 A 不并没有发出建立连接的请求，因此不会理睬 B 的确认，也不会向 B 发送数据。但 B 却以为新的运输连接已经建立了，并一直等待 A 发来数据。这样的话， B 的许多资源就这样白白浪费了。</li></ul><ol start="2"><li>Q：那为什么不是四次握手？五次六次不可以吗？  </li></ol><p>A：三次握手的目的是确认双方发送和接收的能力，当然，如果要 100 次都可以，但为了解决问题，三次就足够了，再多用处就不大了。</p><ol start="3"><li>Q：三次握手过程中可以携带数据么？  </li></ol><p>A1：第三次握手的时候，可以携带。前两次握手不能携带数据。<br>A2：如果前两次握手能够携带数据，那么一旦有人想攻击服务器，那么他只需要在第一次握手中的 SYN 报文中放大量数据，那么服务器势必会消耗更多的时间和内存空间去处理这些数据，增大了服务器被攻击的风险。<br>A3：第三次握手的时候，客户端已经处于ESTABLISHED状态，并且已经能够确认服务器的接收、发送能力正常，这个时候相对安全了，可以携带数据。</p><h2 id="TCP-的连接释放"><a href="#TCP-的连接释放" class="headerlink" title="TCP 的连接释放"></a>TCP 的连接释放</h2><p>先看下四次挥手的流程图，心里有数好一点：<br><img src="https://s4.ax1x.com/2022/01/06/TvT11O.png" alt="TCP 四次挥手流程图"></p><ul><li>当TCP 的运输连接管理的第二个阶段-数据传输结束后，通信的双方都可释放连接。</li><li>现在 A 和 B 都处于 <code>ESTABLISHED</code> （连接已建立）状态。假设 A 的应用进程通知其主动关闭 TCP 连接，就发送 TCP 连接释放报文段，停止发送数据，并进入 <code>FIN-WAIT-1</code> （终止等待1）状态。<br>TCP 连接释放报文段首部中的终止位 <code>FIN</code> 和确认为 <code>ACK</code> 的值都被设置为 1 （表明这是一个 TCP 连接释放报文段，同时也对之前收到的报文段进行确认）；序号 <code>seq = u</code> （它等于 TCP 客户进程之前已传送过的数据的最后一个字节的序号加 1 ）【注意：TCP 规定终止位 FIN 等于 1 的报文段即使不携带数据，也要消耗掉一个序号。】；确认号 <code>ack = v</code> （它等于 TCP 客户进程之前已收到的数据的最后一个字节的序号加 1 ）。</li><li>B 收到 TCP 连接释放报文段后，会发送一个普通的 TCP 确认报文段并进入 <code>CLOSE-WAIT</code>（关闭等待） 状态。<br>TCP 确认报文段首部中的确认位 <code>ACK = 1</code> （表明这是一个普通的 TCP 确认报文段）；序号 <code>seq = v</code> （它等于 TCP 服务器进程之前已传送过的数据的最后一个字节的序号加 1 ，这也与之前收到的 TCP 连接释放报文段中的确认号匹配）；确认号 <code>ack = u + 1</code> （这是对 TCP 连接释放报文段的确认）。<br>收到 A 发来的连接释放报文段后，B 应用进程这时应通知高层应用进程：TCP 客户进程要断开与自己的 TCP 连接。于是，从 A –&gt; B 这个方向的连接就释放了。这时的 TCP 连接属于 <code>half-close</code> （半关闭）状态，也就是 A 已经没有数据要发送了。但如果 B 还有数据要发送，A 仍要接收。也就是说，从 B –&gt; A 这个方向的连接并未关闭，这个状态可能会持续一段时间。</li><li>A 收到来自 B 的确认后，就进入 <code>FIN-WAIT-2</code> （终止等待2）状态，等待 B 发出的连接释放报文段。</li><li>若 B 已经没有要向 A 发送的数据，其应用进程就通知 TCP 释放连接。这时 B 发出的连接释放报文段必须使 <code>FIN = 1</code> 。现假定 B 的序号为 w （在半关闭状态 B 可能又发送了一些数据）。B 还必须重复上次已发送过的确认号 <code>ack = u + 1</code> 。这时 B 就进入 <code>LAST-ACK</code> （最后确认）状态，等待 A 的确认。</li><li>A 在收到 B 的连接释放报文段后，必须对此发出确认。在确认报文段中把 <code>ACK = 1</code> ，确认号 <code>ack = w + 1</code> ，而自己的序号是 <code>seq = u + 1</code> （根据 TCP 标准，前面发送过的 FIN 报文段要消耗掉一个序号），然后进入到 <code>TIME-WAIT</code> （时间等待）状态。【<strong>注意：现在 TCP 连接还没有释放掉，必须经过时间等待计时器设置的时间 <code>2 MSL</code>（最长报文段寿命，RFC 793 建议设为 2 分钟，现如今 2 分钟可能已经太长了，可以自己修改合适的时间） 后，A 才能进入到 <code>CLOSED</code> 状态</strong>，然后才能开始建立下一个新的连接】。当 A 撤销相应的传输控制块 TCB 后，就算结束了这次的 TCP 连接。</li><li>B 只要收到了 A 发出的确认，立即进入 <code>CLOSED</code> 状态。同样，撤销 TCB 后，就结束了这次的 TCP 连接。</li><li>可以看到，B 结束 TCP 连接的时间要比 B 早一些。</li></ul><h3 id="QAQ"><a href="#QAQ" class="headerlink" title="QAQ"></a>QAQ</h3><ol><li>Q：为什么 A 在 TIME-WAIT 状态必须等待 2MSL 的时间呢？</li></ol><p>A：答案是：①保证客户端发送的最后一个 ACK 报文段能够达到服务器；②防止已经失效的关闭连接报文段出现在本连接中。为什么这么说呢，可以来看看：  </p><ul><li>①由于这个 ACK 报文段有可能丢失，因而使处在 <code>LAST-ACK</code> 状态的 B 收不到对己发送的 FIN + ACK 报文段的确认。<br>B 会超时重传这个 FIN + ACK 报文段，而 A 就能在 2MSL 时间内收到这个重传的 FIN + ACK 报文段。<br>接着 A 重传一次确认，重新启动 <code>2MSL</code> 计时器。最后，A 和 B 都正常进入到 <code>CLOSED</code> 状态。<br>如果 A 在 TIME-WAIT 状态不等待一段时间，那么就无法收到 B 重传的 FIN + ACK 报文段，因而也不会再发送一次确认报文段。这样，B 就无法按照正常步骤进入 <code>CLOSED</code> 状态。</li><li>② A 在发送完最后一个 ACK 报文段后，再经过时间 2MSL ，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样就可以使下一个新的连接中不会出现这种旧的连接请求报文段。</li></ul><ol start="2"><li>Q：为什么是四次挥手而不是三次？</li></ol><p>A：因为服务端在接收到FIN, 往往不会立即返回FIN, 必须等到服务端所有的报文都发送完毕了，才能发FIN。因此先发一个ACK表示已经收到客户端的FIN，延迟一段时间才发FIN。这就造成了四次挥手。</p><ol start="3"><li>Q：如果是三次挥手会有什么问题？</li></ol><p>A：等于说服务端将ACK和FIN的发送合并为一次挥手，这个时候长时间的延迟可能会导致客户端误以为FIN没有到达客户端，从而让客户端不断的重发FIN。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 运输层 </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>执行上下文</title>
      <link href="/2022/01/05/zhi-xing-shang-xia-wen/"/>
      <url>/2022/01/05/zhi-xing-shang-xia-wen/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们首先来看一个例子：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'111'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'666'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按照代码书写顺序，应该先输出 111，再输出 666 才对，但是很遗憾，两次输出均为 666。<br>如果我们将上述代码中的函数声明改为函数表达式，结果又不太一样：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">f1</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'111'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//111</span><span class="token keyword">var</span> <span class="token function-variable function">f1</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'666'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//666</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>是不是很意外，这其中的奥秘其实就在于JS的执行上下文里，看完下面的内容，你就会理解为什么了。</p><h2 id="什么是执行上下文"><a href="#什么是执行上下文" class="headerlink" title="什么是执行上下文"></a>什么是执行上下文</h2><p><strong>JS 代码在执行之前，JS 引擎会先做一下“准备工作”，也就是创建对应的执行上下文。</strong><br>执行上下文有且只有三类：<strong>全局执行上下文</strong>，<strong>函数上下文</strong>，与eval上下文。由于eval一般不会使用，就不深入探究了。  </p><blockquote><p>插一句，在 JavaScript 中，运行环境主要包含了全局环境和函数环境。<br>而 JavaScript 代码运行过程中，最先进入的是全局环境，而在函数被调用时则进入相应的函数环境。<br>全局环境和函数环境所对应的执行上下文我们分别称为全局（执行）上下文和函数（执行）上下文。<br>下面进入正题：</p></blockquote><ol><li>全局执行上下文  </li></ol><ul><li>全局执行上下文只有一个，在客户端中一般由浏览器创建，也就是我们熟知的 window 对象，我们能通过 this 直接访问到它。<br><code>console.log(this);</code></li><li>全局对象 window 上预定义了大量的方法和属性，我们在全局环境的任意处都能直接访问这些属性方法，如：<br><code>console.log(this.Math.random())</code>等</li><li>window 对象是 var 声明的全局变量的载体。我们通过 var 创建的全局对象，都可以通过 window 直接访问。  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  window<span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><ol start="2"><li>函数执行上下文<br>每个函数都拥有自己的执行上下文，但是只有在函数被调用的时候才会被创建。（即使是调用同一个函数）<br>每次调用函数时，都会为该函数创建一个新的执行上下文。<br>于是我们很容易得知函数执行上下文可存在无数个。</li></ol><p>综上，执行上下文可以理解为代码在被解析以前或者在执行时候所处的环境。之所以这么理解，是因为全局上下文是在代码被解析前就已经由浏览器创建好了的，函数上下文是在函数调用时创建的。</p><blockquote><p>Q：接下来问题来了，我们写的函数多了去了，如何管理创建的那么多函数上下文呢？<br>A1：所以 JavaScript 引擎创建了执行上下文栈<code>（Execution context stack，ECStack）</code>【是一种拥有 LIFO（后进先出）数据结构的栈】来管理执行上下文。<br>A2：当执行一个函数的时候，就会创建一个执行上下文，并且压入执行上下文栈，当函数执行完毕的时候，就会将函数的执行上下文从栈中弹出  </p></blockquote><blockquote><p>既如此，当 JavaScript 开始要解释执行代码的时候，最先遇到的就是全局代码，所以初始化的时候首先就会向执行上下文栈压入一个全局执行上下文，我们用 <code>globalContext</code> 表示它，并且只有当整个应用程序结束的时候（比如关闭网页或退出浏览器），ECStack 才会被清空，所以程序结束之前， ECStack 最底部永远有个 <code>globalContext</code> 。</p></blockquote><h2 id="执行上下文的三个重要属性"><a href="#执行上下文的三个重要属性" class="headerlink" title="执行上下文的三个重要属性"></a>执行上下文的三个重要属性</h2><h3 id="变量对象（Variable-Object）"><a href="#变量对象（Variable-Object）" class="headerlink" title="变量对象（Variable Object）"></a>变量对象（Variable Object）</h3><p>是与执行上下文相关的数据作用域，存储了在上下文中定义的变量和函数声明。   </p><blockquote><p>因为不同执行上下文下的变量对象稍有不同，所以来理一下全局上下文中的变量对象和函数上下文中的变量对象。</p><ul><li><strong>全局上下文中的变量对象就是全局对象！</strong><ul><li>全局对象是由 Object 构造函数实例化的一个对象。<br><code>console.log(this instanceof Object);</code></li></ul></li><li><strong>在函数上下文中，用活动对象来表示变量对象。</strong>      <ul><li>活动对象(activation object, AO)和变量对象其实是同一个东西，只是变量对象是规范上的或者说是引擎实现上的，不可在 JavaScript 环境中访问，只有到当进入一个执行上下文中，这个执行上下文的变量对象才会被激活，而只有被激活的变量对象，也就是活动对象上的各种属性才能被访问。</li><li>活动对象是在进入函数上下文时刻被创建的，它通过函数的 arguments 属性初始化。arguments 属性值是 Arguments 对象。</li></ul></li></ul></blockquote><blockquote><p>再看下执行过程：<strong>执行上下文的代码会分成两个阶段进行处理：创建（代码预编译）阶段 和 执行（代码执行）阶段</strong></p></blockquote><ul><li>1.预编译阶段（进入执行上下文，这时候还没有执行代码）<br>先进行语法分析，没有问题以后，在预编译阶段对JavaScript代码中<strong>变量的内存空间</strong>进行分配（变量提升就是在这个阶段完成的）。<ul><li>变量对象会包括：<ul><li>1）函数的所有形参 (如果是函数上下文)<ul><li>由名称和对应值组成的一个变量对象的属性被创建</li><li>没有实参，属性值设为 <code>undefined</code></li></ul></li><li>2）函数声明【由名称和对应值（函数对象）组成一个变量对象的属性被创建】</li><li>3）变量声明【由名称和对应值（<code>undefined</code>）组成一个变量对象的属性被创建】</li></ul></li></ul></li></ul><p>举个栗子：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> <span class="token function-variable function">d</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在进入执行上下文后，这时候的AO是：</span><span class="token constant">AO</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   arguments<span class="token operator">:</span><span class="token punctuation">&#123;</span>       <span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>       length<span class="token operator">:</span><span class="token number">1</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 函数调用时创建的函数上下文，所以为 1</span>   b<span class="token operator">:</span><span class="token keyword">undefined</span><span class="token punctuation">,</span>   c<span class="token operator">:</span>reference to <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   d<span class="token operator">:</span><span class="token keyword">undefined</span><span class="token punctuation">&#125;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        > [执行上下文创建阶段的另一种参考解释1](https://www.cnblogs.com/echolun/p/11438363.html)  [执行上下文创建阶段的另一种参考解释2](https://blog.csdn.net/qq_33718648/article/details/90754331)  [执行上下文创建阶段的另一种参考解释3](https://juejin.cn/post/6844903682283143181#heading-4)- 2.代码执行阶段（执行代码逻辑，修改变量对象的值）  </span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>js                  <span class="token comment">// 还是上面的栗子，当代码执行完之后，这时候的AO是：</span>  <span class="token constant">AO</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      arguments<span class="token operator">:</span><span class="token punctuation">&#123;</span>          <span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>          length<span class="token operator">:</span><span class="token number">1</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>      b<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>      c<span class="token operator">:</span>reference to <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      d<span class="token operator">:</span>reference to FunctionExpression <span class="token string">"d"</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结上述所说：</p><ul><li>全局上下文的变量对象初始化是全局对象</li><li>函数上下文的变量对象初始化只包括 Arguments 对象</li><li>在进入执行上下文时会给变量对象添加形参、函数声明、变量声明等初始的属性值</li><li>在代码执行阶段，会再次修改变量对象的属性值，同时执行上下文在这个阶段会全部创建完成<h3 id="作用域链（Scope-Chain）"><a href="#作用域链（Scope-Chain）" class="headerlink" title="作用域链（Scope Chain）"></a>作用域链（Scope Chain）</h3>作用域链是指由当前上下文和上层上下文的一系列变量对象组成的层级链。</li></ul><p>我们已经知道，<strong>执行上下文分为创建和执行两个阶段</strong>，在执行上下文的执行阶段，当需要查找某个变量或函数时，会先在当前上下文的变量对象（活动对象）中进行查找，<strong>若是没有找到，则会依靠当前上下文中的作用域链，沿着上层上下文的变量对象进行查找，直到全局上下文中的变量对象（全局对象）</strong>。</p><blockquote><p>Q：既然如此，那作用域链又是怎么创建的？<br>A：我们都知道，JavaScript 中主要包含了全局作用域和函数作用域，而<strong>函数作用域是在函数被声明的时候确定的</strong>。<br>每一个函数都会包含一个 [[scope]] 内部属性，<strong>在函数被声明的时候，该函数的 [[scope]] 属性会保存其上层上下文的变量对象</strong>，形成包含上层上下文变量对象的层级链。**[[scope]] 属性的值是在函数被声明的时候确定的**。<br>当函数被调用的时候，其执行上下文会被创建并入栈。在创建阶段生成其变量对象后，会将该变量对象添加到作用域链的顶端并将 [[scope]] 添加进该作用域链中。而在执行阶段，变量对象会变为活动对象，其相应属性会被赋值。<br>所以，作用域链是由当前上下文变量对象及上层上下文变量对象组成的：<br><code>SC = AO + [[scope]]</code></p></blockquote><p>看个栗子：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 分析如下：</span><span class="token comment">// 在 fn1 函数上下文中，fn2 函数被声明，所以</span>fn2<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span>scope<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span>fn1_EC<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">,</span> globalObj<span class="token punctuation">]</span><span class="token comment">// 当 fn2 被调用的时候，其执行上下文被创建并入栈，此时会将生成的变量对象添加进作用域链的顶端，并且将 [[scope]] 添加进作用域链</span>fn2_EC<span class="token punctuation">.</span><span class="token constant">SC</span><span class="token operator">=</span><span class="token punctuation">[</span>fn2_EC<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token parameter">fn2<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span>scope<span class="token punctuation">]</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token operator">=></span>fn2_EC<span class="token punctuation">.</span><span class="token constant">SC</span><span class="token operator">=</span><span class="token punctuation">[</span>fn2_EC<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">,</span> fn1_EC<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">,</span> globalObj<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面用个例子总结一下函数执行上下文中作用域链和变量对象的创建过程：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">"global scope"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> scope2 <span class="token operator">=</span> <span class="token string">'local scope'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> scope2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>①由于先处理函数声明。于是checkscope 函数被创建，保存作用域链到内部属性[[scope]]（[[scope]] 属性会保存其上层上下文的变量对象（也就是全局对象））</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">checkscope<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span>scope<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>  globalContext<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>②执行 checkscope 函数，创建 checkscope 函数执行上下文，checkscope 函数执行上下文被压入执行上下文栈</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">ECStack <span class="token operator">=</span> <span class="token punctuation">[</span>  checkscopeContext<span class="token punctuation">,</span>  globalContext<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>③checkscope 函数并不立刻执行，开始做准备工作，第一步：复制函数[[scope]]属性创建作用域链</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">checkscopeContext <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  Scope<span class="token operator">:</span>checkscope<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span>scope<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>读到这里可能会有以下疑问：</p><blockquote><p>Q1：checkscope函数被创建时保存到[[scope]]的作用域链，和 checkscope执行前的准备工作中复制函数[[scope]]属性创建的作用域链有什么不同？<br>A1：checkscope函数创建的时候，保存的是根据词法所生成的作用域链。checkscope执行的时候，会复制这个作用域链，作为自己作用域链的初始化，然后根据环境生成变量对象，然后将这个变量对象，添加到这个复制的作用域链，这才完整的构建了自己的作用域链。  </p></blockquote><blockquote><p>Q2：为什么会有两个作用域链？<br>A2：因为在函数创建的时候并不能确定最终的作用域的样子。而为什么会采用复制的方式而不是直接修改呢？应该是因为函数会被调用很多次吧。</p></blockquote><ul><li>④第二步：用 arguments 创建活动对象，随后初始化活动对象，加入形参、函数声明、变量声明<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">AO</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  arguments<span class="token operator">:</span><span class="token punctuation">&#123;</span>    length<span class="token operator">:</span><span class="token number">0</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  scope2<span class="token operator">:</span><span class="token keyword">undefined</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>⑤第三步：将活动对象压入checkscope 作用域顶端<pre class="line-numbers language-js" data-language="js"><code class="language-js">checkscopeContext <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token constant">AO</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    arguments<span class="token operator">:</span><span class="token punctuation">&#123;</span>      length<span class="token operator">:</span><span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    scope2<span class="token operator">:</span><span class="token keyword">undefined</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  Scope<span class="token operator">:</span><span class="token punctuation">[</span><span class="token constant">AO</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>⑥准备工作做完，开始执行函数，随着函数的执行，修改 AO 的属性值<pre class="line-numbers language-js" data-language="js"><code class="language-js">checkscopeContext <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token constant">AO</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    arguments<span class="token operator">:</span><span class="token punctuation">&#123;</span>      length<span class="token operator">:</span><span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    scope2<span class="token operator">:</span><span class="token string">'local scope'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  Scope<span class="token operator">:</span><span class="token punctuation">[</span><span class="token constant">AO</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>⑦查找到 scope2 的值，返回后函数执行完毕，函数上下文从执行上下文栈中弹出<pre class="line-numbers language-js" data-language="js"><code class="language-js">ECStack <span class="token operator">=</span> <span class="token punctuation">[</span>  globalContext<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>至此，作用域链的知识点over :）<h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3>首先需要清楚，<code>this</code> 是执行上下文的一个属性，而不是某个变量对象的属性。<code>this</code> 的指向也不是如常识一般指向某某，而是依据调用栈和执行位置决定的（即取决于函数在哪里被调用）。【 <code>this</code> <strong>是在运行时绑定的，并不是在编写时绑定</strong>】<blockquote><p>this 绑定有五种场景：默认绑定、隐式绑定、显式绑定、new绑定、箭头函数绑定</p></blockquote></li></ul><ul><li><p>默认绑定<br>即函数调用时无任何调用前缀。默认绑定时，不管函数在何处调用， <code>this</code> 指向全局对象 <code>window</code>（非严格模式）；在严格模式下，默认绑定的 <code>this</code> 指向 <code>undefined</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// window</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 666</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token string">"use strict"</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// --> 默认绑定</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Uncaught TypeError: Cannot read property 'num' of undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>温馨提示：在严格模式下调用不在严格模式中的函数，并不会影响this指向，如下：</p>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'yfz'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// window</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// yfz</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token string">"use strict"</span><span class="token punctuation">;</span>  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li><li><p>隐式绑定<br>如果函数调用时，前面存在调用它的对象，那么this就会隐式绑定到这个对象上</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  num<span class="token operator">:</span> <span class="token number">666</span><span class="token punctuation">,</span>  func<span class="token operator">:</span> fn<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 666</span><span class="token comment">// 上面代码中，this 指向 obj，obj 有 num 属性，所以输出 666</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果函数调用前存在多个对象，this 指向距离调用自己最近的对象</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  num<span class="token operator">:</span> <span class="token number">666</span><span class="token punctuation">,</span>  func<span class="token operator">:</span> fn<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  num<span class="token operator">:</span> <span class="token number">111</span><span class="token punctuation">,</span>  o<span class="token operator">:</span> obj<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj1<span class="token punctuation">.</span>o<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 666</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里稍微拓展一下，如果将 obj 对象的 name 属性注释掉，却会输出 undefined</p>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  func<span class="token operator">:</span> fn<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'yfz'</span><span class="token punctuation">,</span>  o<span class="token operator">:</span> obj<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj1<span class="token punctuation">.</span>o<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  obj 对象虽然是 obj1 的属性，但它们两个的原型链并不相同，并不是父子关系，由于 obj 未提供 name 属性，所以是 undefined 。注意不要将作用域链和原型链弄混淆了，如果有小伙伴不能弄清楚，也可以看看我的另一篇博客：<a href="https://hcyety.github.io/2022/01/07/yuan-xing-lian/">原型链</a>。</p></blockquote><blockquote><p>既然说到这里了，索性再理清一下作用域链与原型链的区别：<br>  –&gt; 当访问一个变量时，解释器会先在当前作用域查找标识符，如果没有找到就去父作用域找，作用域链顶端是全局对象 window ，如果 window 都没有这个变量则报错。<br>  –&gt; 当在对象上访问某属性时，首先会查找当前对象，如果没有就顺着原型链往上找，原型链顶端是 null ，如果全程都没找到则返一个 undefined ，而不是报错。</p></blockquote></li><li><p>显式绑定<br>指通过call、apply、bind以及js API中的部分方法改变this指向</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// call、apply、bind</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  num<span class="token operator">:</span> <span class="token number">111</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  num<span class="token operator">:</span> <span class="token number">666</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  num<span class="token operator">:</span> <span class="token number">999</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 111</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 666</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj3<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 999</span><span class="token comment">// API</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  num<span class="token operator">:</span> <span class="token number">666</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印 3 次 666</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意，如果在使用 call 之类的方法改变this指向时，指向参数提供的是 null 或者 undefined ，那么 this 将指向全局对象。</p></blockquote></li><li><p>new绑定</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> echo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>echo<span class="token punctuation">.</span>num<span class="token punctuation">)</span> <span class="token comment">// 666</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上方代码中，构造调用创建了一个新对象 echo ，而在函数体内，this 将指向新对象 echo 上</p></li></ul><blockquote><p>如果一个函数调用存在多种绑定方法，this最终指向谁呢？<br>这里给出前面四种绑定方法的优先级：<br>显式绑定 &gt; 隐式绑定 &gt; 默认绑定<br>new绑定 &gt; 隐式绑定 &gt; 默认绑定  </p><p>为什么显式绑定不和new绑定比较呢？因为不存在这种绑定同时生效的情景，如果同时写这两种代码会直接抛错。</p></blockquote><ul><li>箭头函数this指向:<br>箭头函数中没有自己的 this ，箭头函数的 this 指向取决于外层作用域中的 this ：外层作用域或函数的 this 指向谁，箭头函数中的 this 便指向谁；最终保障是指向 window 。</li></ul><blockquote><p>参考学习资料：<a href="https://www.cnblogs.com/echolun/p/11962610.html">this的指向问题</a><br>另外可学习冴羽大神之不同的角度看this：<a href="https://github.com/mqyqingfeng/Blog/issues/7">JavaScript深入之从ECMAScript规范解读this</a></p></blockquote><p>说到这里，执行上下文的三个属性终于说完了，以上。</p><h2 id="执行上下文栈和执行上下文的具体变化过程"><a href="#执行上下文栈和执行上下文的具体变化过程" class="headerlink" title="执行上下文栈和执行上下文的具体变化过程"></a>执行上下文栈和执行上下文的具体变化过程</h2><p>还是那个例子：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">"global scope"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">"local scope"</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> scope<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>执行全局代码，创建全局执行上下文，全局上下文被压入执行上下文栈<pre class="line-numbers language-js" data-language="js"><code class="language-js">ECStack <span class="token operator">=</span> <span class="token punctuation">[</span>  globalContext<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>全局上下文初始化<pre class="line-numbers language-js" data-language="js"><code class="language-js">globalContext <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token constant">VO</span><span class="token operator">:</span><span class="token punctuation">[</span>global<span class="token punctuation">]</span><span class="token punctuation">,</span>  Scope<span class="token operator">:</span><span class="token punctuation">[</span>globalContext<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token keyword">this</span><span class="token operator">:</span>globalContext<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>初始化的同时，checkscope 函数被创建，保存作用域链到函数的内部属性[[scope]]<pre class="line-numbers language-js" data-language="js"><code class="language-js">checkscope<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span>scope<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>  globalContext<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ol start="3"><li>执行 checkscope 函数，创建 checkscope 函数执行上下文，checkscope 函数执行上下文被压入执行上下文栈<pre class="line-numbers language-js" data-language="js"><code class="language-js">ECStack <span class="token operator">=</span> <span class="token punctuation">[</span>  checkscopeContext<span class="token punctuation">,</span>  globalContext<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>checkscope 函数执行上下文初始化：</li></ol><ul><li>1）复制函数 [[scope]] 属性创建作用域链，</li><li>2）用 arguments 创建活动对象，</li><li>3）初始化活动对象，即加入形参、函数声明、变量声明，</li><li>4）将活动对象压入 checkscope 作用域链顶端。</li><li>同时 f 函数被创建，保存作用域链到 f 函数的内部属性[[scope]]<pre class="line-numbers language-js" data-language="js"><code class="language-js">checkscopeContext <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token constant">AO</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    arguments<span class="token operator">:</span><span class="token punctuation">&#123;</span>      length<span class="token operator">:</span><span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    scope<span class="token operator">:</span><span class="token keyword">undefined</span><span class="token punctuation">,</span>    f<span class="token operator">:</span>reference to <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  Scope<span class="token operator">:</span><span class="token punctuation">[</span><span class="token constant">AO</span><span class="token punctuation">,</span> globalContext<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token keyword">this</span><span class="token operator">:</span><span class="token keyword">undefined</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="5"><li>执行 f 函数，创建 f 函数执行上下文，f 函数执行上下文被压入执行上下文栈<pre class="line-numbers language-js" data-language="js"><code class="language-js">ECStack <span class="token operator">=</span> <span class="token punctuation">[</span>  fContext<span class="token punctuation">,</span>  checkscopeContext<span class="token punctuation">,</span>  globalContext<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>f 函数执行上下文初始化, 以下跟第 4 步相同：</li></ol><ul><li>1）复制函数 [[scope]] 属性创建作用域链</li><li>2）用 arguments 创建活动对象</li><li>3）初始化活动对象，即加入形参、函数声明、变量声明</li><li>4）将活动对象压入 f 作用域链顶端<pre class="line-numbers language-js" data-language="js"><code class="language-js">fContext <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token constant">AO</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  arguments<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      length<span class="token operator">:</span><span class="token number">0</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  Scope<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">AO</span><span class="token punctuation">,</span> checkscopeContext<span class="token punctuation">.</span><span class="token constant">AO</span><span class="token punctuation">,</span> globalContext<span class="token punctuation">.</span><span class="token constant">VO</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token keyword">this</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="7"><li>f 函数执行，沿着作用域链查找 scope 值，返回 scope 值</li><li>f 函数执行完毕，f 函数上下文从执行上下文栈中弹出<pre class="line-numbers language-js" data-language="js"><code class="language-js">ECStack <span class="token operator">=</span> <span class="token punctuation">[</span>  checkscopeContext<span class="token punctuation">,</span>  globalContext<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>checkscope 函数执行完毕，checkscope 执行上下文从执行上下文栈中弹出<pre class="line-numbers language-js" data-language="js"><code class="language-js">ECStack <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  globalContext<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>以上就是执行上下文的全部知识点，以及其底层实现过程，希望对大家有所帮助。</p></blockquote><h2 id="最后注明"><a href="#最后注明" class="headerlink" title="最后注明"></a>最后注明</h2><p>学习资料参考冴羽大神的博客：</p><ul><li><a href="https://github.com/mqyqingfeng/Blog/issues/4">JavaScript深入之执行上下文栈</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/5">JavaScript深入之变量对象</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/6">JavaScript深入之作用域链</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/7">JavaScript深入之从ECMAScript规范解读this</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/8">JavaScript深入之执行上下文</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 技术文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型链的继承</title>
      <link href="/2022/01/04/yuan-xing-lian-de-ji-cheng/"/>
      <url>/2022/01/04/yuan-xing-lian-de-ji-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Q：什么是原型继承？<br>A：一个对象可以使用另外一个对象的属性或者方法，就称之为继承。具体是通过将这个对象的原型设置为另外一个对象，这样根据原型链的规则，如果查找一个对象属性且在自身不存在时，就会查找另外一个对象，相当于一个对象可以使用另外一个对象的属性和方法了。</p><p>下面看看原型链的六种继承方式。</p><h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h2><ul><li>模拟实现：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'siyang'</span><span class="token punctuation">,</span> <span class="token string">'hcy'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>son<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["siyang", "hcy"]</span>son<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'hg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["siyang", "hcy", "hg"]</span><span class="token keyword">var</span> sis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sis<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["siyang", "hcy", "hg"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sis<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["siyang", "hcy", "hg"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="借用构造函数-经典继承"><a href="#借用构造函数-经典继承" class="headerlink" title="借用构造函数(经典继承)"></a>借用构造函数(经典继承)</h2></li><li>模拟实现：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> child1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">'kevin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// kevin</span><span class="token keyword">var</span> child2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">'daisy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// daisy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>优点：<ul><li>避免了引用类型的属性被所有实例共享：关键在于this指向（call 实现）；</li><li>可以在子构造函数中向父构造函数传参。</li></ul></li><li>缺点：由于必须在构造函数中定义方法，因此函数不能重用。<h2 id="组合继承（伪经典继承）（原型链继承-经典继承）"><a href="#组合继承（伪经典继承）（原型链继承-经典继承）" class="headerlink" title="组合继承（伪经典继承）（原型链继承+经典继承）"></a>组合继承（伪经典继承）（原型链继承+经典继承）</h2>使用原型链实现对原型属性和方法的继承，通过借用构造函数实现对实例属性的继承。</li><li>模拟实现：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">child</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">child</span><span class="token punctuation">(</span><span class="token string">'hcy'</span><span class="token punctuation">,</span><span class="token string">'20'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>son<span class="token punctuation">.</span>color<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hcy</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["blue", "red"]</span><span class="token keyword">var</span> sister <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">child</span><span class="token punctuation">(</span><span class="token string">'hg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sister<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["blue"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>优点：融合原型链继承和构造函数的优点，是 JavaScript 中最常用的继承模式。而且 <code>instanceof</code> 和 <code>isPrototypeof()</code> 也能够用于识别基于组合继承创建的对象。</li><li>缺点：<strong>会调用两次父构造函数</strong>。一次是设置子类型实例的原型的时候：<code>child.prototype = new Parent()</code> ；另一次在创建子类型实例的时候：<code>var son = new child(&#39;hcy&#39;,&#39;20&#39;)</code>。<h2 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h2>借助原型可以基于已有的对象创建新的对象，同时还不必因此创建自定义的类型。于是有了下面这个函数。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createObj</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>在 <code>createObj()</code> 函数内部，先创建了一个临时性构造函数，然后将传入的对象作为这个构造函数的原型，最后返回了这个临时类型的一个新实例</li></ul><p>看个栗子：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createObj</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span><span class="token string">'kevin'</span><span class="token punctuation">,</span>    friends<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'daisy'</span><span class="token punctuation">,</span> <span class="token string">'kelly'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token function">createObj</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token function">createObj</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>person1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'person1'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// kevin</span>person1<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'taylor'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>friends<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['daisy', 'kelly', 'taylor']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：修改<code>person1.name</code>的值，<code>person2.name</code>的值并未发生改变，并不是因为<code>person1</code>和<code>person2</code>有独立的 <code>name</code> 值，而是因为<code>person1.name = &#39;person1&#39;</code>是给<code>person1</code>添加了 <code>name</code> 值，并非修改了原型上的 <code>name</code> 值。</p><ul><li>下面看看原型式的模拟实现：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建一个临时性的构造函数</span>    <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 将传入的对象作为这个构造函数的原型</span>    <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>    <span class="token comment">// 返回这个临时类型的一个新实例</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">"hcy"</span><span class="token punctuation">,</span>    friends<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"et"</span><span class="token punctuation">,</span> <span class="token string">"siyang"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> another <span class="token operator">=</span> <span class="token function">Parent</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>another<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hcy</span>another<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'hg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token function">Parent</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span>friends<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["et", "siyang", "hg"]</span>son<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zbc'</span><span class="token punctuation">;</span><span class="token keyword">var</span> sister <span class="token operator">=</span> <span class="token function">Parent</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sister<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hcy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>缺点：包含引用类型的属性值始终都会共享相应的值，这点跟原型链继承一样</li><li>使用场景：不需要单独创建构造函数，但仍然需要在对象间共享信息</li></ul><h2 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h2><p>创建一个仅用于封装继承过程的函数，该函数在内部以某种形式来做增强对象，最后返回对象。</p><p>举个栗子：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createObj</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> clone <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>  clone<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> clone<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span><span class="token string">'siyang'</span><span class="token punctuation">;</span>  friends<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'hg'</span><span class="token punctuation">,</span><span class="token string">'hcy'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> anotherPerson <span class="token operator">=</span> <span class="token function">createObj</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>anotherPerson<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "hi"</span><span class="token comment">// 将 `createObj` 函数返回的结果赋值给 `clone` ，然后给 `clone` 添加了 sayName 方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>模拟实现：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">createAnother</span><span class="token punctuation">(</span><span class="token parameter">original</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> clone <span class="token operator">=</span> <span class="token function">Parent</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span>  clone<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> clone<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span><span class="token string">'siyang'</span><span class="token punctuation">,</span>  friends<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'hcy'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> another <span class="token operator">=</span> <span class="token function">createAnother</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>another<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello World!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>缺点：跟借用构造函数模式一样，每次创建对象都会创建一遍方法，函数不能复用使效率低下，与借用构造函数继承类似。</li><li>使用场景：主要关注对象，而不在乎类型和构造函数</li></ul><h2 id="寄生组合式继承（引用类型最理想的继承范式）"><a href="#寄生组合式继承（引用类型最理想的继承范式）" class="headerlink" title="寄生组合式继承（引用类型最理想的继承范式）"></a>寄生组合式继承（引用类型最理想的继承范式）</h2><p>即通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。<br>基本思路：不通过调用父类构造函数给子类原型赋值，而是取得父类原型的一个副本。<br>本质上：使用寄生式继承来继承父类原型，然后再将返回的新对象赋值给子类原型。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span><span class="token parameter">child<span class="token punctuation">,</span> person</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> child<span class="token punctuation">;</span>  child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>栗子：<br>先放一个组合继承的代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> child1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">'kevin'</span><span class="token punctuation">,</span> <span class="token string">'18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改造目标：不使用 <code>Child.prototype = new Parent()</code> ，而是间接的让 <code>Child.prototype</code> 访问到 <code>Parent.prototype</code>。</p><p>明白需求之后，开始动手：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 关键的三步</span><span class="token keyword">var</span> <span class="token function-variable function">F</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> child1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">'kevin'</span><span class="token punctuation">,</span> <span class="token string">'18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>于是封装：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">prototype</span><span class="token punctuation">(</span><span class="token parameter">child<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> prototype <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>prototye<span class="token punctuation">)</span><span class="token punctuation">;</span>  prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> child<span class="token punctuation">;</span>  child<span class="token punctuation">.</span>prototpe <span class="token operator">=</span> prototype<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 当我们使用的时候：</span><span class="token function">prototype</span><span class="token punctuation">(</span>Child<span class="token punctuation">,</span> Parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：只调用了一次 Parent 构造函数，并且因此避免了在 Parent.prototype 上面创建不必要的、多余的属性。同时，原型链还能保持不变；因此，还能够正常使用 <code>instanceof</code> 和 <code>isPrototypeOf。</code></p><ul><li>完整模拟实现：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">obj</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span><span class="token parameter">child<span class="token punctuation">,</span> Parent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 创建父类原型的一个副本</span>  <span class="token keyword">var</span> _prototype <span class="token operator">=</span> <span class="token function">obj</span><span class="token punctuation">(</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 为创建的副本添加 constructor 属性，弥补因重写原型而失去的默认的 constructor 属性</span>  <span class="token class-name">_prototype</span><span class="token punctuation">.</span>constructor <span class="token operator">=</span> child<span class="token punctuation">;</span>  <span class="token comment">// 将新创建的对象（即副本）赋值给子类原型</span>  child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> _prototype<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">child</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>child<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayAge</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">inheritPrototype</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> Parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> sister <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">child</span><span class="token punctuation">(</span><span class="token string">'siyang'</span><span class="token punctuation">,</span> <span class="token string">'20'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sister<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>sister<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// siyang</span>sister<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sister<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  ["blue", "red", "yellow"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 技术文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型链</title>
      <link href="/2022/01/03/yuan-xing-lian/"/>
      <url>/2022/01/03/yuan-xing-lian/</url>
      
        <content type="html"><![CDATA[<h2 id="原型链的基本构想"><a href="#原型链的基本构想" class="headerlink" title="原型链的基本构想"></a>原型链的基本构想</h2><p>Q：什么是原型链？<br>A：当对象查找一个属性的时候，如果没有在自身找到，那么就会查找自身的原型，如果原型还没有找到，那么会继续查找原型的原型，直到找到 <code>Object.prototype</code> 的原型时，此时原型为 <code>null</code> ，查找停止。这种通过 通过原型链接的逐级向上的查找链被称为原型链。</p><p>图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线。下面 step by step 来探究原型链的奥妙。<br><img src="https://s4.ax1x.com/2022/01/07/7pek60.png" alt="原型链中的各种关系"><br>从上图我们可以了解到构造函数（<code>Person</code>）、原型（<code>Person.prototype</code>）和实例（<code>person</code>）之间的关系：<br>每个构造函数都有一个原型对象（用<code>Person.prototype</code>），原型对象都包含一个指向构造函数的指针（用<code>Person.prototype.constructor</code>获取），而实例都包含一个指向原型对象的内部指针（用<code>person._proto_</code>）。这样就在实例和原型之间构造了一条原型链。这就是原型链的基本构想。</p><p>下面来认识 <code>constructor</code> 和 <code>_proto_</code>：</p><ol><li>constructor<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>在解释为什么之前，我们需要了解到原型链的搜索机制：在读取实例上的属性时，首先会在实例上搜索这个属性。如果没找到，则会继承搜索实例的原型。在通过原型链实现继承之后，搜索就可以继承向上，搜索原型的原型。<strong>对属性和方法的搜索会一直持续到原型链的末端</strong>。</p></blockquote></li></ol><p>那么现在可以来看看为什么代码块中的打印会为 true 了：当获取 person.constructor 时，其实 person 中并没有 <code>constructor</code> 属性，当不能读取到 <code>constructor</code> 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性。</p><ol start="2"><li><strong>proto</strong><br>是实例对象指向原型对象的指针，隐式原型，是每个对象都会有的一个属性。</li></ol><p>来看个例子：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getSuperValue</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>property<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 继承了 SuperType</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SubType<span class="token punctuation">.</span>prototpye<span class="token punctuation">.</span><span class="token function-variable function">getSubValue</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getSuperValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码我们可以看到，<code>SubType</code> 通过创建 <code>SuperType</code> 的实例继承了 <code>SuperType</code>，于是 <code>SubType</code> 从构造函数变成了实例，<code>SuperType</code> 的实例变成了 <code>SubType</code> 的原型。这样一来，原本存在于 <code>SuperType</code> 的实例中的所有属性和方法，现在也存在于 <code>SubType.prototype</code>中了。<br>后面的代码还在继承的基础上，给 <code>SubType</code> 添加了一个新方法。于是：<img src="../img/36.png"><br>提醒：<code>getSuperValue()</code>方法仍然还在 <code>SuperType.prototype</code>中，但<code>property</code>则位于<code>SubType.prototype</code>中。这是因为<code>property</code>是一个实例属性，而<code>getSuperValue()</code>则是一个原型方法。既然<code>SubType.prototype</code>现在是<code>SuperType</code>的实例，那么<code>property</code>当然就位于该实例中了。<br>于是我们懂了，当原型对象等于另一个类型的实例后，此时的原型对象将包含一个指向另一个原型的指针，相应的，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么如此递进，就会构成实例与原型的链条，也就是原型链。</p><h3 id="默认原型"><a href="#默认原型" class="headerlink" title="默认原型"></a>默认原型</h3><p>实际上，原型链中还有一环。我们知道所有引用类型默认都继承自 <code>Object</code> ，所有函数的默认原型也都是 <code>Object</code> 的实例，因此默认原型都会包含一个内部指针，指向 <code>Object.prototype</code> 。这也正是所有自定义类型都会继承 <code>toString()</code>、<code>valueOf()</code> 等默认方法的根本原因。</p><h3 id="原型与继承关系"><a href="#原型与继承关系" class="headerlink" title="原型与继承关系"></a>原型与继承关系</h3><p>原型与实例的关系可以通过两种方式来确定。<br>①是使用 <code>instanceof</code> 操作符，如果一个实例的原型链中出现过相应的构造函数，则 <code>instanceof</code> 返回 <code>true</code>。如下所示：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 继承了 SuperType</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">SubType</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">SuperType</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从技术上讲，<code>instance</code> 是 <code>Object</code>、<code>SubType</code>、<code>SuperType</code> 的实例，因为 <code>instance</code> 的原型链中包含这些构造函数的原型。</p><p>②是使用 <code>isPrototypeOf()</code> 方法。原型链中的每个原型都可以调用这个方法，只要原型链中包含这个原型，这个方法就返回 <code>true</code> 。如下所示：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="原型链的问题："><a href="#原型链的问题：" class="headerlink" title="原型链的问题："></a>原型链的问题：</h3><ol><li>原型中如果存在引用类型的值，会被所有实例共享，如下所示：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'greeb'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'black'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span> <span class="token comment">// "red, blue, green, black"</span><span class="token keyword">var</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "red, blue, green, black"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>如果原型的属性被所有的实例共享，就会存在一个实例修改了这个属性后，也会影响到其他实例，这往往会造成一些不必要的麻烦。因此，通常的做法是在构造函数中，而不是在原型中定义属性，如：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'black'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["black"]</span><span class="token keyword">var</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["red"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在创建子类型的实例时，不能向超类型的构造函数中传递参数</li></ol><p>实际上，应该说是没有办法在不影响所有对象实例的情况下，给超类型的构造函数传递参数。有鉴于此，再加上由于原型中包含引用类型值所带来的问题，实践中很少会单独使用原型链。<br>为了解决这些问题，可以使用一种叫做 借用构造函数的技术（有时候也叫做伪造对象或经典继承），即在子类型构造函数的内部调用超类型构造函数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 继承了 SuperType ，同时还传递了参数</span>    <span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 实例属性</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">'siyang'</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "siyang"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 29</span><span class="token keyword">var</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">'hg'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "hg"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 28</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码在 SubType 内部使用 call 实现了对 SuperType 的”继承”，同时每个实例都有自己的实例属性，互不影响；而且创建实例时还可以向超类型 SuperType 传递参数。</p><blockquote><p>说到原型链的继承，也是一个 JS 必须学习的一个重点，在我另一篇博客中也有详细介绍：<a href="https://hcyety.github.io/2022/01/07/yuan-xing-lian-de-ji-cheng/">原型链的继承</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 技术文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>var let const 的区别使用</title>
      <link href="/2021/12/27/var-let-const-de-qu-bie-shi-yong/"/>
      <url>/2021/12/27/var-let-const-de-qu-bie-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="var"><a href="#var" class="headerlink" title="var"></a>var</h2><p><strong>用于声明变量，变量声明的同时，可以赋值也可不赋值（不赋值的情况下，变量会保存一个特殊值 <code>undefined</code> ），后续可以更改变量的值。</strong></p><ul><li>注意1：<ul><li>变量名可以包含字母，数字，下划线和美元符号，但要以字母开头【也可以以$和_开头（但一般不这么用）】。</li><li>变量名是大小写敏感的（y和Y是不同的变量）</li><li>保留字（如JavaScript关键字）不能作为变量名使用</li></ul></li><li>注意2：var会发生“变量提升”现象。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>之所以不会报错，是因为 ECMAScript 运行时把它看成等价于如下代码：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> age<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>这就是所谓的“变量提升”，也就是把所有变量声明都拉到函数作用域的顶部。此外，反复多次使用 var 声明同一个变量也没有问题：<pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30</span>### <span class="token keyword">var</span> 声明作用域使用 <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">var</span><span class="token template-punctuation string">`</span></span> 操作符定义的变量会成为 包含它的函数的局部变量。比如，使用 <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">var</span><span class="token template-punctuation string">`</span></span> 在一个函数内部定义一个变量，就意味着该变量将在函数退出时被销毁：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>`js<span class="token keyword">function</span> <span class="token function">test</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">'hi'</span><span class="token punctuation">;</span>  <span class="token comment">// 局部变量</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 出错！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>这里，<code>message</code> 变量是在函数内部使用 <code>var</code> 定义的。函数为 <code>test()</code> ，调用它就会创建这个变量并给该变量赋值；调用之后变量随即被销毁，因此实例中的最后一行会导致错误。<br>不过，在函数内定义变量时省略 var 操作符，可以创建一个全部变量。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  message <span class="token operator">=</span> <span class="token string">'hi'</span><span class="token punctuation">;</span>  <span class="token comment">// 全局变量</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "hi"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>去掉之前的 var 操作符之后，message 就变成了全局变量。只要调用一次函数 test() ，就会定义这个变量，并且可以在函数外部访问到。<blockquote><p>注意：虽然可以省略 var 操作符定义全局变量，但不推荐这么做。因为在局部作用域中定义的全局变量很难维护，也会造成困扰。在严格模式下，如果像这样给未声明的变量赋值，则会导致抛出 <code>ReferenceError</code> 。</p></blockquote></li></ul><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p><strong>它的用法类似于var，但是所声明的变量，只在 let 命令所在的代码块内有效。</strong> 看下面例子：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'hg'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hg</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hg</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError：age 没有定义</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，age 变量之所以不能再 if 块外部被引用，是因为它的作用域仅限于该块内部。<br>由于块作用域是函数作用域的子集，因此适用于 var 的作用域限制同样也适用于 let 。</p><ul><li>注意1：let不允许在相同作用域内，重复声明同一个变量。<pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token comment">// 报错</span>  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 报错</span>  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 报错</span>  <span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> arg<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  <span class="token comment">// 不报错</span>  <span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> arg<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">     - 注意2：let不像var那样会发生“变量提升”现象。## const**声明一个只读的常量。一旦声明，常量的值就不能改变；且声明变量时，就必须立即初始化，不能留到以后赋值。**- 注意1：</span><span class="token template-punctuation string">`</span></span><span class="token keyword">const</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> 的作用域与 </span><span class="token template-punctuation string">`</span></span><span class="token keyword">let</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> 命令相同：只在声明所在的块级作用域内有效。- 注意2：</span><span class="token template-punctuation string">`</span></span><span class="token keyword">const</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> 命令声明的常量也是不提升，只能在声明的位置后面使用。- 注意3：</span><span class="token template-punctuation string">`</span></span><span class="token keyword">const</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> 声明的常量，也与 </span><span class="token template-punctuation string">`</span></span><span class="token keyword">let</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> 一样不可重复声明。- 注意4：对于复合类型的变量，变量名不指向数据，而是指向数据所在的地址。</span><span class="token template-punctuation string">`</span></span><span class="token keyword">const</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> 声明的限制只适用于它指向的变量的引用。**const 命令只是保证变量名指向的地址不变，并不保证该地址的数据不变，也就是说，如果 const 变量引用的是一个对象，那么修改整个对象内部的属性并不违反 const 限制。**       栗子1：    </span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>js    <span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    foo<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>    foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// TypeError："foo" is read-only</span>    <span class="token comment">// 上面代码中，常量foo储存的是一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把 foo 指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性。  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  栗子2：  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可执行</span>a<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 可执行</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Dave'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 报错</span><span class="token comment">// 上面代码中，常量 a 是一个数组，这个数组本身是可写的，但是如果将另一个数组赋值给 a ，就会报错。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><p>关于变量提升，还有一些东西可以探讨一下。首先，变量提升是指把变量声明提升到当前执行环境的最顶端。</p><p>看一个例子：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错ReferenceError</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 以上代码可看作：</span><span class="token keyword">var</span> foo<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错ReferenceError</span>foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，由于 <code>var</code> 发生了“变量提升”现象，将 <code>foo</code> 的声明提升到了 <code>console.log(foo)</code> 前面，即脚本开始运行时，变量 <code>foo</code> 已经存在了，但是没有值，所以会输出 <code>undefined</code>。<br>变量 <code>bar</code> 用 let命令声明，不会发生变量提升。这表示在声明它之前，变量bar是不存在的，这时如果用到它，就会抛出一个错误。</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><ol><li><code>var</code> 和 <code>function</code> 的变量提升是有优先级的，且 <code>function</code> 的高于 <code>var</code> 的。（另外，如果函数名字相同，后面函数会覆盖前面的函数。）<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// ƒ a() &#123;&#125;</span><span class="token comment">// 可以隐式地理解为：</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ƒ a() &#123;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>当遇到函数和变量同名且都会被提升的情况，由于函数声明优先级比较高，因此变量声明会被函数声明所覆盖，但是可以重新赋值。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：function a()&#123; alert('我是函数') &#125;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我是函数'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'我是变量'</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//输出：'我是变量'</span><span class="token comment">// 上面代码可以隐式的理解为：</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我是函数'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">var</span> a<span class="token punctuation">;</span>    <span class="token comment">// undefined</span><span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//输出：function a()&#123; alert('我是函数') &#125;</span>a <span class="token operator">=</span> <span class="token string">'我是变量'</span><span class="token punctuation">;</span><span class="token comment">//赋值</span><span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//输出：'我是变量'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>var 和 function 的变量提升优先级显而易见，但如果是函数声明 <code>function foo()&#123;&#125;</code> 和函数表达式 <code>var foo = function()&#123;&#125;</code> 呢？<pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span> <span class="token comment">// function f1()&#123;&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span> <span class="token comment">// undefined</span><span class="token keyword">var</span> <span class="token function-variable function">f2</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 函数表达式</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 函数声明</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>上面的代码并不是说函数声明的提升优先级高于函数表达式，而是因为当遇到函数表达式的时候，首先会将<strong>关键字+变量名</strong>提升到当前执行环境的最顶端，也就是<code>var f2</code> 先被提升，然而此时 <code>f2</code> 的值为 <code>undefined</code>，所以 <code>f2</code> 打印值为 <code>undefined</code>。</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 之作用域</title>
      <link href="/2021/12/23/js-zhi-zuo-yong-yu/"/>
      <url>/2021/12/23/js-zhi-zuo-yong-yu/</url>
      
        <content type="html"><![CDATA[<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p>是指作用域是指程序源代码中定义变量的区域。</p><h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p>指在代码块 {} 里面定义的变量，只会在当前代码块有效，如果外层作用域下想访问该变量，会报引用错误异常。<br>使用关键字 <code>let</code> 或 <code>const</code> 定义块级作用域的变量。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// ReferenceError: i is not defined</span><span class="token comment">// 因为 i 是用 let 生命的，只能在 let 的作用域里使用，即 for 循环内部有效，外部作用域是访问不到的。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><p>是指包裹在函数里的作用域，其中的变量或者内部函数，对外都是封闭的，即外界无法访问。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token comment">// ReferenceError: a, b, c is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h2><p>是最外层的全局作用域，任何地方都可以访问得到。<br>在最外层作用域下使用 var 关键字会定义全局变量，也就是说会挂载在 window 对象上，或者不使用关键字 var、let、const 直接对变量名字进行赋值，JS也会自动为其创建为全局变量。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    b <span class="token operator">=</span> <span class="token number">20</span>    <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        c <span class="token operator">=</span> <span class="token number">30</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 10</span>    <span class="token punctuation">&#125;</span>    <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// b 和 c 变量被隐式声明到全局变量了，所以能访问到，这也叫变量提升机制</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// 20</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">// 30</span><span class="token comment">// 但 a，b，c 也被挂载在 window 对象（全局作用域）上面了</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token comment">// 20</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token comment">// 30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h2><p>在变量定义时决定（也叫静态作用域）。例如函数的作用域是在函数<strong>定义</strong>时决定的。 </p><h2 id="动态作用域"><a href="#动态作用域" class="headerlink" title="动态作用域"></a>动态作用域</h2><p>在变量调用时才决定。例如函数的作用域是在函数<strong>调用</strong>的时候才决定的。<br>基于这两种作用域的不同，于是作用域的嵌套情况也不相同。 </p><p>下面来看一个案例：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 结果是？？？</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>假设JavaScript采用静态作用域，让我们分析下执行过程：<ul><li>嵌套情况：全局作用域–&gt;foo函数作用域–&gt;bar函数作用域</li><li>于是：执行 <code>foo</code> 函数，先从 <code>foo</code> 函数作用域里查找是否有局部变量 <code>value</code>。如果没有，就根据函数定义的位置，往外一层的作用域里查找变量，发现在全局作用域里找到变量 <code>value</code> ，所以结果会打印 1。</li></ul></li><li>假设JavaScript采用动态作用域，让我们分析下执行过程：<ul><li>嵌套情况：全局作用域–&gt;bar函数作用域–&gt;foo函数作用域</li><li>于是：执行 <code>foo</code> 函数，依然是从 <code>foo</code> 函数作用域里查找是否有局部变量 <code>value</code>。如果没有，就从调用函数的作用域，再往外一层也就是 <code>bar</code> 函数作用域里查找 <code>value</code> 变量，所以结果会打印 2。</li></ul></li><li>由于<strong>JavaScript采用的是静态作用域</strong>，所以这个例子的结果是 1。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作服务器用到的 Linux 命令</title>
      <link href="/2021/12/21/bu-shu-fu-wu-qi-yong-dao-de-linux-ming-ling/"/>
      <url>/2021/12/21/bu-shu-fu-wu-qi-yong-dao-de-linux-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><ul><li>下载：<code>yum install ...</code>（阿里云服务器默认安装了 yum ，没有 yum 的可用 apt 代替）</li><li>检查是否安装：<code>rpm -qa ...</code>【有输出说明已安装，如果没有输出则没有安装，需使用安装命令进行安装】<h2 id="操作文件"><a href="#操作文件" class="headerlink" title="操作文件"></a>操作文件</h2><pre class="line-numbers language-none"><code class="language-none">ls　　          显示文件或目录  -l                列出文件详细信息l(list)  -a                列出当前目录下所有文件及目录，包括隐藏的a(all)mkdir           创建目录  -p                创建目录，若无父目录，则创建p(parent)cd              切换目录touch           创建空文件echo            创建带有内容的文件。cat             查看文件内容cp              拷贝mv              移动或重命名rm              删除文件  -r                递归删除，可删除子目录及文件  -f                强制删除find            在文件系统中搜索某文件wc              统计文本中行数、字数、字符数grep            在文本文件中查找某个字符串rmdir           删除空目录tree            树形结构显示目录，需要安装tree包pwd             显示当前目录ln              创建链接文件more、less      分页显示文本文件内容head、tail      显示文件头、尾内容ctrl+alt+F1     命令行全屏模式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="打包压缩"><a href="#打包压缩" class="headerlink" title="打包压缩"></a>打包压缩</h2><pre class="line-numbers language-none"><code class="language-none">gzip：            压缩方式一bzip2：           压缩方式二后面可带参数：  -c              归档文件  -x              压缩文件  -z              gzip压缩文件  -j              bzip2压缩文件  -v              显示压缩或解压缩过程 v(view)  -f              使用档名例：tar -cvf &#x2F;home&#x2F;abc.tar &#x2F;home&#x2F;abc           只打包，不压缩tar -zcvf &#x2F;home&#x2F;abc.tar.gz &#x2F;home&#x2F;abc       打包，并用gzip压缩tar -jcvf &#x2F;home&#x2F;abc.tar.bz2 &#x2F;home&#x2F;abc      打包，并用bzip2压缩当然，如果想解压缩，就直接将上面命令 tar -cvf  &#x2F; tar -zcvf  &#x2F; tar -jcvf 中的 “c” 换成 “x” 就可以了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2></li><li>查看服务运行状态：<code>ps -ef | gref ...</code></li><li>启动tomcat：<code>./startup.sh</code>；关闭：<code>./shutdown.sh</code></li><li>查询所有开放端口信息：<code>netstat -anp</code><h2 id="检查Linux上防火墙是否关闭"><a href="#检查Linux上防火墙是否关闭" class="headerlink" title="检查Linux上防火墙是否关闭"></a>检查Linux上防火墙是否关闭</h2></li><li>输入命令关闭：<code>systemctl stop firewalld.service</code></li><li>输入命令开启：<code>systemctl start firewalld.service</code></li><li>查看防火墙状态：<code>firewall-cmd --state</code>（not running表示关闭，running表示开启)</li><li>查询所有开放的端口：<code>firewall-cmd --list-all</code></li><li>查询指定端口是否开放：<code>firewall-cmd --query-port=8080/tcp</code>（yes：开放；no：未开放）</li><li>开放指定端口：<code>firewall-cmd --add-port=8080/tcp --permanent</code></li><li>移除指定端口：<code>firewall-cmd --permanent --remove-port=8080/tcp</code></li><li>重载新开放的端口：<code>firewall-cmd --reload</code><h2 id="在服务器上访问-ip"><a href="#在服务器上访问-ip" class="headerlink" title="在服务器上访问 ip"></a>在服务器上访问 ip</h2></li><li>连接方式：<code>curl http://（ip地址）</code></li><li>查看日志：<code>nginx access.log</code>（日志未滚动，代表本机访问不到公网ip）</li><li>网络检测：1)ping主机可以；2)telnet 主机3306端口不可以；telnet 主机22端口可以。则说明与本机网络没有关系；</li></ul><blockquote><p>学习资料：<a href="https://www.cnblogs.com/laov/p/3541414.html"> Linux 服务器中常用操作命令</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux 服务器 </tag>
            
            <tag> 命令行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 之精度丢失</title>
      <link href="/2021/12/18/js-zhi-jing-du-diu-shi/"/>
      <url>/2021/12/18/js-zhi-jing-du-diu-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="浮点数的运算"><a href="#浮点数的运算" class="headerlink" title="浮点数的运算"></a>浮点数的运算</h2><p><strong>一般由以下五个步骤完成：对阶、尾数运算、规格化、舍入处理、溢出判断。</strong></p><ul><li><p>首先是对阶，所谓对阶，就是把阶码调整为相同。</p><ul><li>比如 0.1 是 1.1001100110011…… * 2^-4，阶码是 -4，</li><li>而 0.2 就是 1.10011001100110…* 2^-3，阶码是 -3；</li><li>两个阶码不同，所以先调整为相同的阶码再进行计算，调整原则是小阶对大阶，也就是 0.1 的 -4 调整为 -3，对应变成 0.11001100110011…… * 2^-3</li></ul></li><li><p>接下来是尾数计算：</p><ul><li>&nbsp;&nbsp;0.1100110011001100110011001100110011001100110011001101    +1.1001100110011001100110011001100110011001100110011010—————————————————————————————— 10.0110011001100110011001100110011001100110011001100111   </li><li>我们得到结果为：10.0110011001100110011001100110011001100110011001100111 * 2^-3</li></ul></li><li><p>将这个结果处理一下，即结果规格化：</p><ul><li>变成 1.0011001100110011001100110011001100110011001100110011(1) * 2^-2，括号里的 1 意思是说计算后这个 1 超出了范围，所以要被舍弃了。</li></ul></li><li><p>再然后是舍入，四舍五入对应到二进制中，就是 0 舍 1 入。</p><ul><li>因为我们要把括号里的 1 丢了，所以这里会进一，结果变成1.0011001100110011001100110011001100110011001100110100 * 2^-2</li></ul></li><li><p>本来还有一个溢出判断，因为这里不涉及，就不讲了。</p></li></ul><p>所以最终的结果存成 64 位就是0 01111111101 0011001100110011001100110011001100110011001100110100，<br>将它转换为10进制数就得到 0.30000000000000004440892098500626。<br>因为两次存储时的精度丢失加上一次运算时的精度丢失，最终导致了 0.1 + 0.2 !== 0.3</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 十进制转二进制 </span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">=></span> <span class="token string">"0.0001100110011001100110011001100110011001100110011001101"</span> <span class="token comment">// 二进制转十进制 </span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token parameter"><span class="token number">1100100</span><span class="token punctuation">,</span><span class="token number">2</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">100</span> <span class="token comment">// 以指定的精度返回该数值对象的字符串表示 </span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token parameter"><span class="token number">21</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">"0.300000000000000044409"</span> <span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token parameter"><span class="token number">21</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">"0.299999999999999988898"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 之数据类型转换</title>
      <link href="/2021/12/14/js-zhi-shu-ju-lei-xing-zhuan-huan/"/>
      <url>/2021/12/14/js-zhi-shu-ju-lei-xing-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<h2 id="显式数据类型转化"><a href="#显式数据类型转化" class="headerlink" title="显式数据类型转化"></a>显式数据类型转化</h2><p>ES6 前，JavaScript 共有六种数据类型：<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code>、<code>Object</code>。</p><h3 id="原始值转布尔"><a href="#原始值转布尔" class="headerlink" title="原始值转布尔"></a>原始值转布尔</h3><p>我们使用 <code>Boolean函数</code> 将类型转换成布尔类型，在 JavaScript 中，只有 6 种值可以被转换成 false，其他都会被转换成 true。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 当 Boolean 函数不传任何参数时，会返回 false。 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="原始值转数字"><a href="#原始值转数字" class="headerlink" title="原始值转数字"></a>原始值转数字</h3><p>我们可以使用 <code>Number函数</code> 将类型转换成数字类型。如果 Number 函数<strong>不传参数，返回 +0</strong>；如果<strong>有参数，隐式调用 ToNumber(value)<strong>，ToNumber 则直接给了一个对应的结果表，表如下。但如果</strong>参数无法被转换为数字，则返回 NaN</strong>。</p><table><thead><tr><th align="center">参数类型</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">Undefined</td><td align="center">NaN</td></tr><tr><td align="center">Null</td><td align="center">+0</td></tr><tr><td align="center">Boolean</td><td align="center">如果参数是true，返回1；参数为false，返回+0</td></tr><tr><td align="center">Number</td><td align="center">返回与之相等的值</td></tr><tr><td align="center">String</td><td align="center">这段比较复杂，看例子</td></tr></tbody></table><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 不传参</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// +0 </span><span class="token comment">// 传参</span><span class="token operator">-</span> Undefinedconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// NaN </span><span class="token operator">-</span> Nullconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// +0 </span><span class="token operator">-</span> Booleanconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// +0 </span><span class="token operator">-</span> Stringconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 123 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"-123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// -123 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"1.2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1.2 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"000123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 123 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"-000123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// -123 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"0x11"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 17 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"123 123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// NaN </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// NaN </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"100a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果通过 Number 转换函数<strong>传入一个字符串，它会试图将其转换成一个整数或浮点数，而且会忽略所有前导的 0</strong>；如果<strong>有一个字符不是数字，结果都会返回 NaN</strong>。鉴于这种严格的判断，我们一般还会使用更加灵活的 <code>parseInt</code> 和 <code>parseFloat</code> 进行转换。</p><ul><li>parseInt 只解析整数。如果字符串前缀是 “0x” 或者”0X”，会将其解释为十六进制数。  <pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"0xFF"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 255 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"0.1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>parseFloat 则可以解析整数和浮点数。  <pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"3.14 abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3.14 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">".1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0.1 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>parseInt 和 parseFloat 都会<strong>跳过任意数量的前导空格</strong>，尽可能解析更多数值字符，并忽略后面的内容。如果<strong>第一个非空格字符是非法的数字直接量，将最终返回 NaN</strong>：  <pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"3 abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"-12.34"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// -12 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="原始值转字符串"><a href="#原始值转字符串" class="headerlink" title="原始值转字符串"></a>原始值转字符串</h3>我们使用 <code>String函数</code> 将类型转换成字符串类型。如果 String 函数<strong>不传参数，返回空字符串</strong>，如果**有参数，隐式调用 ToString(value)**。而 ToString 也给了一个对应的结果表，表如图：<table><thead><tr><th align="center">参数类型</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">Undefined</td><td align="center">“undefined”</td></tr><tr><td align="center">Null</td><td align="center">“null”</td></tr><tr><td align="center">Bolean</td><td align="center">如果参数是true，返回true。参数为false，返回false</td></tr><tr><td align="center">Number</td><td align="center">又是比较复杂，可以看例子</td></tr><tr><td align="center">String</td><td align="center">返回与之相等的值</td></tr></tbody></table><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 不传参</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 空字符串 </span><span class="token comment">// 传参</span><span class="token operator">-</span> Undefinedconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// undefined </span><span class="token operator">-</span> Nullconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// null </span><span class="token operator">-</span> Booleanconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false </span><span class="token operator">-</span> Numberconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// NaN </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Infinity </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// -Infinity </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="原始值转对象"><a href="#原始值转对象" class="headerlink" title="原始值转对象"></a>原始值转对象</h3>原始值通过调用 <code>String()</code>、<code>Number()</code> 或者 <code>Boolean()</code> 构造函数，转换为它们各自的包装对象，（<code>null</code> 和 <code>undefined</code> 属于例外，当将它们用在期望是一个对象的地方都会造成一个类型错误 (TypeError) 异常，而不会执行正常的转换）。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="对象转布尔值"><a href="#对象转布尔值" class="headerlink" title="对象转布尔值"></a>对象转布尔值</h3>所有对象(包括数组和函数)都转换为 true，对于包装对象也是这样。<pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="对象转字符串和数字"><a href="#对象转字符串和数字" class="headerlink" title="对象转字符串和数字"></a>对象转字符串和数字</h3>对象到字符串 和 对象到数字 的转换都是通过调用待转换对象的一个方法来完成的。而 JavaScript 对象有两个不同的方法来执行转换，一个是 <code>toString</code>，一个是 <code>valueOf</code>。注意这个跟上面所说的 ToString 和 ToNumber 是不同的，这两个方法是真实暴露出来的方法。</li><li>当调用对象的 toString 方法时，其实调用的是 Object.prototype 上的 toString 方法。<ul><li>然而 JavaScript 下的很多类根据各自的特点，定义了更多版本的 toString 方法。例如：</li><li>数组的 toString 方法将每个数组元素转换成一个字符串，并在元素之间添加逗号后合并成结果字符串。  <pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1,2,3 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>函数的 toString 方法返回函数本身  <pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Object]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// function ()&#123;var a = 1;&#125; </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>日期的 toString 方法返回一个可读的日期和时间字符串。  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2010</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Fri Jan 01 2010 00:00:00 GMT+0800 (CST)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>RegExp 的 toString 方法返回一个表示正则表达式直接量的字符串。  <pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// /\d+/g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li>而另一个转换对象的函数是 valueOf，表示对象的原始值。默认的 valueOf 方法返回这个对象本身，数组、函数、正则简单的继承了这个默认方法，也会返回对象本身。日期是一个例外，它会返回它的一个内容表示: 1970 年 1 月 1 日以来的毫秒数。  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1495296000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><ol><li>对象转字符串   </li></ol><p>对象到字符串是如何转换的，其实就是 ToString 方法的对应表，只是这次我们加上 Object 的转换规则：   </p><table><thead><tr><th align="center">参数类型</th><th align="left">结果</th></tr></thead><tbody><tr><td align="center">Object</td><td align="left">1.primValue = ToPrimitive(input, String)<br>2.返回ToString(primValue)</td></tr></tbody></table><p>所谓的 ToPrimitive 方法，其实就是输入一个值，然后返回一个一定是基本类型的值。   </p><ul><li>语法：ToPrimitive(input[, PreferredType])<ul><li>第一个参数是 input，表示要处理的输入值。<strong>如果传入的 input 是 Undefined、Null、Boolean、Number、String 类型，直接返回该值。</strong></li><li>第二个参数是 PreferredType，非必填，表示希望转换成的类型，有两个值可以选，Number 或者 String。<strong>当不传入 PreferredType 时，如果 input 是日期类型，相当于传入 String，否则，都相当于传入 Number。</strong></li></ul></li></ul><ul><li><p>如果是 ToPrimitive(obj, Number)，处理步骤如下：   </p><ul><li>如果 obj 为 基本类型，直接返回</li><li>否则，调用 valueOf 方法，如果返回一个原始值，则 JavaScript 将其返回。</li><li>否则，调用 toString 方法，如果返回一个原始值，则 JavaScript 将其返回。</li><li>否则，JavaScript 抛出一个类型错误异常。</li></ul></li><li><p>如果是 ToPrimitive(obj, String)，处理步骤如下：   </p><ul><li>如果 obj为 基本类型，直接返回</li><li>否则，调用 toString 方法，如果返回一个原始值，则 JavaScript 将其返回。</li><li>否则，调用 valueOf 方法，如果返回一个原始值，则 JavaScript 将其返回。</li><li>否则，JavaScript 抛出一个类型错误异常。</li></ul></li></ul><p>初次总结：当我们用 String 方法转化一个值的时候，如果是基本类型，就参照 “原始值转字符” 这一节的对应表，如果不是基本类型，我们会将调用一个 ToPrimitive 方法，将其转为基本类型，然后再参照“原始值转字符” 这一节的对应表进行转换。</p><p>最终总结：对象转字符串(就是 Number() 函数)可以概括为：</p><ul><li>如果对象具有 toString 方法，则调用这个方法。如果他返回一个原始值，JavaScript 将这个值转换为字符串，并返回这个字符串结果。</li><li>如果对象没有 toString 方法，或者这个方法并不返回一个原始值，那么 JavaScript 会调用 valueOf 方法。如果存在这个方法，则 JavaScript 调用它。如果返回值是原始值，JavaScript 将这个值转换为字符串，并返回这个字符串的结果。</li><li>否则，JavaScript 无法从 toString 或者 valueOf 获得一个原始值，这时它将抛出一个类型错误异常。</li></ul><ol start="2"><li>对象转数字   </li></ol><p>其实，从对象到数字的转换也是一样：<br>|参数类型|结果|<br>|:–:|:–|<br>|Object|1.primValue = ToPrimitive(input, Number)<br>2.返回ToNumber(primValue)| </p><p><strong>虽然转换成基本值都会使用 ToPrimitive 方法，但传参有不同，最后的处理也有不同 -&gt; 转字符串调用的是 ToString，转数字调用 ToNumber。</strong></p><p>对象转数字的过程中，JavaScript 做了同样的事情，只是它会首先尝试 valueOf 方法。   </p><ul><li>如果对象具有 valueOf 方法，且返回一个原始值，则 JavaScript 将这个原始值转换为数字并返回这个数字。</li><li>否则，如果对象具有 toString 方法，且返回一个原始值，则 JavaScript 将其转换并返回。</li><li>否则，JavaScript 抛出一个类型错误异常。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 例子</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>a <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2010</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1262275200000</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>注意，在以上代码块中，[] 和 [0] 都返回了 0，而 [1, 2, 3] 却返回了一个 NaN。我们分析一下原因：</li><li>当我们 Number([]) 的时候，先调用 [] 的 valueOf 方法，此时返回 []，因为返回了一个对象而不是原始值，所以又调用了 toString 方法，此时返回一个空字符串，接下来调用 ToNumber 这个规范上的方法，参照对应表，转换为 0, 所以最后的结果为 0。</li><li>而当我们 Number([1, 2, 3]) 的时候，先调用 [1, 2, 3] 的 valueOf 方法，此时返回 [1, 2, 3]，再调用 toString 方法，此时返回 1,2,3，接下来调用 ToNumber，参照对应表，因为无法转换为数字，所以最后的结果为 NaN。</li></ul><h2 id="隐式数据类型转化"><a href="#隐式数据类型转化" class="headerlink" title="隐式数据类型转化"></a>隐式数据类型转化</h2><h3 id="一元操作符"><a href="#一元操作符" class="headerlink" title="一元操作符 +"></a>一元操作符 +</h3><p>当 + 运算符作为一元操作符的时候，会调用 ToNumber 处理该值，既然是调用 ToNumber 方法，当输入的值是对象的时候，先调用 ToPrimitive(input, Number) 方法，例子：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [] 调用 valueOf 方法，返回一个空数组；</span>    <span class="token comment">// 因为不是原始值，继续调用 toString 方法，返回 ""；</span>    <span class="token comment">// 得到返回值后，然后再调用 ToNumber 方法，"" 对应的返回值是 0，所以最终返回 0。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二元操作符"><a href="#二元操作符" class="headerlink" title="二元操作符 +"></a>二元操作符 +</h3><p>当计算 value1 + value2时：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">lprim <span class="token operator">=</span> <span class="token function">ToPrimitive</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span>rprim <span class="token operator">=</span> <span class="token function">ToPrimitive</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>如果 lprim 是字符串或者 rprim 是字符串，那么返回 ToString(lprim) 和 ToString(rprim)的拼接结果   </li><li>返回 ToNumber(lprim) 和 ToNumber(rprim)的运算结果</li></ul><p>1.Null 与数字</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>lprim = ToPrimitive(null) 因为null是基本类型，直接返回，所以 lprim = null</li><li>rprim = ToPrimitive(1) 因为 1 是基本类型，直接返回，所以 rprim = 1</li><li>lprim 和 rprim 都不是字符串</li><li>返回 ToNumber(null) 和 ToNumber(1) 的运算结果：ToNumber(null) 的结果为0，ToNumber(1) 的结果为 1。所以，null + 1 相当于 0 + 1，最终的结果为数字 1。</li></ul><p>2.数组与数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>lprim = ToPrimitive([])，[]是数组，相当于ToPrimitive([], Number)，先调用valueOf方法，返回对象本身，因为不是原始值，调用toString方法，返回空字符串””</li><li>rprim类似。</li><li>lprim和rprim都是字符串，执行拼接操作：[] + []相当于 “” + “”，最终的结果是空字符串””。</li></ul><p>3.数组与对象</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 两者结果一致 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>lprim = ToPrimitive([])，lprim = “”</li><li>rprim = ToPrimitive({})，相当于调用 ToPrimitive({}, Number)，先调用 valueOf 方法，返回对象本身，因为不是原始值，调用 toString 方法，返回 “[object Object]”</li><li>lprim 和 rprim 都是字符串，执行拼接操作：[] + {} 相当于 “” + “[object Object]”，最终的结果是 “[object Object]”。<pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">+</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "[object Object][object Object]" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">04</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// "Sun May 21 2017 00:00:00 GMT+0800 (CST)1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="相等"><a href="#相等" class="headerlink" title="== 相等"></a>== 相等</h3><ol><li><p>null和undefined</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    规则<span class="token number">2</span>）x是<span class="token keyword">null</span>并且y是<span class="token keyword">undefined</span>，返回<span class="token boolean">true</span>    规则<span class="token number">3</span>）x是<span class="token keyword">undefined</span>并且y是<span class="token keyword">null</span>，返回<span class="token boolean">true</span>    <span class="token comment">// 所以例子的结果自然为 true。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>字符串与数字</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    规则<span class="token number">4</span>）x是数字，y是字符串，判断x <span class="token operator">==</span> <span class="token function">ToNumber</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>    <span class="token function">规则5）x是字符串，y是数字，判断ToNumber</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> y    <span class="token comment">// 都先转换成数字后再进行比较，所以例子的结果为true。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>布尔值和其他类型</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">)</span>    <span class="token function">规则6）x是布尔值，判断ToNumber</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> y    规则<span class="token number">7</span>）y是布尔值，判断x <span class="token operator">==</span><span class="token function">ToNumber</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>    <span class="token comment">// 当一方出现布尔值的时候，就会对这一方的值进行ToNumber处理，也就是说true会被转化成1，true == '2' 就相当于 1 == '2' 就相当于 1 == 2，结果自然是 false。</span>        <span class="token comment">// 所以当一方是布尔值的时候，会对布尔值进行转换，因为这种特性，所以尽量少使用 xx == true 和 xx == false 的写法。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>对象与非对象</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">42</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token string">'42'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    规则<span class="token number">8</span>）x是字符串或者数字，y是对象，判断x <span class="token operator">==</span> <span class="token function">ToPrimitive</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>    <span class="token function">规则9）x是对象，y不是字符串或者数字，判断ToPrimitive</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> y    <span class="token comment">// 以这个例子为例，会使用 ToPrimitive 处理 ['42']，调用valueOf，返回对象本身，再调用 toString，返回 '42'，所以42 == ['42'] 相当于 42 == '42' 相当于42 == 42，结果为 true。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>其他：一概返回 false<br>再多举几个例子进行分析：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>    <span class="token comment">// false == undefined 相当于 0 == undefined 不符合上面的情形，执行最后一步 返回 false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// false == [] 相当于 0 == [] 相当于 0 == '' 相当于 0 == 0，结果返回 true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// 首先会执行 ![] 操作，转换成 false，相当于 [] == false 相当于 [] == 0 相当于 '' == 0 相当于 0 == 0，结果返回 true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>最后再举一些会让人踩坑的例子：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">// 以上均返回 true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见的类型转换"><a href="#常见的类型转换" class="headerlink" title="常见的类型转换"></a>常见的类型转换</h2><table><thead><tr><th align="center">类型</th><th align="center">值</th><th align="center">to Boolean</th><th align="center">to Number</th><th align="center">to String</th></tr></thead><tbody><tr><td align="center">Boolean</td><td align="center">true</td><td align="center">true</td><td align="center">1</td><td align="center">“true”</td></tr><tr><td align="center">Boolean</td><td align="center">false</td><td align="center">false</td><td align="center">0</td><td align="center">“false”</td></tr><tr><td align="center">Number</td><td align="center">123</td><td align="center">true</td><td align="center">123</td><td align="center">“123”</td></tr><tr><td align="center">Number</td><td align="center">Infinity</td><td align="center">true</td><td align="center">Infinity</td><td align="center">“Infinity”</td></tr><tr><td align="center">Number</td><td align="center">0</td><td align="center">false</td><td align="center">0</td><td align="center">“0”</td></tr><tr><td align="center">Number</td><td align="center">NaN</td><td align="center">false</td><td align="center">NaN</td><td align="center">“NaN”</td></tr><tr><td align="center">String</td><td align="center">“”</td><td align="center">false</td><td align="center">0</td><td align="center">“”</td></tr><tr><td align="center">String</td><td align="center">“123”</td><td align="center">true</td><td align="center">123</td><td align="center">“123”</td></tr><tr><td align="center">String</td><td align="center">“123abc”</td><td align="center">true</td><td align="center">NaN</td><td align="center">“123abc”</td></tr><tr><td align="center">String</td><td align="center">“abc”</td><td align="center">true</td><td align="center">NaN</td><td align="center">“abc”</td></tr><tr><td align="center">Null</td><td align="center">null</td><td align="center">false</td><td align="center">0</td><td align="center">“null”</td></tr><tr><td align="center">Undefined</td><td align="center">undefined</td><td align="center">false</td><td align="center">NaN</td><td align="center">“undefined”</td></tr><tr><td align="center">Function</td><td align="center">function()</td><td align="center">{}</td><td align="center">true</td><td align="center">NaN</td></tr><tr><td align="center">Object</td><td align="center">{}</td><td align="center">true</td><td align="center">NaN</td><td align="center">“[object Object]”</td></tr><tr><td align="center">Array</td><td align="center">[]</td><td align="center">true</td><td align="center">0</td><td align="center">“”</td></tr><tr><td align="center">Array</td><td align="center">[“abc”]</td><td align="center">true</td><td align="center">NaN</td><td align="center">“abc”</td></tr><tr><td align="center">Array</td><td align="center">[“123”]</td><td align="center">true</td><td align="center">123</td><td align="center">“123”</td></tr><tr><td align="center">Array</td><td align="center">[“123”, “abc”]</td><td align="center">true</td><td align="center">NaN</td><td align="center">“123, abc”</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 之数据类型</title>
      <link href="/2021/12/06/js-zhi-shu-ju-lei-xing/"/>
      <url>/2021/12/06/js-zhi-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="总共-7-种"><a href="#总共-7-种" class="headerlink" title="总共 7 种"></a>总共 7 种</h3><p>ECMAScript 有 <code>6</code> 种<strong>简单数据类型</strong>（也称为<strong>原始类型</strong>）：<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code>和<code>Symbol</code>；还有一种复杂数据类型：<code>Object</code>。</p><p>除过上面的 6 种基本数据类型外，剩下的就是引用数据类型了，统称为 <code>Object</code> 类型。细分的话，有：<code>Object</code>类型、<code>Array</code> 类型、<code>Date</code> 类型、<code>RegExp</code>类型、<code>Function</code> 类型 等。</p><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>下面记录三个需要注意的数据类型：<br>一、Undefined 类型<br><code>Undefined</code> 类型只有一个值，就是 <code>undefined</code>。当使用 <code>var</code> 或 <code>let</code> 声明了变量但没有初始化时，就相当于给变量赋予了 <code>undefined</code> 值，因此：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> message<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ECMA-262 第3版之前，字面量 <code>undefined</code> 是不存在的，增加这个值是为了正式明确空对象指针（null）和未初始化变量的区别。</p><p>需要注意的是，未声明的变量和声明了但未赋值的变量是不同的，请看下面例子：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> message<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "undefined"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>前面说过，声明变量时没有进行初始化就相当于给变量赋予 <code>undefined</code> 值，于是可以打印出 <code>&quot;undefined&quot;</code> ；但未声明的变量进行打印等操作就会报错，这点不难理解。难以理解的是下面这一点，对于未声明的变量，只能执行一个有效的操作，那就是对它调用 <code>typeof</code> （对未声明的变量调用 <code>delete</code> 也不会报错，只是没什么用，实际上在严格模式下会抛出错误），问题来了：在对未初始化的变量调用 <code>typeof</code> 时，返回的结果是 <code>&quot;undefined&quot;</code> ，但对为声明的变量调用它时，也返回了 <code>&quot;undefined&quot;</code> ，这就有点不是很好。比如：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> message<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "undefined"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// "undefined"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>无论变量是否声明，<code>typeof</code> 返回的都是 <code>&quot;undefined&quot;</code> 。逻辑上讲这是对的，因为虽然严格来讲这两个变量存在根本性差异，但它们都无法执行实际操作。</p><blockquote><p>！注意：建议声明变量的同时进行初始化。这样，当 <code>typeof</code> 返回 <code>&quot;undefined&quot;</code> 时，开发者就能知道那是因为给定的变量尚未声明，而不是声明了但未初始化。</p></blockquote><p>二、Null<br><code>Null</code> 类型只有一个值，即特殊值 <code>null</code> 。**<code>null</code> 值表示一个空对象指针**，这就是 <code>typeof null</code> 会返回 <code>&quot;object&quot;</code> 的原因：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "object"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>！建议：在定义将来要保存对象值的变量时，建议使用 null 来初始化，而不是使用其他值。这样，只要检查整改变量的值是不是 null 就可以知道这个变量是否在后来被重新赋予了一个对象的引用，比如：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>message <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// message 是一个对象的引用</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>这里还有一个小点： <code>undefined</code> 值是由 <code>null</code> 值派生来的，因此 ECMA-262 将它们定义为表面上相等，如 <code>console.log(null == undefined); // true</code> </p><p>三、Symbol<br>具体的参考阮一峰老师的 <a href="https://es6.ruanyifeng.com/#docs/symbol">ECMAScript 6 入门之 Symbol</a>，这里就不班门弄斧了。</p><h4 id="基本数据类型的特性"><a href="#基本数据类型的特性" class="headerlink" title="基本数据类型的特性"></a>基本数据类型的特性</h4><ol><li>基本数据类型的值是不可变的，任何方法都无法改变一个基本类型的值，比如一个字符串：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"change"</span><span class="token punctuation">;</span>name<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hang</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// change</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// HELLO</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>通过这两个例子，我们会发现原先定义的变量name的值始终没有发生改变。</li><li>而调用 <code>substr()</code> 和 <code>toUpperCase()</code> 方法后返回的是一个新的字符串，跟原先定义的变量 name 并没有关系。</li></ul><p>或许有人会有以下的疑问：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"change"</span><span class="token punctuation">;</span>name <span class="token operator">=</span> <span class="token string">"change1"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// change1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>这样看起来 name 的值“改变了”，其实 var name = “change”，这里的基础类型是 string ，也就是“change”,这里的“change”是不可以改变的，name只是指向“change”的一个指针，指针的指向可以改变，所以你可以name = “change1”，代表此时name指向了“change1”。同理，这里的“change1”同样不可以改变。</li><li>也就是说这里你认为的改变只是“指针的指向改变”，这里的基础类型指的是“change”，而不是name，需区分清楚。</li></ul><ol start="2"><li>基本数据类型不可以添加属性和方法<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token string">"change"</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function-variable function">method</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>通过上面的代码，我们知道不能给基本类型添加属性和方法，也再次说明基本类型是不可变的。</li><li>基本数据类型的赋值是简单赋值</li></ol><p>如果从一个变量向另一个变量赋值基本类型的值，会在变量对象上创建一个新值，然后把该值复制到为新变量分配的位置上</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码中， a 中保存的值是10。当使用 a 的值来初始化 b 时， b 中也保存了值 10 。但 b 中的 10 和 a 中的 10 是完全独立的。 b 中的值只是 a 中值的一个副本。所以这两个变量可以参与任何操作而不会相互影响。<br>4. 基本数据类型的比较是值的比较</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面 a 和 b 的数据类型不同，但是也可以进行值的比较，这是因为在比较之前，自动进行了数据类型的 隐式转换。<br>5. 基本数据类型是存放在栈区的</p><p>假如有以下几个基本类型的变量：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"jozo"</span><span class="token punctuation">;</span><span class="token keyword">var</span> city <span class="token operator">=</span> <span class="token string">"guangzhou"</span><span class="token punctuation">;</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>那么它的存储结构如下所示：<br>|栈区A|栈区A|<br>|:–:|:–:|<br>|name|jozo|<br>|city|guangzhou|<br>|age|22|</p><p>同一个栈区里包括了变量的标识符和变量的值</p><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><h4 id="引用数据类型的特性"><a href="#引用数据类型的特性" class="headerlink" title="引用数据类型的特性"></a>引用数据类型的特性</h4><ol><li>引用类型的值是可以改变的</li><li>引用类型可以添加属性和方法</li><li>引用类型是同时保存在栈区和堆区中的</li></ol><p>引用类型的存储需要在内存的栈区和堆区共同完成，栈区保存变量标识符和指向堆内存的地址</p><p>假如有以下两个对象：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> man <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> woman <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>man <span class="token operator">===</span> woman<span class="token punctuation">)</span> <span class="token comment">// 输出：false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>则这两个对象在内存中保存的情况如下图：<br><img src="https://s4.ax1x.com/2021/12/06/osS36O.png" alt="变量在内存中的保存情况"><br>4. 引用类型的赋值是对象引用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"change"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// change</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// change</span>b<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 29</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 29</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当 a 向 b 赋值引用类型的值时，同样也会将储存在 a 中的对象的值复制一份，并放到为 b 分配的空间中。此时引用类型保存在 b 中的是对象在堆内存中的地址。所以，与基本数据类型的简单赋值不同，这个值的副本实际上是一个指针，而这个指针指向存储在堆内存的一个对象。那么赋值操作后，两个变量都保存了同一个对象地址，而这两个地址指向了同一个对象。因此，改变其中任何一个变量，都会互相影响。 他们的关系如下图：<br><img src="https://s4.ax1x.com/2021/12/06/osSDc8.png" alt="变量赋值后在内存中的保存情况"><br>5. 引用类型的比较是引用的比较</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1 <span class="token operator">==</span> person2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>Q：为什么两个对象看起来一摸一样，但是却不相等呢？</li><li>A：因为引用类型的比较是引用的比较，换句话说，就是比较两个对象保存在栈区的指向堆内存的地址是否相同，此时，虽然 p1 和 p2 看起来都是一个”{}”，但是他们保存在栈区中的指向堆内存的地址却是不同的，所以两个对象不相等<h2 id="判断数据类型的方法"><a href="#判断数据类型的方法" class="headerlink" title="判断数据类型的方法"></a>判断数据类型的方法</h2><h3 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h3>用于确定任意变量的数据类型，对一个值使用 <code>typeof</code> 操作符会返回下列字符串之一：</li><li>“undefined” 表示值未定义；</li><li>“boolean” 表示值为布尔值；</li><li>“string” 表示值为字符串；</li><li>“number” 表示值为数值；</li><li>“object” 表示值为对象（而不是函数）或 null；</li><li>“function” 表示值为函数；</li><li>“symbol” 表示值为符号；</li></ul><p>使用 typeof 操作符的示例：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// es5</span><span class="token keyword">typeof</span> <span class="token string">''</span>           <span class="token comment">// string</span><span class="token keyword">typeof</span> <span class="token number">1</span>            <span class="token comment">// number</span><span class="token keyword">typeof</span> <span class="token boolean">true</span>         <span class="token comment">// boolean</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span>    <span class="token comment">// undefined</span><span class="token keyword">typeof</span> Array        <span class="token comment">// function</span><span class="token keyword">typeof</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>           <span class="token comment">// object</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>           <span class="token comment">// object</span><span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">// symbol</span><span class="token keyword">typeof</span> console      <span class="token comment">// object</span><span class="token keyword">typeof</span> console<span class="token punctuation">.</span>log  <span class="token comment">// function</span><span class="token keyword">typeof</span> <span class="token keyword">null</span>         <span class="token comment">// object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>需要注意的是：<code>null</code> 会返回  <code>&quot;object&quot;</code> 是因为特殊值 <code>null</code> 被认为是一个对空对象的引用（这只是 <code>JavaScript</code> 存在的一个悠久 Bug，不代表 <code>null</code> 就是引用数据类型，并且 <code>null</code> 本身也不是对象）。那为什么会被这么认为呢？这就需要了解变量是如何被存储的。在 <code>Javascript</code> 底层存储变量的时候，会在变量的机器码低位 1-3 位表示类型信息：</p><ul><li>000：对象</li><li>010：浮点数</li><li>100：字符串</li><li>110：布尔</li><li>1：整数</li><li>null：所有码都是0</li><li>undefined：用 -2^30 表示</li></ul><p>而 <code>null</code> 的低位 1-3 解析到的为 000，刚好与 <code>object</code> 一样，因此就被当做了对象来看待。</p></blockquote><p><code>typeof</code> 的实现大致如下，在 JS 诞生之初就只有六种类型判断：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">JSVAL_IS_VOID</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 判断是否为 undefined</span>  type <span class="token operator">=</span> <span class="token constant">JSTYPE_VOID</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">JSVAL_IS_OBJECT</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 判断是否为 object</span>  obj <span class="token operator">=</span> <span class="token constant">JSVAL_TO_OBJECT</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ops <span class="token operator">=</span> obj<span class="token operator">-</span><span class="token operator">></span>map<span class="token operator">-</span><span class="token operator">></span>ops<span class="token punctuation">,</span> ops <span class="token operator">==</span> <span class="token operator">&amp;</span>js_ObjectOps<span class="token punctuation">)</span>     <span class="token operator">?</span> <span class="token punctuation">(</span>clasp <span class="token operator">=</span> <span class="token constant">OBJ_GET_CLASS</span><span class="token punctuation">(</span>cx<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">,</span> clasp<span class="token operator">-</span><span class="token operator">></span>call <span class="token operator">||</span> clasp <span class="token operator">==</span> <span class="token operator">&amp;</span>js_FunctionClass<span class="token punctuation">)</span>    <span class="token operator">:</span> ops<span class="token operator">-</span><span class="token operator">></span>call <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    type <span class="token operator">=</span> <span class="token constant">JSTYPE_FUNCTION</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    type <span class="token operator">=</span> <span class="token constant">JSTYPE_OBJECT</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">JSVAL_IS_NUMBER</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 判断是否为 number</span>  type <span class="token operator">=</span> <span class="token constant">JSTYPE_NUMBER</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">JSVAL_IS_STRING</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 判断是否为 string</span>  type <span class="token operator">=</span> <span class="token constant">JSTYPE_STRING</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">JSVAL_IS_BOOLEAN</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 判断是否为 boolean</span>  type <span class="token operator">=</span> <span class="token constant">JSTYPE_BOOLEAN</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="instanceof-操作符"><a href="#instanceof-操作符" class="headerlink" title="instanceof 操作符"></a>instanceof 操作符</h3><p>使用方法：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 判断一个实例是否属于某种类型：</span><span class="token keyword">let</span> <span class="token function-variable function">person</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> nicole <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nicole <span class="token keyword">instanceof</span> <span class="token class-name">person</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token comment">// 判断一个实例是否是其父类型或者祖先类型的实例</span><span class="token keyword">let</span> <span class="token function-variable function">person</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token function-variable function">programmer</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>programmer<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> nicole <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">programmer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nicole <span class="token keyword">instanceof</span> <span class="token class-name">person</span> <span class="token comment">// true</span>nicole <span class="token keyword">instanceof</span> <span class="token class-name">programmer</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用法挺简单的，那么其底层实现原理是什么呢？根据 ECMAScript 语言规范，大概的思路如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">new_instance_of</span><span class="token punctuation">(</span><span class="token parameter">leftVaule<span class="token punctuation">,</span> rightVaule</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">let</span> rightProto <span class="token operator">=</span> rightVaule<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// 取右表达式的 prototype 值</span>  leftVaule <span class="token operator">=</span> leftVaule<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span> <span class="token comment">// 取左表达式的__proto__值</span>  <span class="token comment">// 循环体一直循环，直到在 leftVaule 的原型链上找到 rightVaule；或者走到 leftVaule 原型链的尽头也还是找不到 rightVaule ，则退出循环</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftVaule <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftVaule <span class="token operator">===</span> rightProto<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token comment">// 不用执行 rightVaule = rightVaule.__proto__ ，因为 rightVaule 就是要查找的对象</span>    leftVaule <span class="token operator">=</span> leftVaule<span class="token punctuation">.</span>__proto__ <span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总而言之，<code>instanceof</code> 主要的实现原理就是只要右边变量的 <code>prototype</code> 在左边变量的原型链上即可。因此，要想理解 <code>instanceof</code> 的原理，就还必须熟悉 JavaScript 的原型继承原理，不太清楚的小伙伴可以浏览我的 <a href="https://hcyety.github.io/2022/01/03/yuan-xing-lian/">另一篇文章</a>。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组的各种增删查改</title>
      <link href="/2021/11/22/shu-zu-de-ge-chong-zeng-shan-cha-gai/"/>
      <url>/2021/11/22/shu-zu-de-ge-chong-zeng-shan-cha-gai/</url>
      
        <content type="html"><![CDATA[<h2 id="一、增"><a href="#一、增" class="headerlink" title="一、增"></a>一、增</h2><h3 id="1-push-【改变原数组】"><a href="#1-push-【改变原数组】" class="headerlink" title="1. push 【改变原数组】"></a>1. push 【改变原数组】</h3><p><strong>定义：</strong><code>push()</code> 方法（在数组结尾处）向数组添加一个或多个新元素，返回值为新数组的长度</p><p><strong>语法：</strong><code>arr.push(ele,ele2,ele3…);</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> m <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr:'</span> <span class="token operator">+</span> arr<span class="token punctuation">,</span> <span class="token string">'m'</span> <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arr:[1, 2, 3, 4, 5] m:5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-unshift-【改变原数组】"><a href="#2-unshift-【改变原数组】" class="headerlink" title="2. unshift 【改变原数组】"></a>2. unshift 【改变原数组】</h3><p><strong>定义：</strong><code>unshift()</code>方法（在开头）向数组添加一个或多个新元素，并“反向位移”旧元素，返回值为新数组的长度</p><p><strong>语法：</strong><code>arr.unshift(ele,ele2,ele…);</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> m <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"原数组："</span> <span class="token operator">+</span> arr<span class="token punctuation">,</span> <span class="token string">"返回值:"</span> <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//原数组： ["a", "b", 1, 2] 返回值:4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-concat-【合成一个新数组，不改变原数组】"><a href="#3-concat-【合成一个新数组，不改变原数组】" class="headerlink" title="3. concat 【合成一个新数组，不改变原数组】"></a>3. concat 【合成一个新数组，不改变原数组】</h3><p><strong>定义：</strong><code>concat()</code> 方法通过合并（连接）一个或多个数组来创建一个新数组</p><p><strong>语法：</strong><code>arr.concat(arr1,arr2…);</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 合并两个数组</span><span class="token keyword">var</span> myGirls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Cecilie"</span><span class="token punctuation">,</span> <span class="token string">"Lone"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> myBoys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Emil"</span><span class="token punctuation">,</span> <span class="token string">"Tobias"</span><span class="token punctuation">,</span> <span class="token string">"Linus"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> myChildren <span class="token operator">=</span> myGirls<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>myBoys<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 连接 myGirls 和 myBoys</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myChildren<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["Emma","Isabella","Jacob","Michael","Ethan"]</span><span class="token comment">// 合并三个数组</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Cecilie"</span><span class="token punctuation">,</span> <span class="token string">"Lone"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Emil"</span><span class="token punctuation">,</span> <span class="token string">"Tobias"</span><span class="token punctuation">,</span> <span class="token string">"Linus"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Robin"</span><span class="token punctuation">,</span> <span class="token string">"Morgan"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> myChildren <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> arr3<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// ["Cecilie","Lone","Emil", "Tobias", "Linus","Robin", "Morgan"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-length-属性"><a href="#4-length-属性" class="headerlink" title="4. length 属性"></a>4. length 属性</h3><p>使用数组的 <code>length</code> 属性向数组添加新元素</p><p><strong>示例：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Mango"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>fruits<span class="token punctuation">[</span>fruits<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Lemon"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["Banana","Orange","Apple","Mango","Lemon"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong><br>添加最高索引的元素可在数组中创建未定义的“洞”：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Mango"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>fruits<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Lemon"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["Banana","Orange","Apple","Mango","undefined","undefined","Lemon"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="splice-【改变原数组】"><a href="#splice-【改变原数组】" class="headerlink" title="splice 【改变原数组】"></a>splice 【改变原数组】</h3><p><strong>定义：</strong><code>splice()</code> 方法在数组中添加/删除/查看/修改项目，并返回删除的项目。</p><p><strong>语法：</strong><code>array.splice(index, howmany, item1, ....., itemX)</code>  </p><p><strong>参数：</strong></p><ul><li>index：必需。整数，指定在什么位置添加/删除项目，使用负值指定从数组末尾开始的位置。</li><li>howmany：可选。要删除的项目数。如果设置为 0，则不会删除任何项目。</li><li>item1, …, itemX：可选。要添加到数组中的新项目。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 第二个参数为 0 且有第三个或三个以上的参数即说明是增加元素，增加的元素数量为第二个参数之后的参数数量</span><span class="token keyword">var</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Mango"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>fruits<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Lemon"</span><span class="token punctuation">,</span> <span class="token string">"Kiwi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["Banana","Orange","Lemon","Kiwi","Apple","Mango"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、删"><a href="#二、删" class="headerlink" title="二、删"></a>二、删</h2><h3 id="delete-【改变原数组】"><a href="#delete-【改变原数组】" class="headerlink" title="delete 【改变原数组】"></a>delete 【改变原数组】</h3><p><strong>示例：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Mango"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">delete</span> fruits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ["undefined", "Orange", "Apple", "Mango"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="shift-【改变原数组】"><a href="#shift-【改变原数组】" class="headerlink" title="shift 【改变原数组】"></a>shift 【改变原数组】</h3><p><strong>定义：</strong><code>shift()</code> 方法删除数组的第一个元素，并返回删除的这个元素</p><p><strong>语法：</strong><code>array.shift();</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"原数组："</span> <span class="token operator">+</span> arr<span class="token punctuation">,</span> <span class="token string">"返回值:"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//原数组： [2] 返回值:1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pop-【改变原数组】"><a href="#pop-【改变原数组】" class="headerlink" title="pop 【改变原数组】"></a>pop 【改变原数组】</h3><p><strong>定义：</strong><code>pop()</code> 方法删除数组的最后一个元素，并返回删除的这个元素</p><p><strong>语法：</strong><code>array.pop();</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"原数组："</span> <span class="token operator">+</span> arr<span class="token punctuation">,</span> <span class="token string">"返回值:"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//原数组： [1] 返回值:2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><p>第二个参数不为 0 且无第三个参数则说明是从 以第一个参数为下标值 开始删除数组元素，删除的数组元素个数为第二个参数的值</p><p><strong>示例：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 在位置 2，添加新项目，并删除 1 个项目：</span><span class="token keyword">var</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Mango"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>fruits<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["Banana", "Orange", "Lemon"]</span><span class="token comment">// 在位置 2，删除 2 个项目：</span><span class="token keyword">var</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Mango"</span><span class="token punctuation">,</span> <span class="token string">"Kiwi"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>fruits<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["Banana", "Orange", "Kiwi"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、查"><a href="#三、查" class="headerlink" title="三、查"></a>三、查</h2><h3 id="slice-【不改变原数组】"><a href="#slice-【不改变原数组】" class="headerlink" title="slice 【不改变原数组】"></a>slice 【不改变原数组】</h3><p><strong>定义：</strong><code>slice()</code> 方法将原来的数组的元素替换，返回新的数组。</p><p><strong>语法：</strong><code>array.slice(start, end);</code></p><p><strong>参数：</strong></p><ul><li>start：可选。整数，指定从哪里开始选择（第一个元素的索引为 0）；若使用负数则从数组的末尾进行选择；如果省略，则类似于 “0”。</li><li>end：可选。整数，指定结束选择的位置；如果省略，将选择从开始位置到数组末尾的所有元素；若使用负数则从数组末尾进行选择。</li></ul><p><strong>注意：选定参数后，区间范围为【左闭右开】。即操作数组时，只截取从 start 到 end - 1 位置的数组元素</strong></p><p><strong>示例：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 两个参数都不写，就是复制完整数组；否则就是复制指定元素的数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"aaaa"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> newArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [4, 5, 6, 3, 7, 8, 8]  ["aaaa", 5, 6, 3, 7, 8, 8]</span><span class="token comment">// 使用正值选择元素：</span><span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Lemon"</span><span class="token punctuation">,</span> <span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Mango"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> citrus <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>citrus<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["Orange","Lemon"]</span><span class="token comment">// 使用负值选择元素：</span><span class="token keyword">var</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Lemon"</span><span class="token punctuation">,</span> <span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Mango"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> myBest <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myBest<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["Lemon","Apple"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><p><strong>定义：</strong><code>includes()</code> 方法返回一个布尔值，表示某个数组是否包含给定的值</p><p><strong>语法：</strong><code>Array.includes(para, start);</code></p><p><strong>参数：</strong></p><ul><li>para：必需。表示要查找的值。</li><li>start：可选。表示搜索的起始位置，默认为0。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为-4，但数组长度为3），则会重置为从0开始。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>       <span class="token comment">// true</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>       <span class="token comment">// false</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span>   <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><p><strong>定义：</strong><code>indexOf</code> 法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1</p><p><strong>语法：</strong><code>Array.indexOf(para, index);</code></p><p><strong>参数：</strong></p><ul><li>para：必需。要查找的元素。</li><li>index：可选。开始查找的位置。如果该索引值大于或等于数组长度，意味着不会在数组里查找，返回-1；如果参数中提供的索引值是一个负值，则将其作为数组末尾的一个抵消，即-1表示从最后一个元素开始查找……。 注意：如果参数中提供的索引值是一个负值，并<strong>不改变其查找顺序</strong>，查找顺序仍然是从前向后查询数组。如果抵消后的索引值仍小于0，则整个数组都将会被查询。其默认值为0。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 0</span>array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// -1</span>array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2</span>array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="find-【不改变原数组】"><a href="#find-【不改变原数组】" class="headerlink" title="find 【不改变原数组】"></a>find 【不改变原数组】</h3><p><strong>定义：</strong><code>find()</code> 方法返回通过测试（函数内判断）的数组的第一个元素的值。</p><p><strong>语法：</strong><code>Array.find(function(currentValue, index, arr),thisValue)</code></p><p><strong>参数：</strong></p><ul><li>function：必需。数组每个元素需要执行的函数。<ul><li>currentValue：必需。当前元素。</li><li>index：可选。当前元素的索引值。</li><li>arr：可选。当前元素所属的数组对象。</li></ul></li><li>thisValue：可选。传递给函数的值一般用 “this” 值。如果这个参数为空， “undefined” 会传递给 “this” 值</li></ul><p><strong>说明：</strong><br>find() 方法为数组中的每个元素都调用一次函数执行：</p><ul><li>当数组中的元素在测试条件时返回 true 时, find() 返回符合条件的元素，之后的值不会再调用执行函数。</li><li>如果没有符合条件的元素返回 undefined</li></ul><p><strong>注意：</strong><br>find() 对于空数组，函数是不会执行的。</p><p><strong>示例：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> inventory <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'apples'</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'bananas'</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'cherries'</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">findCherries</span><span class="token punctuation">(</span><span class="token parameter">fruit</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> fruit<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'cherries'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inventory<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>findCherries<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; name: 'cherries', quantity: 5 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、改"><a href="#四、改" class="headerlink" title="四、改"></a>四、改</h2><h3 id="splice-1"><a href="#splice-1" class="headerlink" title="splice"></a>splice</h3><p>第二个参数不为 0 且有第三个或三个以上的参数则说明是从 以第一个参数为下标值 开始修改数组元素，修改的数组元素个数为第二个参数之后的参数数量</p><p><strong>示例：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> newArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [4, 5, "a", "b", 3, 7, 8, 8] [6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="reverse-【改变原数组】"><a href="#reverse-【改变原数组】" class="headerlink" title="reverse 【改变原数组】"></a>reverse 【改变原数组】</h3><p><strong>定义：</strong><code>reverse()</code> 方法可以反转数组中的所有元素</p><p><strong>示例：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr:'</span> <span class="token operator">+</span> arr<span class="token punctuation">,</span> <span class="token string">'newArr:'</span> <span class="token operator">+</span> newArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arr:[5,4,3,2,1] newArr:[5,4,3,2,1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p><strong>定义：</strong><code>reduce()</code> 方法对数组中的每个元素执行一个由您提供的函数(升序执行)，将其结果汇总为单个返回值。</p><p><strong>语法：</strong><code>array.reduce(function(total, currentValue, currentIndex, arr), initialValue)</code></p><p><strong>参数：</strong></p><ul><li>function(total,currentValue, index,arr)：必需。用于执行每个数组元素的函数。<ul><li>total：必需。初始值, 或者累计器累计回调的返回值。</li><li>currentValue：必需。当前元素。</li><li>currentIndex：可选。当前元素的索引。如果提供了<code>initialValue</code>，则起始索引号为0，否则从索引1起始。</li><li>arr：可选。调用reduce()的数组。</li></ul></li><li>initialValue：可选。传递给函数的初始值。如果没有提供初始值，则将使用数组中的第一个元素。</li></ul><p><strong>注意：</strong><br><code>reduce()</code> 对于空数组是不会执行回调函数的。</p><p><strong>示例：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> total <span class="token operator">+</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> ans <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>getSum<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 125</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>对数组的各种操作就整理到这，如果读者没有找到自己想要的内容，可以尝试找找阮一峰的 <a href="https://es6.ruanyifeng.com/#docs/array">ECMAScript 6 入门 之数组的扩展</a>，或许能有所收获！</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>setTimeout() 与 setInterval() 的区别</title>
      <link href="/2021/11/15/settimeout-yu-setinterval-de-qu-bie/"/>
      <url>/2021/11/15/settimeout-yu-setinterval-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先要对 setTimeout() 和 setInterval() 有一个概念，学习了 JavaScript 我们知道：<strong>setTimeout() 是延时器，setInterval() 是定时器</strong>。setTimeout() 在于载入后延迟指定的时间后才会执行<strong>一次</strong>表达式，执行过后便会停止；setInterval() 在载入后每隔指定时间就会执行一次表达式，直到定时器或者窗口关闭。</p><p>对这两者有了初步印象后，我们开始逐个分析</p><h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout()"></a>setTimeout()</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>setTimeout() 方法在指定的毫秒数后调用一次函数或计算表达式。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><code>var timeoutID = setTimeout(code/function, millisec)</code></p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li>code/funciton：必需。要调用的函数后要执行的 JavaScript 代码串或者函数。</li><li>millisec：必需。在执行代码前需等待的毫秒数。<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4>返回值 timeoutID 是一个正整数，表示定时器的编号。这个值可以传递给clearTimeout()来取消该定时器。<h3 id="提醒"><a href="#提醒" class="headerlink" title="提醒"></a>提醒</h3>setTimeout() <strong>只执行 code 一次</strong>。如果要<strong>多次调用</strong>，请<strong>使用 setInterval() 或者让 code 自身再次调用 setTimeout()</strong><h3 id="清除-setTimeout"><a href="#清除-setTimeout" class="headerlink" title="清除 setTimeout()"></a>清除 setTimeout()</h3><code>clearTimeout(timeoutID)</code><br>timeoutID 为调用 setTimeout() 函数时所获得的返回值，使用该返回标识符作为参数，可以取消该 setTimeout() 所设定的定时执行操作。<h3 id="统一示例"><a href="#统一示例" class="headerlink" title="统一示例"></a>统一示例</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">eg</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你好'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//使用方法名字执行方法</span><span class="token keyword">let</span> t1 <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>eg<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用字符串执行方法</span><span class="token keyword">let</span> t2 <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"eg()"</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清除定时器</span>window<span class="token punctuation">.</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3></li><li>用于延迟执行某方法或功能</li></ul><h2 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval()"></a>setInterval()</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>setInterval() 方法重复调用一个函数或执行一个代码段，在每次调用之间具有固定的时间延迟。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p>语法与 setTimeout() 相同：</p><p><code>var intervalID = setInterval(code/function, delay)</code></p><h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><ul><li>code/funciton：必需。要调用的函数后要执行的 JavaScript 代码串或者函数。</li><li>millisec：必需。在执行代码前需等待的毫秒数。<h4 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h4>此返回值 intervalID 是一个非零数值，用来标识通过setInterval()创建的计时器，这个值可以用来作为clearInterval()的参数来清除对应的计时器 。<h3 id="提醒-1"><a href="#提醒-1" class="headerlink" title="提醒"></a>提醒</h3>setInterval() 会<strong>重复执行多次</strong>。如果想<strong>只执行一次</strong>，请<strong>使用 setTimeout()</strong><h3 id="清除-setInterval"><a href="#清除-setInterval" class="headerlink" title="清除 setInterval()"></a>清除 setInterval()</h3><code>clearInterval(intervalID)</code><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3></li><li>用于刷新表单，对于一些表单的实时指定时间刷新同步</li></ul><h2 id="深入思考"><a href="#深入思考" class="headerlink" title="深入思考"></a>深入思考</h2><p>在项目中使用这两者的时候会发现，调用函数的时候时间间隔虽然几乎相同，但并不精确，这时候如果项目中用这两者做动态效果，可能会发现：当程序中同时出现其他各种事件处理程序时，动画会变得不够平滑。那为什么会出现这种情况？</p><p>这是由于 JavaScript 其实是运行在单线程环境中的，这就意味着定时器仅仅是计划代码在未来的某个时间执行，而具体执行时机是不能保证的。<br>打个比方：我设置了一个定时器，这时候这个定时器事件就会被添加到待执行事项中，如果在这个定时器事件之前没有其他事件排队等待执行的话，就可以立即执行定时器事件；但如果前面有很多且耗时很久的事件等待执行，那这个定时器事件就不得不推迟时间执行了，这样一来，就不能如时按照指定的时间运行代码了。<br>因为这样，才会导致 setTimeout 和 setInterval 执行的时间间隔不能精确。那么有读者可能会问，影响这个时间间隔的因素是什么？答案是运行这两个方法的宿主环境，不同的浏览器、不同系统、不同版本的测试环境都会对其造成影响，事实上 GitHub 上早已有人 issue 该问题，然而至今仍然处于 open 状态：<a href="https://link.zhihu.com/?target=https://github.com/nodejs/node-v0.x-archive/issues/8066">setInterval doesn’t comply with DOM-version</a>、<a href="https://link.zhihu.com/?target=https://github.com/nodejs/node/issues/7346">setInterval interval includes duration of callback</a>、<a href="https://link.zhihu.com/?target=https://github.com/nodejs/node/issues/7554">setInterval/setTimeout interval should not include duration of callback</a></p><p>后面这个问题如果解决了，笔者会再来更新的~</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>知道 setTimeout() 和 setInterval() 是怎么一回事之后，在项目中合理采用就好了，一般问题不大，可能面试的时候会问到更加深入的东西？笔者也不知道呢，毕竟暂无面试经历，但准备面试过程中应该也少不了这方面的知识点拓展，有备无患 Orz。</p><p>这篇文章有相关的使用案例，可供读者参考：</p><blockquote><p><a href="https://www.cnblogs.com/lynnmn/p/6222753.html">setTimeout和setInterval的区别以及如何写出效率高的倒计时</a></p></blockquote><p>如果有说得不对的地方，还烦请大佬们指正，笔者愿与大家一起探讨 (<em>^▽^</em>)~~</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tell it to myself</title>
      <link href="/2021/11/08/tell-it-to-myself/"/>
      <url>/2021/11/08/tell-it-to-myself/</url>
      
        <content type="html"><![CDATA[<h2 id="前因后果"><a href="#前因后果" class="headerlink" title="前因后果"></a>前因后果</h2><p>实习项目从开始做到现在已经过去 10 个星期了，前 9 个星期一直在努力实现各种模块各种功能点，直到上个星期才开始准备记笔记（也就因此搭建了个人博客），搭了一两天后博客已经运行起来，然后开始写博客的期间又断断续续更新了一部分主题配置，一个星期也就过去 2/3 了，这个时候我其实有点沉不住气了，因为想着快点弄完这些鸡毛蒜皮的事才好去接着开发项目的其他功能，于是耐着性子修复了项目一小部分的 bug 后（此时就已经发现的 bug 还有挺多的，但我没有心情全部修复），终于在周末的时候向 @Dangosky 交任务了，在这次聊天中我认识到了一个基本但极为重要的事情……</p><h2 id="重点敲黑板"><a href="#重点敲黑板" class="headerlink" title="重点敲黑板"></a>重点敲黑板</h2><p>Dangosky 跟我说，<strong>做项目追求速度而不注重质量，这样的项目做出来是没有什么用处的</strong>。</p><p>这样说是有道理的，他说：</p><ul><li>初学者做项目最忌讳冒进，贪多嚼不烂</li><li>首先要明确一点，做项目第一目标是从中学习东西，第二目标是有个项目经历之后才好些简历</li><li>同一个项目，即使你一个月搞出来了，但很多 bug ，很多设计问题、很多 bad case 没考虑到，面试官一问，什么都没想到、很多都答不出来，这样的项目做得再快也没用的</li><li>相反，你一个项目即使做上半年，但你做得很有质量，很多方面都考虑到了，甚至还思考到了项目可以拓展的地方（比如实现国际化语言等等），面试官一问你这个项目有什么亮点或不足，你能够头头是道，让你讲个二十分钟你都讲不完，这两种情况是完全不一样的</li></ul><p>我就属于注重速度那一类，没有沉住气来着重项目质量，以及完全吸收从项目中学习到的东西，反而总是想着要搞快点搞快点，抓紧时间把项目给搞出来，以至于忽略了做这个项目的初心。但现在我明白了，做这个项目最重要的应该是从中学习到新知识、新技术等，把自己的项目经历丰富起来，不应该倾向于开发速度。</p><p>同时，在做项目的过程中，bug 是必不可少的，<strong>解决 bug 也是一种提升实力的方式</strong>。<br>Dangosky 说：</p><ul><li>初学阶段，卡 bug 本身就是一种学习了</li><li>只是这种学习方式很难受，因为一直卡在那个地方解决不了，难免心态不好自我怀疑，比不上你敲代码实现一个新功能来的有成就感</li><li>但卡 bug 是每个人学习的必经之路，是躲不掉的。在工作之后，一个团队中也会有几个人一直是在修 bug ，摆正心态、明确目标就好了</li></ul><p>就我亲身经历而言，一开始做项目的时候，我会卡在一个地方不知道怎么办，那种感觉就像无头苍蝇一样，面对代码无从下手，要么是不知道从哪里排查问题，要么排查的方向有误，导致浪费了很多的时间。但渐渐的，我掌握一些技巧和方法了，知道一个报错该去什么地方解决，之后很多问题根据差不多的思路也可以很快找到对应的解决方法。这些都是在解决 bug 之后积累出来的经验，所以对于 <strong>卡 bug 本身就是一种学习</strong> 这句话，我是举双手双脚赞成的。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>知道了自己“右倾”、心态不对劲之后，接下来我要做的便是摆正好心态、明确自己的目标了，心中有量尺，之后做的事就会有分寸。</p><blockquote><p>以此篇记录我在做项目过程中遇到的思想误区，告诫自己以后莫要再犯同样的错误了！</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目之登录/注册模块</title>
      <link href="/2021/11/02/xiang-mu-zhi-deng-lu-zhu-ce-mo-kuai/"/>
      <url>/2021/11/02/xiang-mu-zhi-deng-lu-zhu-ce-mo-kuai/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇博客：<a href="https://hcyety.github.io/react-ts-xiang-mu-zai-xian-bian-cheng-bi-shi-ping-tai/">React-Ts 项目：在线编程笔试平台</a> 有说到，这个项目是前后端分离项目，也就是说，其实该项目相当于两个项目，分别专注前端和后端，如果要上传到 <code>github</code> ，那么就需要创建两个仓库来分别放置。博主已经将源码 push ，读者可以跳转查阅：<a href="https://github.com/HCYETY/Online-programming-platform">前端项目仓库</a> — <a href="https://github.com/HCYETY/Online-programming-platform_service">后端项目仓库</a></p><p>前端项目采用的技术栈是 <code>React</code> 。UI 的设计是上下布局，即头部导航栏、下面主体内容，其中使用了 antd4 的 <code>Card</code> 和 <code>Form</code> 组件，效果如图所示：<img src="https://z3.ax1x.com/2021/11/02/IkyIBQ.png" alt="登录"><img src="https://z3.ax1x.com/2021/11/02/Ik63gf.png" alt="注册"></p><blockquote><p>本来想实现的效果是翻转卡片，即点击“登录”或“注册”就能将卡片翻转，同时“登录”面带有标签，可以切换登录方式：邮箱登录和账号登录，但奈何一直找不到合适的解决方法，就使用了 antd 的 <strong>带标签页的卡片</strong>，如果读者知道如何解决这一问题，还望不吝赐教 ^_^</p></blockquote><p>后端项目采用的技术栈是 <code>NodeJs</code> ，使用的数据库是 <code>MYSQL</code> 。项目中运用了 <code>Koa</code> 和 <code>TypeORM</code> 框架来搭建 <code>Node</code> 服务和操作  <code>MYSQL</code> 数据库。</p><blockquote><p>项目所使用的技术栈读者已经清楚，我们继续往下看吧~~</p></blockquote><h2 id="注册模块（支持邮箱注册）"><a href="#注册模块（支持邮箱注册）" class="headerlink" title="注册模块（支持邮箱注册）"></a>注册模块（支持邮箱注册）</h2><h3 id="code-前思考"><a href="#code-前思考" class="headerlink" title="code 前思考"></a>code 前思考</h3><p>首先我们需要理清注册的逻辑，联想我们在一个网站上注册时，操作流程是怎么样的。我们可以很快知道，通常有两种方式，一种是手机号注册，一种是邮箱注册。</p><ol><li><p>手机号注册<br><img src="https://z3.ax1x.com/2021/11/03/IAj9Rx.jpg" alt="常见手机注册"></p></li><li><p>邮箱注册<br><img src="https://z3.ax1x.com/2021/11/03/IAXWqg.jpg" alt="常见邮箱注册"></p></li></ol><blockquote><p>注册的方式有很多种，除了手机邮箱注册，还有用户名/xx号注册、第三方注册等，具体想选择哪种方式实现注册，读者可以自行选择，下面我们还需要来看看如何实现前后端的连接，以跑通整个项目。</p></blockquote><blockquote><p>情况说明：博主选择的方式是邮箱注册。</p></blockquote><h3 id="逻辑思考"><a href="#逻辑思考" class="headerlink" title="逻辑思考"></a>逻辑思考</h3><ol><li>用户在前端界面填写表单信息，点击“获取验证码”按钮后，会【发送请求】给后端</li><li>后端【接收前端传来的请求】后，会随机生成一个包含大小写字母和数字的 6 位数验证码，并将该验证码存储在数据库中，同时【响应数据】（这里指验证码）给前端。</li><li>前端【接收后端响应体】（这里指后端传过来的验证码）后，必须填入表单中才能提交（表单组件可以在 rule 里设定 required ）。</li><li>点击“提交”后，这时前端发送的请求体中包含了表单中的所有数据，同样将其发送给后端。后端获取请求体中的所有信息，根据邮箱账号从数据库中查询是否已经存储了该用户，若查找不到则说明无人使用该邮箱注册过，可以允许注册，将邮箱和密码等相关信息一并存进数据库中；否则直接响应数据，告知前端该用户已经注册。前端根据后端响应的信息进行对应的操作，如注册成功，可以跳转到登录页面进行登录，否则弹出警告，告知用户注册信息填写有误。</li></ol><blockquote><p>说到这里，读者应该懂得了将前后端项目串联起来的一系列逻辑，概括起来便是前端调用后端接口【发送请求】，后端设定接口给前端调用【接收请求】，这样一来前后端便可以互连跑通服务了。</p></blockquote><blockquote><p>但问题来了，“你说了这么多，我还是不知道该怎么在前端调用后端接口，后端又如何接收到前端传来的请求”？别急，博主只是先抛砖引玉，先给大家捋顺跑通前后端服务的逻辑，心里好有个底。下面我们继续往下</p></blockquote><ol start="5"><li>前端发送请求的方式有多种，如 fetch、axios 等，这里使用的是 axios ，下面自定义封装的 axios 函数，仅供大家参考：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 文件结构：根目录下/src/api/index.ts</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token comment">// 注意这个路径，http://localhost:8080 是后端服务的地址，/api 是请求的固定格式，后面调用该函数的时候还会再传入一个参数 /xxx ，因此后端要想接收前端请求，就必须配置接口路径成 前端服务的地址/api/xxx ，这样前后端项目才能跑通【不理解的话后面代码还会有注释】</span><span class="token keyword">const</span> <span class="token constant">REQUESTIP</span><span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">"http://localhost:8080/api"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">generateHttpApi</span><span class="token punctuation">(</span>method<span class="token operator">:</span> <span class="token string">'get'</span> <span class="token operator">|</span> <span class="token string">'post'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token operator">:</span> string<span class="token punctuation">,</span> params<span class="token operator">?</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> method <span class="token operator">===</span> <span class="token string">'get'</span> <span class="token operator">?</span> <span class="token punctuation">&#123;</span>      params    <span class="token punctuation">&#125;</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>      data<span class="token operator">:</span> params    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 调用函数时会传入 url （相当于上面说的xxx），在这里进行拼接，就成了前端调用后端接口的完整 url 了：后端服务地址/api/xxx</span>    url <span class="token operator">=</span> <span class="token constant">REQUESTIP</span> <span class="token operator">+</span> url<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        url<span class="token punctuation">,</span>        method<span class="token punctuation">,</span>        <span class="token operator">...</span>data<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">const</span> get <span class="token operator">=</span> <span class="token function">generateHttpApi</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token function">generateHttpApi</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>调用 axios 封装函数的时候：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 文件结构：根目录/src/api/modules/interface.ts</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> post <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'根目录/src/api/index'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">testRegister</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token operator">:</span> <span class="token punctuation">&#123;</span> email<span class="token operator">:</span> string<span class="token punctuation">;</span> cypher<span class="token operator">:</span> string<span class="token punctuation">;</span> captcha<span class="token operator">:</span> string<span class="token punctuation">;</span> identity<span class="token operator">:</span> number<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 此时前端请求的整个路径为 http://localhost:8080/api/register，那么假设前端项目地址为 http://localhost:3000 ，后端就需要定义接口路径为 http://localhost:3000/api/register</span>  <span class="token keyword">return</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 文件结构：根目录/src/pages/login/index.tsx</span><span class="token comment">// 这里结构其实不是很好，因为注册和登录是写在一块的，没有分开来。读者清楚是在注册事件下发送 axios 请求的就好</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> testRegister <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'根目录/src/api/modules/interface'</span><span class="token punctuation">;</span>  <span class="token comment">// 点击“注册”按钮触发的函数：</span><span class="token function-variable function">submitRegister</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">values<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 表单的值</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> account<span class="token punctuation">,</span> password<span class="token punctuation">,</span> identity<span class="token punctuation">,</span> email<span class="token punctuation">,</span> cypher<span class="token punctuation">,</span> captcha <span class="token punctuation">&#125;</span> <span class="token operator">=</span> values<span class="token punctuation">;</span>  <span class="token comment">// 请求参数</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span> email<span class="token punctuation">,</span> cypher<span class="token punctuation">,</span> captcha<span class="token punctuation">,</span> identity <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// ！发送请求并获取返回值</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">testRegister</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 注册成功</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 在当前页跳转至登录界面</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> noTitleKey<span class="token operator">:</span> <span class="token string">'login'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>然后是在后端定义接口。博主的后端项目使用了 <code>Koa</code> 框架，因此可以调用它的 API :</li></ol><blockquote><p>注意：如果是本地项目要解决跨域，Koa 可以使用 koa2-cors 直接解决；但如果是线上项目的话，还需要另外的配置，网上有多种处理跨域的解决方法，博主采用的方法是配置 nginx 反向代理，具体操作可以跳转到另一篇博客：<a href="https://hcyety.github.io/qian-hou-duan-fen-chi-xiang-mu-xian-shang-bu-shu/">前后端分离项目线上部署</a>，里面有配置 nginx 的具体步骤，在这里不加叙述。</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 下面 code 仅供参考，大致是这么一个模式</span><span class="token keyword">import</span> Koa <span class="token keyword">from</span> <span class="token string">'koa'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'koa-router'</span><span class="token punctuation">;</span><span class="token keyword">import</span> bodyParser <span class="token keyword">from</span> <span class="token string">'koa-bodyparser'</span><span class="token punctuation">;</span>        <span class="token comment">// 处理 post 请求，有了这个插件才能获取 post 参数【通常前端的请求方式是 post 】</span><span class="token keyword">import</span> cors <span class="token keyword">from</span> <span class="token string">'koa2-cors'</span><span class="token punctuation">;</span> <span class="token comment">// 处理跨域问题</span><span class="token keyword">import</span> register <span class="token keyword">from</span> <span class="token string">'./middleware/register'</span><span class="token punctuation">;</span>   <span class="token comment">// 导入注册的 .ts 文件，用于处理注册事件【通常不放在入口文件里，而是单独抽出来】</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span>corsOptions<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 处理 post 请求的参数。</span><span class="token comment">// 注意这个插件的位置，必须要放在匹配接口之前！！！</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">bodyParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 匹配接口，这里的路径和前端请求路径中端口号后面那部分是保持一致的</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/api/register'</span><span class="token punctuation">,</span> register<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 组装匹配好的路由，返回一个合并好的中间件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里启动的后端服务是 8080 端口</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'网站服务器启动成功，请访问 http://localhost:8080'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>说一句：定义好了后端接口，可以查阅 <a href="https://cloud.tencent.com/developer/article/1876810">postman 使用教程</a>，在 <a href="https://www.postman.com/downloads/">postman 官网</a> 下载 <code>postman</code> ，方便测试接口是否被成功调用，推荐使用！</p></blockquote><h2 id="登录模块（支持邮箱登录）"><a href="#登录模块（支持邮箱登录）" class="headerlink" title="登录模块（支持邮箱登录）"></a>登录模块（支持邮箱登录）</h2><ol><li>跑通前后端服务的逻辑同注册一致，也是【前端发送请求】–【后端接收请求】–【后端响应请求】 –【前端接收响应】 </li></ol><blockquote><p>然而这样简单地实现登录功能，用户是可能通过控制台篡改后端的响应数据的，进而实现登录跳转，这里采用后端 session 身份验证进行防范。同时前端需实现登录拦截，防止用户未经登录便通过 url 跳过登录验证。</p></blockquote><ol start="2"><li>所谓 session 身份验证，打个比方就是“你第一次来的时候我发给你一张身份证，但只是一张写着身份证号码的纸片。以后你每次来办事，我根据这张身份证去后台查一下你的 id 是不是有效”。  </li></ol><p>对应到登录功能，就是每次用户登录的时候，后端获取到用户邮箱，根据这个邮箱查找数据库中存储的该用户的信息，若查找不到说明该用户未注册；若查找得到则说明该用户已注册成功，可以往下匹配密码，若密码错误，则不能登录，也就不用“发放身份证”了；若密码正确，则“可以发放带有身份证号码的身份证”–生成 session 并存进 cookie 中响应给前端。这样用户就算篡改后端响应数据，要登录的时候 session 还是会发生更改，不会与用户篡改后的数据相匹配；同时如果用户在未登录的状态下更改 url ，也会触发登录拦截，后端会验证登录状态。</p><blockquote><p>这个 session 是一个长度为 20 左右的包含数字和大小写字母的 session 随机数，将这个随机数①存进该用户的信息中，以便在维护登录状态时可以根据用户账号获取；②生成一个 cookie ，将 session 存进该 cookie 中。  </p><p>那么问题又来了，session 可以通过 JS 函数 return 一个值得到，但这个 cookie 该如何生成？ session 又如何存进 cookie 中？</p></blockquote><p>在 Koa 中，这两个问题可以一并解决：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 文件结构：根目录/src/middleware/login.ts</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token operator">:</span>Context</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// generateMixed() 是封装的 JS 函数，用于生成随机数</span>  <span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">generateMixed</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置 cookie </span>  ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>    <span class="token string">'session'</span><span class="token punctuation">,</span> session<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> httpOnly<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> maxAge<span class="token operator">:</span> <span class="token number">3600000</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在前端封装 axios 函数的地方加上配置 <code>axios.defaults.withCredentials = true;</code> 之后，就会在前端每次向后端请求数据时，请求头中自动带上 cookie ，后端便可以获取到这个 cookie 对用户身份进行验证：如果与数据库中该用户的 session 一致，则说明用户处于登录状态，否则用户未登录。可以设一个字段标识登录状态，返回给前端，以便前端判断用户是否登录成功。</p><ol start="3"><li>前端在路由页面发送登录请求（参数为 cookie ），如果后端接收到了 cookie ，并在数据库中找到 session 为 cookie 的用户信息，说明用户处于登录状态，否则处于未登录状态。对于未登录的用户，重定向到登录页面即可。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 登录 </tag>
            
            <tag> 注册 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React-Ts 项目：在线编程笔试平台</title>
      <link href="/2021/11/02/react-ts-xiang-mu-zai-xian-bian-cheng-bi-shi-ping-tai/"/>
      <url>/2021/11/02/react-ts-xiang-mu-zai-xian-bian-cheng-bi-shi-ping-tai/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇博客说到线上部署项目到服务器，博主说的就是这个 React-Ts 项目啦，它是博主为将来找实习准备的，用到的技术点有好一些是边学边做的，如果有不同见解的地方还请读者不吝赐教。</p><blockquote><p>需要事先说明的是，关于这个项目的博客，博主并不打算讲解代码实现，每个人的项目用到的技术栈不尽相同，但有一点可以确定，就是项目功能点的实现逻辑是大致相同的，故博主会更多地讲解各模块/功能点的逻辑实现 ^_^</p></blockquote><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>这是一个前后端分离项目：在线编程笔试平台。按照用户角色分为两部分，分别是面试官侧和候选人侧，主要功能是候选人在线完成代码编写，面试官可查看编程结果。</p><h2 id="项目任务拆解"><a href="#项目任务拆解" class="headerlink" title="项目任务拆解"></a>项目任务拆解</h2><ol><li>登录/注册模块</li></ol><ul><li>支持邮箱登录和注册</li><li>支持“退出登录”功能</li></ul><ol start="2"><li>面试题模块</li></ol><ul><li>面试官可填写面试题</li><li>每个面试题有固定链接</li><li>支持新建面试题和修改面试题目</li><li>支持邀请一个候选人编程</li><li>面试题目支持富文本格式</li></ul><ol start="3"><li>在线编程模块</li></ol><ul><li>候选人可在线编写代码</li><li>代码支持多种语言高亮 111</li><li>候选人侧提交最终编程代码 111</li><li>面试官侧刷新能看到最终代码 111</li></ul><ol start="4"><li>在线编程模块支持自动刷新</li></ol><ul><li>候选人侧代码支持自动保存</li><li>面试官侧代码自动刷新</li></ul><ol start="5"><li>实时文字聊天模块</li></ol><ul><li>候选人和面试官可实时文字聊天</li><li>其他获得连接的人都可参与文字聊天</li></ul><ol start="6"><li>在线语音聊天模块</li></ol><ul><li>候选人和面试官可实时语音聊天</li></ul><ol start="7"><li>在线编程模块支持运行JS代码</li></ol><ul><li>候选人和面试官可在线运行 JS 代码并查看输出</li></ul><ol start="8"><li>在线编程模块支持协同编辑</li></ol><ul><li>候选人和面试官可实时协作编程</li></ul><ol start="9"><li>视频聊天模块</li></ol><ul><li>候选人和面试官可实时视频聊天<h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2>前端：React + TypeScript ，后端：Node.js + MySQL + Koa 。<h2 id="项目实现"><a href="#项目实现" class="headerlink" title="项目实现"></a>项目实现</h2></li><li>  为了实现登录/注册模块，使用 Cookie 验证用户信息、localStorage 保存登录态、nodemailer 发送验证码邮件至用户邮箱、登录或注册按钮设置防抖，实现了登录、注册、忘记密码和15天内免登陆功能。</li><li>  为了实现创建面试题模块，使用 Ant Design 完成 UI 设计、wangEditor  支持面试官编辑面试题、在修改信息时调用后端接口以获取数据进行初始化、nodemailer 发送邮件告知候选人试卷信息，使面试官能进行试卷和试题的增删查改，以及邮件通知当事人试卷信息。</li><li>  为了实现在线编程模块，使用 react-monaco-editor 支持候选人编辑代码并提交、filter api 完成试题的多次筛选，实现了编程功能。</li><li>  为了实现实时文字聊天模块，使用 WebSocket 监听客户端和服务端的聊天信息，后端接受处理后响应给前端，使候选人和面试官能进行实时文字交流。</li><li>  为了快速完成项目部署，前端使用 scp 连接服务器并上传文件到服务器 nginx 下的指定目录，后端使用 fs 读写本地文件、node-ssh 连接服务器并将指定文件上传到 tomcat 下的指定目录、运行本地编写的 deploy.sh 脚本启动后端服务、并用 pm2 实时监控，以此实现了项目的自动化部署。<h2 id="可拓展点"><a href="#可拓展点" class="headerlink" title="可拓展点"></a>可拓展点</h2></li><li>  性能优化。</li><li>  用户能提供试题题解，支持评论。</li><li>  实现语言国际化，支持多种语言切换。</li><li>  完善安全措施，能防止 xss 、csrf 等网络攻击。</li><li>  用户数据图形化，直观展示用户做题量、通过率等信息。</li><li>  实现视频和语音聊天模块，支持实时视频通话和语音聊天。</li></ul><h2 id="项目亮点（目前只实现了第一点）"><a href="#项目亮点（目前只实现了第一点）" class="headerlink" title="项目亮点（目前只实现了第一点）"></a>项目亮点（目前只实现了第一点）</h2><ol><li>实现自动化部署</li><li>支持运行 JS 代码</li><li>解决编辑冲突</li><li>支持文字、语音、视频聊天</li><li>性能优化</li><li>支持国际化</li><li>适配移动端<h2 id="项目进度"><a href="#项目进度" class="headerlink" title="项目进度"></a>项目进度</h2></li></ol><ul><li><input checked="" disabled="" type="checkbox"> 2021/09/04：实现登录/注册的静态页面</li><li><input checked="" disabled="" type="checkbox"> 2021/09/19：实现登录/注册逻辑（包括账号密码登录、登录拦截，session 身份验证）</li><li><input checked="" disabled="" type="checkbox"> 2021/09/29：初步部署前后端项目到阿里云服务器</li><li><input checked="" disabled="" type="checkbox"> 2021/10/04：购买域名并实现自动化部署项目</li><li><input checked="" disabled="" type="checkbox"> 2021/10/05：支持使用邮箱 登录和注册（删除了账号密码登录、注册的方式）</li><li><input checked="" disabled="" type="checkbox"> 2021/10/09：支持新建/删除试卷，在“新建试卷”里新建/修改/删除试题，发送邮件至候选人邮箱</li><li><input checked="" disabled="" type="checkbox"> 2021/10/23：初步完成面试题模块（包含“修改试卷”）</li><li><input checked="" disabled="" type="checkbox"> 2021/10/30：初步完成在线编程模块</li><li><input checked="" disabled="" type="checkbox"> 2021/10/31：搭建个人博客</li><li><input checked="" disabled="" type="checkbox"> 2021/11/02：记录项目从开始到现在的一系列笔记<h2 id="项目展示"><a href="#项目展示" class="headerlink" title="项目展示"></a>项目展示</h2><h3 id="PC-端"><a href="#PC-端" class="headerlink" title="PC 端"></a>PC 端</h3></li></ul><ol><li>登录/注册<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0cfdc5d4a8c4499bb4b61c079a472efc~tplv-k3u1fbpfcp-zoom-1.image" alt="登录界面"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/861c4674ea42445c8e03a5833ae1668d~tplv-k3u1fbpfcp-zoom-1.image" alt="注册界面"><h4 id="面试官侧"><a href="#面试官侧" class="headerlink" title="面试官侧"></a>面试官侧</h4></li><li>试题管理<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/52886536520b41448e775b477e96582e~tplv-k3u1fbpfcp-zoom-1.image" alt="试卷展示"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a4e1f09467942778499873449cd7da5~tplv-k3u1fbpfcp-zoom-1.image" alt="添加试题之试卷信息"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ead02f50b73402cb6cd1dfe4bf0604e~tplv-k3u1fbpfcp-zoom-1.image" alt="添加试题之试题信息"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c9e8cac0462483cb873ada635b1a614~tplv-k3u1fbpfcp-zoom-1.image" alt="修改试卷1"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/112c4560c1264156a071bb2b14e9dbdd~tplv-k3u1fbpfcp-zoom-1.image" alt="修改试卷2"></li><li>阅卷管理<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0ddf77041ab8406391ce4fe51b6a8f33~tplv-k3u1fbpfcp-zoom-1.image" alt="试卷展示"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bf43ca6e4c104112a23d6fe1a3822cbc~tplv-k3u1fbpfcp-zoom-1.image" alt="试卷详细信息之1"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffabbd4d5e8e4cfd99e4a4236d552c41~tplv-k3u1fbpfcp-zoom-1.image" alt="试卷详细信息之2"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5317d1a2c34d4a1389ebbf5759c7872a~tplv-k3u1fbpfcp-zoom-1.image" alt="试卷详细信息之3"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0ed582f546a24485b3b0b0d464136f21~tplv-k3u1fbpfcp-zoom-1.image" alt="批阅试卷"></li><li>面试间管理<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/58382121b13e4b859e2940cd0dde6198~tplv-k3u1fbpfcp-zoom-1.image" alt="面试间信息展示"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/57acd164b15749d7887082c0f073e33d~tplv-k3u1fbpfcp-zoom-1.image" alt="添加面试间"></li><li>面试间入口<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/edca450ad7c8435fbf37d679332305dc~tplv-k3u1fbpfcp-zoom-1.image" alt="进入面试间"><h4 id="候选人侧"><a href="#候选人侧" class="headerlink" title="候选人侧"></a>候选人侧</h4><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9dbdb188dff346779348aa6beb7fe66c~tplv-k3u1fbpfcp-zoom-1.image" alt="查看试卷"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c275d45505424420b3509472543ea407~tplv-k3u1fbpfcp-zoom-1.image" alt="面试间入口"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3910385a1081432197dc0a82883279c7~tplv-k3u1fbpfcp-zoom-1.image" alt="面试间展示"></li></ol><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p>GitHub 前端仓库地址：<a href="https://github.com/HCYETY/react-ts-coding_web">https://github.com/HCYETY/react-ts-coding_web</a></p><p>GitHub 后端仓库地址：<a href="https://github.com/HCYETY/node-mysql-coding_serve">https://github.com/HCYETY/node-mysql-coding_serve</a></p><p>项目演示地址：<a href="http://www.syandeg.com/">http://www.syandeg.com</a></p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>这个项目是笔者的第一个实习项目，前后端均由笔者独立完成，花费了很多时间和精力，读者觉得不错的话不妨给个<code>star</code>支持一下呀，不胜感激~ ^_^</p><p>这个项目笔者打算继续完善并维护下去，将它做大起来，如果有读者感兴趣该项目，<strong>想参与实现某个功能</strong>，<strong>或者有什么好的想法</strong>，也可以在评论区留言或者在 Github 上提 issue 等等，笔者看到的话会及时回复哒，<strong>先谢谢大家的支持啦</strong>！</p><p>另外针对本项目，后续会出相关文章介绍具体实现过程，大家也可以关注一下！</p><p>在线编程笔试平台项目系列文章：</p><ol><li><a href="https://hcyety.github.io/2021/10/31/error-zhi-bu-shu-fu-wu-qi-pian/">ERROR 之部署服务器篇</a></li><li><a href="https://hcyety.github.io/2021/11/01/qian-hou-duan-fen-chi-xiang-mu-xian-shang-bu-shu/">前后端分离项目线上部署</a></li><li><a href="https://hcyety.github.io/2021/11/02/xiang-mu-zhi-deng-lu-zhu-ce-mo-kuai/">项目之登录/注册模块</a></li></ol><h2 id="本文还在持续更新中……"><a href="#本文还在持续更新中……" class="headerlink" title="本文还在持续更新中……"></a>本文还在持续更新中……</h2>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Ts </tag>
            
            <tag> NodeJs </tag>
            
            <tag> Koa </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端分离项目线上部署</title>
      <link href="/2021/11/01/qian-hou-duan-fen-chi-xiang-mu-xian-shang-bu-shu/"/>
      <url>/2021/11/01/qian-hou-duan-fen-chi-xiang-mu-xian-shang-bu-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li>将项目部署至线上，使得任何用户在不同条件下也能够访问。那么首先需要一个服务器，网上有很多教程，能够教会大家如何拥有属于自己的服务器，这里不再赘述。本人购买的是阿里云的linux/CentOs7.7服务器（据说 21 年底，CentOs 官方将不再维护 CentOs8了，大家看看要配哪个系统好吧，博主之前不知情，选了 CentOs8 ，后来因为某种特殊原因决定重换系统，于是降低版本为 CentOs7）。 </li><li>当大家拥有自己的服务器后，就需要配置各种环境以支持项目能够顺利运行，这也是为什么开发者会说“这个项目在我的机器上能跑”的原了，因为“我的机器上有相关配置，你的机器上怎晓得有没有”。网上虽然有相关的资料，但杂多繁乱，本人当初因为配置环境浪费了很多时间，这里贴下 @b站up主CodeSheep 的 pdf ，真是一个很好的配置说明，一条龙服务，很快就能配置大部分必备的环境<blockquote><p>链接：<a href="https://pan.baidu.com/s/1yKVkabO-N-MCx4UwRbbKcQ">https://pan.baidu.com/s/1yKVkabO-N-MCx4UwRbbKcQ</a><br>提取码：h464 </p></blockquote></li></ol><p><strong>下面将会使用基础和进阶的方法部署项目，先说比较麻烦的手动部署流程，毕竟事情要一步一步来，从易到难嘛。</strong></p><h2 id="前端的手动化部署"><a href="#前端的手动化部署" class="headerlink" title="前端的手动化部署"></a>前端的手动化部署</h2><p>这里使用了 webpack ，由于本文重点不在于如何使用 webpack 配置项目，因此不详述，默认诸位看官已经学会相关知识点。</p><ol><li>首先要将本地项目打包成 dist 包，这点通过 webpack 配置可以完成。</li><li>打开 Xshell 工具，在 nginx 已经配合好的前提下，修改 nginx 的配置文件：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 找到【 nginx 的安装目录下的 conf】，修改 conf 下的 nginx.conf 。</span><span class="token comment">// 举例：我的安装路径是 /usr/local/nginx ，所以 vim /usr/local/nginx/conf/nginx.conf</span><span class="token comment">// 进到文件里面后，按 i 可以进入编辑模式修改文件，修改好后按 esc 可以退出编辑模式，然后输入 :wq 保存并退出文件</span><span class="token comment">// 修改配置如下：</span><span class="token comment">// 1. 在第一行加上 user root;</span><span class="token comment">// 2. 找到 server&#123; location / &#123;&#125; &#125;，修改如下</span>server <span class="token punctuation">&#123;</span>  listen       <span class="token number">80</span><span class="token punctuation">;</span>  server_name  localhost<span class="token punctuation">;</span>  #charset koi8<span class="token operator">-</span>r<span class="token punctuation">;</span>  #access_log  logs<span class="token operator">/</span>host<span class="token punctuation">.</span>access<span class="token punctuation">.</span>log  main<span class="token punctuation">;</span>  <span class="token comment">// 这里修改</span>  location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>    root   <span class="token punctuation">&#123;</span> nginx 的安装目录<span class="token operator">/</span>html<span class="token operator">/</span>xxx<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// eg. root   /usr/local/nginx/html/dist，dist 为打包后的前端项目;</span>    index  index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>htm<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 配置好 nginx.conf 后，保存退出，重启 nginx</span><span class="token comment">// 重启命令为 &#123; nginx 的安装路径/sbin/nginx -s reload &#125;，举例：/usr/local/nginx/sbin/nginx -s reload</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>打开 Xftp 工具，找到 { nginx 的安装路径/html/ }，例如 /usr/local/nginx/html/ ，将 dist 包上传至 html 目录下。访问 ip 地址就可以看到前端项目的静态界面了<blockquote><p>前端项目的部署相对来说简单一些，只要将打包后的文件夹上传到服务器即可（配置好 nginx 的前提下）。下面看下后端项目的部署</p></blockquote><h2 id="后端的手动化部署"><a href="#后端的手动化部署" class="headerlink" title="后端的手动化部署"></a>后端的手动化部署</h2></li><li>配置好 Tomcat ，相关教程看 上文3.2 的 pdf   </li><li>在 Tomcat 的安装目录下新建一个文件夹，用来存放后端项目，这里命名为 myApp 。打开 Xftp 工具，选中要上传的后端文件，拖拽实现上传  </li><li>打开 Xshell 工具，用命令行进入 myApp ，安装项目所需的依赖 <code>npm install</code> 。用 pm2 监控项目，先全局安装 pm2 <code>npm install pm2 -g</code> ，然后用 pm2 启动项目入口文件 <code>pm2 start &#123;入口文件&#125; </code> 。到这里，后端项目的部署也完成啦，咕咕咕~<blockquote><p>到这里，其实本应该能成功启动前后端项目，并能够跑通服务，但绝大多数情况下总是事与愿违的，似乎老天爷不会让事情这么顺利，总要让我们经历一番磨练，所谓“天将降大任于斯人也，必先苦其心志，劳其筋骨是也”，于是总会出现各种奇奇怪怪的 bug 。博主也遇到了，一度很伤脑筋，所以后来终于解决了，博主的上一篇博客：<a href="https://hcyety.github.io/2021/10/31/ERROR-%E4%B9%8B%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AF%87/">ERROR 之部署服务器篇</a> 记录了博主遇到的一些困难，说不定与读者相同，可以借鉴参考其解决方法，如果能顺利帮助到大家就再好不过了！</p></blockquote></li></ol><blockquote><p>如果读者已经顺利完成了项目的非自动化部署，相信能够感受到诸多的不便之处，下面博主会为大家介绍自动化部署前后端分离项目的流程，最终的效果便是在本地编辑器的终端运行两次命令：<code>npm run deploy 服务器的主机 服务器的密码</code> ，便能够分别实现前后端分离这两个项目从打包到上传服务器再到启动项目的一条龙服务，希望对大家有所帮助。</p></blockquote><h2 id="前端的自动化部署"><a href="#前端的自动化部署" class="headerlink" title="前端的自动化部署"></a>前端的自动化部署</h2><p>首先我们需要搞清楚前端项目的一系列部署流程，那便是 <strong>打包–登录服务器–上传打包文件</strong> ，那么按照这个思路，我们来具体捋清楚实现过程：</p><ol><li>逻辑思考</li></ol><ul><li>①运行脚本命令；</li><li>②然后脚本读取配置文件（包含服务器host、port、web目录及本地目录等信息）；</li><li>③<strong>打包生成 dist 包</strong> – <code>npm run build</code>；</li><li>④<strong>使用 scp2 连接服务器</strong>；</li><li>⑤<strong>将本地打包的 dist 上传</strong>至 <code>/usr/local/nginx/html/</code> ；</li><li>⑥<strong>获取脚本命令的自定义参数</strong>，这里的参数为服务器主机和密码，并赋值给服务器配置文件（第④点的目的是防止将服务器的主机和密码泄露在项目中）。  </li></ul><ol start="2"><li>逻辑实现<pre class="line-numbers language-json" data-language="json"><code class="language-json">&#x2F;&#x2F; 在 package.json 文件的 scripts 字段定义脚本命令 &quot;deploy&quot;&quot;scripts&quot;: &#123;  &quot;build&quot;: &quot;webpack --config webpack&#x2F;webpack.prod.js&quot;, &#x2F;&#x2F;博主这里的配置是这样的，可能跟大家有点出入  &quot;deploy&quot;: &quot;npm run build &amp;&amp; node .&#x2F;deploy&#x2F;index.js&quot;&#125;&#x2F;&#x2F; 看到上面的 deploy 中的路径，我们可以知道需要在项目根目录下新建文件夹 deploy ，并在 deploy 下新建文件 index.js ，这个文件是为了使用 scp2 连接服务器，因此里面还放有服务器的一些相关配置。现在开始编写 index.js ：&#x2F;&#x2F; 注：scp2 的官网有相关 API 的使用方法，需要提醒的是文件上传的路径需要特别注意，因为不同的工具，写法不同，最终的效果也是有所差别的，例如有些工具上传文件时如果发现服务器该路径下没有对应文件，会自动生成文件夹，但有些工具却不会；同时，上传的文件路径后面带不带 “&#x2F;” ，也是会有不同的效果的，读者需要稍微留意一下。&#x2F;&#x2F; 1.引入 scp2 ，用于连接服务器const client &#x3D; require(&#39;scp2&#39;);&#x2F;&#x2F; 2.服务器的配置选项const server &#x3D; &#123;  host: &#39;&#39;, &#x2F;&#x2F; ip 地址  port: 22, &#x2F;&#x2F; 端口号  username: &#39;root&#39;, &#x2F;&#x2F; 用户名  password: &#39;&#39;, &#x2F;&#x2F; 密码  path: &#39;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html&#x2F;dist&#39;  &#x2F;&#x2F; 存放项目的路径&#125;&#x2F;&#x2F; 4.用解构赋值获取脚本命令后面的两个参数：主机和密码const [ , , host, password] &#x3D; process.argv;server.host &#x3D; host;server.password &#x3D; password;&#x2F;&#x2F; 3.连接服务器并上传 dist 包到服务器的指定目录 pathclient.scp(&#39;dist&#x2F;&#39;, &#123;  port: server.port,  host: server.host,  username: server.username,  password: server.password,  path: server.path&#125;, function(err) &#123;  if (err) &#123;    console.log(&#39;文件上传失败&#39;, err)  &#125; else &#123;    console.log(&#39;文件上传成功&#39;);  &#125;&#125;)&#x2F;&#x2F; 之后执行【 npm run deploy 服务器主机 服务器密码 】便可实现前端项目的自动化部署了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后端的自动化部署"><a href="#后端的自动化部署" class="headerlink" title="后端的自动化部署"></a>后端的自动化部署</h2>与前端项目的自动化部署一样，我们也需要搞清楚后端项目的一系列部署流程，也就是 <strong>用一个文件夹单独存放需要上传的文件–登录服务器–上传文件–启动项目</strong> ，我们同样来看看具体实现：</li><li>逻辑思考</li></ol><ul><li>①<strong>手动将需要上传的文件复制到一个新建文件夹里，这个文件夹博主命名为 oppService</strong>；</li><li>②运行脚本命令；</li><li>③然后脚本读取配置文件–包含服务器host、port 和 oppService 目录以及 deploy.sh 脚本等信息；</li><li>④<strong>调用 node-ssh API 连接服务器</strong>；</li><li>⑤将 oppService <strong>文件夹上传至服务器指定目录</strong>；</li><li>⑥启动项目的方式博主是在服务器上运行自己编写的 .sh 脚本，里面编写的是项目上传之后服务器要做的后续命令 – 进入服务器上的 oppService 文件夹里以<strong>执行 deploy.sh 脚本</strong>；</li><li>⑦<strong>获取 npm scripts 命令的自定义参数</strong></li></ul><ol start="2"><li>逻辑实现<pre class="line-numbers language-json" data-language="json"><code class="language-json">&#x2F;&#x2F; 同样在 package.json 文件的 scripts 字段定义脚本命令 &quot;deploy&quot;&quot;scripts&quot;: &#123;  &quot;deploy&quot;: &quot;node .&#x2F;deploy&#x2F;index.js&quot;&#125;&#x2F;&#x2F; 在项目根目录下新建文件夹 deploy ，并在 deploy 下新建文件 index.js 。开始编写 index.js ：&#x2F;&#x2F; 1.引入 node-ssh 模块 ，准备调用内置 API&#x2F;&#x2F; 这里有个小问题，貌似官方有个 bug 没解决，不能直接 const node_ssh &#x3D; require(&#39;node-ssh&#39;); ，而是得改成下面的形式去导入const node_ssh &#x3D; require(&#39;node-ssh&#39;).NodeSSH;const ssh &#x3D; new node_ssh();&#x2F;&#x2F; 6.用解构赋值获取脚本命令后面的两个参数：主机和密码，并存入 config 中const [ , , host, password] &#x3D; process.argv;&#x2F;&#x2F; 2.服务器的配置选项const config &#x3D; &#123;  path: &#123;    localPath: &#39;oppService&#x2F;&#39;,    romotePath: &#39;&#x2F;usr&#x2F;local&#x2F;apache-tomcat-8.5.71&#x2F;Online-programming-platform_service&#39;,  &#125;,  romote: &#123;    host: &#39;&#39;,    port: 22,    username: &#39;root&#39;,    password: &#39;&#39;  &#125;&#125;function uploadFile() &#123;  &#x2F;&#x2F; 3.连接服务器  ssh.connect(config.romote)  .then(() &#x3D;&gt; &#123;    &#x2F;&#x2F; 4.上传 dist 包到服务器的指定目录 path    ssh.putDirectory(config.path.localPath, config.path.romotePath)    .then(() &#x3D;&gt; &#123;      &#x2F;&#x2F; 5.执行脚本，完成文件上传后服务器的后备工作      ssh.execCommand(&#39;sh deploy.sh&#39;, &#123; cwd: config.path.romotePath &#125;)      .then((res) &#x3D;&gt; &#123;        if (!res.stderr) &#123;          process.exit(0);        &#125;      &#125;)    &#125;).catch(err &#x3D;&gt; &#123;      console.log(err)    &#125;)  &#125;).catch(err &#x3D;&gt; &#123;    console.log(&#39;服务器连接失败！！&#39;)  &#125;)&#125;uploadFile();&#x2F;&#x2F; 编写 deploy.sh 脚本#!&#x2F;bin&#x2F;bash# ①先关闭之前的服务，安装依赖之后再重启pm2 stop src&#x2F;app.ts# ②查看文件中是否已经包含 node_modules ，如果有则先删除file&#x3D;&#39;node_modules&#39;if [ -e $file ]; then  rm -rf $file  npm cache clean --forcefi# ③重新安装依赖cnpm install# ④查看8080端口是否被占用，有则 kill ，防止项目无法开启port&#x3D;8080pid&#x3D;$(netstat -nlp | grep :$port | awk &#39;&#123;print $7&#125;&#39; | awk -F&quot;&#x2F;&quot; &#39;&#123; print $1 &#125;&#39;)if [ -n &quot;$pid&quot; ]; then  kill -9 $pid;fi# ⑤重新启动 pm2pm2 start .&#x2F;src&#x2F;app.ts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>到这里，前后端分离项目的自动化部署就已经结束了，如果有遇到什么 bug ，也可以看看我的上一篇博客 <a href="https://hcyety.github.io/2021/10/31/ERROR-%E4%B9%8B%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AF%87/">ERROR 之部署服务器篇</a>，或许能够带来一点点帮助。<h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2>这样一来，项目部署的效率瞬间就提上来了，一条命令就搞定一切，但博主觉得，其实还有优化空间，例如后端项目需要事先将要上传的文件抽离出来，那我们每次编写完代码之后都得把文件更新一遍，不是很方便。这个问题就等后续再完善吧，毕竟在部署这里耽误的时间也差不多了(=￣ω￣=)。如果读者觉得有什么好的解决方案或者是其他可以优化的地方，也可以在评论区提出来哩，先谢过诸位啦~<blockquote><p>后续等有空了会回头来完善的哈</p></blockquote><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2>从对服务器一窍不通，到掌握线上项目的部署，再到命令行的熟练操作，以及对解决问题能力的锻炼，这些都是博主在完成这个前后端分离项目线上部署带来的好处，毫无疑问收获是颇丰的。但实现的过程却并不轻松，有时候一个 bug 一卡就是两三天（终究还是能力不够吧 T^T），浪费了很多时间，但坚持总会有作用的，至少排查问题的能力或多或少能有所提高，真心希望读者能顺利完成项目的部署，直接通关【妖魔鬼怪（bug）快离开，妖魔鬼怪（bug）快离开】。<blockquote><p>以上 ^_^</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux 服务器 </tag>
            
            <tag> 线上部署 </tag>
            
            <tag> scp2 </tag>
            
            <tag> node-ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ERROR 之部署服务器篇</title>
      <link href="/2021/10/31/error-zhi-bu-shu-fu-wu-qi-pian/"/>
      <url>/2021/10/31/error-zhi-bu-shu-fu-wu-qi-pian/</url>
      
        <content type="html"><![CDATA[<ol><li>POST <a href="http://localhost:3000/login">http://localhost:3000/login</a> 404 (Not Found)?</li></ol><p>有多种原因：①前端调用后端接口失败，通常是因为接口的路径匹配错误；②后端没有响应数据给前端；前端接收数据的格式与后端返回数据的格式不相符。</p><blockquote><p>参考：<a href="https://blog.csdn.net/qq_44163269/article/details/105442612">vue项目 前端 POST(GET) http://127.0.0.1xxx 404(Not Found)错误 （多种误区解决）</a></p></blockquote><ol start="2"><li>在服务器运行<code>npm run dev</code>报错：SyntaxError: Cannot use import statement outside a module？  </li></ol><p>这提示一般是node下无法使用import。</p><blockquote><p><a href="https://blog.csdn.net/weixin_43094085/article/details/114832738">解决方法参考这篇文章</a></p></blockquote><ol start="3"><li>在服务器上启动 NodeJs+ts 项目时报错之一：TS错误:⨯无法编译TypeScript(Error: TSError: ⨯ Unable to compile TypeScript)</li></ol><p>解决：从 package.json 中删除 ts-node 和 typescript 。然后：</p><pre class="line-numbers language-none"><code class="language-none">npm install ts-node --save-devnpm install typescript -g npm install typescript --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li>在服务器上启动 NodeJs + Ts 项目时报错之二：Can’t run my Node.js Typescript project TypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension “.ts” for /app/src/App.ts</li></ol><p>情况说明：博主启动项目的命令是 <code>npm start</code> ，项目 <code>package.json</code> 文件中 <code>scripts</code> 字段下 <code>start</code> 的代码为 <code>node src/app.ts</code> 。不幸的是，由于项目中既有 ES6 模块又有 CommonJS 模块，因此不能按照网上的教程只在 <code>package.json</code> 中添加 <code>&quot;type&quot;: &quot;module</code> 或者 只在 <code>tsconfig.json</code> 中添加 <code>&quot;type&quot;: &quot;CommonJS&quot;</code> ，因为如果这样的话，项目运行后还是会报如下的错误：</p><pre class="line-numbers language-none"><code class="language-none">import Koa from &#39;koa&#39;;^^^^^^SyntaxError: Cannot use import statement outside a module<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解决方法：修改 <code>package.json</code> 中 <code>scripts</code> 字段下 <code>start</code> 的代码为 <code>node --experimental-modules --loader ts-node/esm &#123; 项目入口文件 &#125;</code> </p><ol start="5"><li>服务器用 pm2 启动项目失败：Error: Cannot find module ‘/Users/wyb/.nvm/versions/io.js/v3.0.0/lib/node_modules/pm2/lib/ProcessContainerFork.js’</li></ol><p>情况说明：笔者的服务器确定是有安装了 pm2 的，使用 <code>pm2 -v</code> 也可以正常查询到版本号。然而此前 NodeJs 因为我误操作卸载重装了，虽然 pm2 也重新安装了一遍，但根目录下残留的文件路径指向的是以前的 pm2 ，因此只要将根目录下的 pm2 删除即可。</p><p>解决：<code>rm -rf ~/.pm2</code>  </p><blockquote><p>参考：<a href="https://stackoverflow.com/questions/36690442/error-cannot-find-module-users-wyb-nvm-versions-io-js-v3-0-0-lib-node-module">overflow 回答</a></p></blockquote><ol start="6"><li>启动 pm2 报错：Process or Namespace ./src/app not found<pre class="line-numbers language-none"><code class="language-none">[PM2][ERROR] Process or Namespace .&#x2F;src&#x2F;app.ts not found[PM2][ERROR] Interpreter &#x2F;www&#x2F;server&#x2F;nvm&#x2F;versions&#x2F;node&#x2F;v14.17.6&#x2F;lib&#x2F;node_modules&#x2F;pm2&#x2F;node_modules&#x2F;.bin&#x2F;ts-node is NOT AVAILABLE in PATH. (type &#39;which &#x2F;www&#x2F;server&#x2F;nvm&#x2F;versions&#x2F;node&#x2F;v14.17.6&#x2F;lib&#x2F;node_modules&#x2F;pm2&#x2F;node_modules&#x2F;.bin&#x2F;ts-node&#39; to double check.)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>排查流程：正常下，可以先 <code>pm2 -v</code> 查看是否已经安装 pm2 ，如果不能显示版本信息，有两种情况，一种是没有安装，那么运行 <code>npm install pm2 -g</code> ；如果确定安装过了，则可以试试建立软链接：<code>ln -s &#123; 安装 pm2 的绝对路径 &#125; /usr/local/bin/</code> 。如果还不能解决，就再往下看看。</li></ol><p>先看第二个报错，情况①博主的服务器安装了宝塔面板，并在面板里安装了 pm2 管理器，导致与服务器的 pm2 冲突。于是把宝塔面板中的 pm2 管理器卸载，就没有这个报错了。②用 xshell 工具执行这条命令：<code>pm2 start src/app.ts --interpreter ./node_modules/.bin/ts-node</code> 即可。</p><ol start="7"><li><p>将项目中的脚本上传至服务器并执行时报错：npm: command not found？</p><pre class="line-numbers language-none"><code class="language-none">deploy.sh: line 2: npm: command not found&#x2F;usr&#x2F;bin&#x2F;env: node: No such file or directory&#x2F;usr&#x2F;bin&#x2F;env: node: No such file or directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>根据网上的解决方法，正解本来应该是 用绝对路径设置软链 ，但博主的情况很特殊，是由于 /usr/bin/env 命令被修改，导致找不到 node ，这也是在我多方尝试无果之后向阿里提交工单，大佬给出的回复。<br>大佬的解决方法便是从版本相同的主机 copy 一份 /usr/bin/env 命令到我本机上，这才恢复正常。</p><blockquote><p>注：在服务器上的操作大家一定要慎重，误删文件可能会导致各种很难解决的 bug ，这已经是我第二次遇到特殊情况了。</p></blockquote></li><li><p>端口被占用？</p></li></ol><ul><li>查看端口使用情况：<code>netstat -ntlp</code></li><li>杀掉进程：<code>kill （对应端口的PID）</code><blockquote><p>参考资料：<a href="http://blog.csdn.net/ljfphp/article/details/78666376">【转】linux下杀死进程（kill）的N种方法</a></p></blockquote></li></ul><ol start="9"><li>无法访问阿里云ip地址？</li></ol><p>解决方法：<a href="https://www.cnblogs.com/ghzjm/p/10677599.html">linux服务器安装nginx及使用</a></p><blockquote><p>排查1：<a href="https://blog.csdn.net/sinat_25957705/article/details/80641077">阿里云服务器 nginx公网IP无法访问浏览器</a><br>排查2：<a href="https://blog.csdn.net/Adime_J/article/details/109155234">linux服务器部署完成之后访问不到—–总结篇</a></p></blockquote><blockquote><ol><li>ping ip成功只能说明主机可以到达，端口还是有可能不可到达的。端口不可到达可能是由于HTTP 服务器未启动或者监听在其他端口入8080上了；还有一个可能是防火墙没开放80端口的访问权限。</li></ol></blockquote><blockquote><p>排查过程中遇到的问题：</p><ol><li>curl: (7) Failed to connect to 120.79.193.126 port 80: Connection refused<br><a href="https://www.cnblogs.com/jukaiit/p/8994448.html">Xshell 链接 Could not connect to ‘192.168.80.129’ (port 22): Connection failed</a><br>在Linux6中查看及设置开机自启信息是使用chkconfig命令，Linux7中此命令已经被替代。虽然Linux7中已经不再使用chkconfig命令来管理服务是否开机自启，但是此命令仍旧可用，但是输出信息提示我们使用chkconfig命令的输出只是呗SysV所管理的服务，不包括systemd管理的服务，所以如果想在CentOS7中查看systemd管理的服务需要使用以下命令：<a href="https://blog.csdn.net/qq_38295166/article/details/79828482">CentOS 7设置ssh服务自动启动</a></li></ol></blockquote><blockquote><p><a href="https://blog.csdn.net/weixin_38705903/article/details/101911553">或许有用？</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 疑难杂症 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Begin: myfist blog</title>
      <link href="/2021/10/31/begin-myfist-blog/"/>
      <url>/2021/10/31/begin-myfist-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在做 React-Ts 项目，两个月了，有了这个项目该有的雏形。就在昨天，我实现好了项目 40% 的功能，心里放松了一下，突然觉得有点累了，不是说真的那种累，而是因为 我从这个项目本身学到了很多东西，不仅有知识点的深入理解，还有处理问题的能力、思维逻辑的锻炼等等，得到的好处很多，此前一直投身于项目功能点的实现，还没机会消化，突然松了口气，顿觉身上积攒了很多东西，我觉得是时候该静下心来，沉淀我这两个月来所学到的东西，于是我着手搭建个人博客，准备记录自己的所学所感……</p><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>大二在读生一枚，我喜欢前端世界，对于前端技术我怀有十分的兴趣，网络上所见到的各种好看、奇特的效果，一想到都是通过代码实现的，我就觉得十分神奇，我之前认为，代码和那些好看的特效是不沾边的东西，没想到那些是用我不知道的方式实现的。对于前端技术的原理，我也感觉十分神奇，让我知道了代码世界里想当然是不对的，如果这样便往往会犯错。当然，后端的世界也不赖，虽然不像前端那样可视化，但有时对数据的处理能够返回预期效果，成就感也十足。这样，我想成为一名前端工程师，努力的话，争取全栈。</p><p>电脑是我日常生活中不能缺少的一件必需品，但生活不能只有电脑，我也喜欢打羽毛球、乒乓球、游泳、聚会（仅限于我在意的人），诗和远方亦是我向往的生活。但我知道心中虽有所往，但那不是想有就有的，诗和远方 都挺贵，目前我所能做的，便是提升我的硬实力，总得拿到长途旅行的门票吧^_^</p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p>用了一天时间搭建了个人博客，是我喜欢的主题，既然有这么方便好看的工具为我们铺好了红毯，我难道不应该兢兢业业地写好文章、做好博客吗（<em>^▽^</em>）</p><p>我决定先把项目放一边，一个星期，就一个星期，我得总结归纳，好好沉淀一下，学到的 很多很快，如果不及时记录，估计又得还回去了，所谓好记性不如烂笔头，这句话既然能成为谚语，肯定是有它的过人之处的 (￣ェ￣;)。一个星期过后，我再重新扬帆起航吧，再花一个半月左右的时间，应该能把这个项目完全搞定，总计三个半月，应该还可以接受吧（好吧，我觉得有点久了，争取三个月搞定）。那么这一个星期，我就要从头回顾一下我的项目了，这个过程说不定还可以解决掉历史残留问题，总之，要加油了！</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>上文有说到，搭建个人博客的初衷是沉淀所学所感，因此我对这个博客的定义首先是一个技术博客，我希望它能成为一个有含金量的技术文章存放地；其次是我本人的心灵树洞，我也期望它能成为我倾诉心声的所在，毕竟我是一个有时不太爱说话的人…..</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
